{"version":3,"sources":["directives/updates.js","directives/title-row.js","directives/title-group.js","directives/tab-or-chart.js","directives/search-result.js","directives/search-result-non-title-columns.js","directives/on-finish-render.js","directives/log.js","directives/indexer-input.js","directives/focus-on.js","directives/duplicate-group.js","directives/download-nzbzip-button.js","directives/download-nzbs-button.js","directives/dataTableDirectives.js","directives/connection-test.js","directives/cfg-form-entry.js","directives/backup.js","directives/addable-nzbs.js","directives/addable-nzb.js","update-service.js","update-footer-controller.js","system-controller.js","stats-service.js","stats-controller.js","search-service.js","search-results-controller.js","search-history-service.js","search-history-controller.js","search-controller.js","restart-service.js","nzbhydra-control-service.js","nzb-download-service.js","modal.js","modal-service.js","login-controller.js","indexer-statuses-controller.js","index-controller.js","hydra-auth-service.js","header-controller.js","formly-config.js","file-download-service.js","downloader-categories-service.js","download-history-controller.js","config-service.js","config-fields-service.js","config-controller.js","categories-service.js","backup-service.js","nzbhydra.js","directives/keep-focus.js","generic-error-handler.js","filters.js"],"names":["hydraupdates","controller","$scope","UpdateService","$sce","loadingPromise","getVersions","then","data","currentVersion","repVersion","updateAvailable","changelog","getVersionHistory","versionHistory","trustAsHtml","update","showChangelog","showChanges","$inject","templateUrl","titleRow","titleRowController","duplicatesToShow","expanded","duplicates","length","console","log","scope","selected","rowIndex","titleGroup","$element","$attrs","titlesToShow","titles","slice","titleGroupExpanded","$on","event","args","stopPropagation","doShowDuplicates","internalRowIndex","multiElement","tabOrChart","transclude","chartSlot","tableSlot","restrict","replace","display","searchResult","groupingRowDuplicatesToShow","showDuplicates","hashGroupExpanded","hash","otherTitleRowsToShow","hashGroupDuplicatesToShow","hashGroup","toggleTitleGroup","require","otherColumns","$http","$templateCache","$compile","$window","$uibModal","growl","HydraAuthService","showNfo","resultItem","has_nfo","uri","URI","addQuery","searchResultId","get","toString","response","openModal","nfo","angular","isUndefined","message","info","error","size","modalInstance","open","template","NfoModalInstanceCtrl","resolve","result","downloadNzb","location","href","link","showDetailsDl","getUserInfos","maySeeDetailsDl","getNfoTooltip","element","attrs","cache","success","templateContent","replaceWith","$uibModalInstance","ok","close","item","cancel","dismiss","onFinishRender","$timeout","linkFunction","attr","$last","$evalAsync","hydralog","$interval","localStorageService","getAndShowLog","startUpdateLogInterval","tailInterval","doTailLog","scrollToBottom","doUpdateLog","logPromise","document","getElementById","scrollTop","toggleUpdate","set","toggleTailLog","indexerInput","isFocused","onFocus","onBlur","indexer","model","onClick","focusOn","directive","elem","e","name","focus","duplicateGroup","isBetween","num","betweena","betweenb","invertSelection","a","b","dontPush","index","_","indexOf","splice","push","Number","titlesExpanded","duplicatesExpanded","foo","duplicatesDisplayed","toggleTitleExpansion","$emit","toggleDuplicateExpansion","i","clickCheckbox","globalCheckboxIndex","currentTarget","dataset","checkboxIndex","checked","startIndex","endIndex","newValue","globalDuplicateGroupIndex","isFirstRow","displayTitleToggle","downloadNzbzipButton","FileDownloadService","download","searchResults","searchTitle","values","map","value","join","isDefined","filename","downloadFile","downloadNzbsButton","NzbDownloadService","downloaders","getEnabledDownloaders","downloader","added","of","columnFilterWrapper","vm","this","isActive","toggle","$broadcast","column","filterModel","controllerAs","bindToController","freetextFilter","onKeypress","keyEvent","which","filter","filtertype","checkboxesFilter","entries","preselect","invert","difference","apply","pluck","isBoolean","showInvert","booleanFilter","options","timeFilter","dateOptions","dateDisabled","formatYear","startingDay","formats","format","altInputFormats","openAfter","after","opened","openBefore","before","beforeDate","afterDate","columnSortable","sortMode","sort","connectionTest","showSuccess","testButton","removeClass","addClass","showError","testMessage","testConnection","url","params","myInjector","injector","type","username","password","apikey","host","port","ssl","text","id","cfgFormEntry","title","cfg","help","$eval","hydrabackup","BackupService","Upload","RequestsErrorHandler","RestartService","refreshBackupList","getBackupsList","backups","uploadActive","createAndDownloadBackupFile","moment","uploadBackupFile","file","errFiles","specificallyHandled","errFile","upload","content","restart","evt","progress","Math","min","parseInt","loaded","total","floor","restoreFromFile","addableNzbs","downloadType","addableNzb","iconCssClass","cssClass","add","blockUI","getChangelog","start","reset","UpdateFooterController","retrieveUpdateInfos","mayUpdate","maySeeAdmin","SystemController","$state","activeTab","ModalService","NzbHydraControlService","shutdown","deleteLogAndDatabase","yes","onYes","deleteLogAndDb","countdown","no","onCancel","forceUpdate","allTabs","active","state","goToSystemState","go","inherit","notify","reload","downloadDebuggingInfos","method","responseType","status","headers","config","createElement","blob","Blob","URL","createObjectURL","body","appendChild","click","removeChild","StatsService","getStats","getDownloadHistory","pageNumber","limit","sortModel","page","post","nzbDownloads","totalDownloads","StatsController","$filter","updateStats","getTime","stats","setStats","getChart","chartType","xKey","yKey","xAxisLabel","yAxisLabel","chart","height","margin","top","right","bottom","left","x","d","y","showValues","valueFormat","color","showControls","showLegend","duration","xAxis","axisLabel","tickFormat","rotateLabels","showMaxMin","yAxis","axisLabelDistance","tooltip","enabled","zoom","scaleExtent","useFixedDomain","useNiceScale","horizontalOff","verticalOff","unzoomEventType","key","bar","getResultsSharesChart","clipEdge","stacked","reduceXTicks","valueFormatter","avgIndexerSearchResultsShares","series","avgResultsShare","avgUniqueResults","initializingAfter","initializingBefore","subtract","toDate","$watch","avgResponseTimes","avgIndexerAccessSuccesses","indexerDownloadShares","downloadsPerHourOfDay","timeBasedDownloadStats","perHourOfDay","downloadsPerDayOfWeek","perDayOfWeek","searchesPerHourOfDay","timeBasedSearchStats","searchesPerDayOfWeek","numIndexers","avgResponseTimesChart","avgResponseTimesChartHeight","max","resultsSharesChart","rotation","downloadsPerHourOfDayChart","downloadsPerDayOfWeekChart","searchesPerHourOfDayChart","searchesPerDayOfWeekChart","indexerDownloadSharesChart","share","showLabels","labelThreshold","labelSunbeamLayout","legend","SearchService","search","category","query","tmdbid","imdbid","tvdbid","rid","season","episode","minsize","maxsize","minage","maxage","indexers","mode","isNumber","decodeURIComponent","lastExecutedQuery","processData","loadMore","offset","loadAll","removeQuery","results","indexersearches","rejected","resultsCount","each","ps","did_search","averageResponseTime","reduce","apiAccesses","memo","rp","response_time","lastResults","getLastResults","sumRejected","entry","SearchResultsController","$stateParams","$q","ConfigService","firstResultPredicate","sortPredicate","groupId","startBlocking","deferred","defer","promise","setSorting","predicate","reversedDefault","sortReversed","filteredResults","sortAndFilter","reversed","inlineFilter","titleFilter","toLowerCase","minSizeFilter","maxSizeFilter","filterByAgeAndSize","age_days","words","split","every","word","countFilteredOut","getItemIndexerDisplayState","indexerDisplayState","getCleanedTitle","createSortedHashgroups","createHashGroup","sortedHashGroup","sortBy","sortPredicateValue","grabs","indexerscore","getHashGroupFirstElementSortPredicate","chain","groupBy","getTitleGroupFirstElementsSortPredicate","filtered","reverse","lastClicked","stopBlocking","concat","countRejected","toggleIndexerDisplay","countResults","sorting","limitTo","indexerResultsInfo","groupExpanded","undefined","selectedIds","lastClickedValue","indexerStatusesExpanded","forEach","loadedResults","loaded_results","resort","toggleTitlegroupExpand","toggleIndexerStatuses","toggleDuplicatesDisplayed","originalEvent","newCheckedValue","shiftKey","filterRejectedZero","SearchHistoryService","getSearchHistoryForSearching","searchRequests","totalRequests","getSearchHistory","distinct","onlyCurrentUser","formatRequest","request","includeIdLink","includequery","describeEmptySearch","includeTitle","movietitle","tvtitle","identifier_key","identifier_value","author","getStateParamsForRepeatedSearch","stateParams","SearchHistoryController","history","pagination","current","categoriesForFiltering","getSafe","categories","label","pretty","preselectedTimeInterval","accessOptionsForFiltering","openSearch","formatQuery","formatAdditional","SearchController","CategoriesService","getNumberOrUndefined","number","isNaN","getSelectedIndexers","activatedIndexers","availableIndexers","activated","isIndexerPreselected","contains","getAvailableIndexers","safeConfig","showOnSearch","getAndSetSearchRequests","searchHistory","getAll","c","mayBeSelected","ignoreResults","getByName","getDefault","showIndexers","showIndexerSelection","firstStartThreeDaysAgo","firstStart","unix","doShowSurvey","pollShown","selection","onNo","typeAheadWait","selectedItem","autocompleteLoading","isAskById","supportsById","isById","autocompleteClass","searchCategory","searchModel","find","$viewValue","$setViewValue","searching","enableCategorySizes","getAutocomplete","val","input","startSearch","goToSearchUrl","encodeURIComponent","repeatSearch","selectAutocompleteItem","$item","startQuerySearch","autocompleteActive","seriesSelected","toggleIndexer","toggleAllIndexers","searchInputChanged","internalCaR","timer","DownloaderCategoriesService","sendNzbAddCommand","searchresultids","toJson","put","defaultCategory","openCategorySelection","service","headline","ModalInstanceCtrl","showCancel","showNo","targetScope","reason","GeneralModalService","msg","LoginController","user","login","setLoggedInByForm","IndexerStatusesController","statuses","indexerStatuses","isInPast","timestamp","Date","enable","indexerName","formatDate","dateFilter","hidePast","t","reformatDate","date","utc","local","IndexController","$rootScope","bootstrapped","isLoggedIn","setLoggedInByBasic","_maySeeStats","_maySeeAdmin","_username","loggedIn","askForPassword","logout","getUserRights","userInfos","maySeeStats","maySeeSearch","getUserName","HeaderController","$location","authConfigured","showAdmin","adminRestricted","showStats","statsRestricted","showLoginout","loginlogoutText","oldUserName","searchRestricted","bases","getElementsByTagName","baseHref","loginout","authType","window","old_username","ConfigBoxService","checkConnection","settings","reject","checkCaps","search_ids","supportedIds","searchTypes","supportedTypes","supportsAllCategories","supportedCategories","animeCategory","audiobookCategory","comicCategory","ebookCategory","magazineCategory","backend","getCategories","categoriesResponse","select","selectedCategory","invalidate","DownloadHistoryController","downloads","indexersForFiltering","successfulForFiltering","reformatDateEpoch","$cacheFactory","newConfig","successresponse","invalidateSafe","errorresponse","maySeeAdminArea","configResponse","ConfigFields","$injector","setRestartWatcher","restartWatcherFunction","restartWatcher","restartListener","field","oldValue","ipValidator","expression","$modelValue","test","regexValidator","regex","prefixViewValue","getCategoryFields","fields","templateOptions","categoryFields","placeholder","wrapper","fieldGroup","addonRight","required","parsers","arr","getFields","rootModel","main","validators","ipAddress","watcher","listener","urlBase","hideExpression","defaultModel","entryTemplateUrl","presets","getDownloaderPresets","checkAddingAllowed","presetsOnly","addNewText","fieldsFunction","getDownloaderBoxFields","allowDeleteFunction","checkBeforeClose","DownloaderCheckBeforeCloseService","check","resetFunction","resetModel","downloadLimit","loadLimitOnRandom","hitLimit","hitLimitResetTime","timeout","score","accessType","userAgent","getIndexerPresets","existingIndexers","preset","any","existingEntry","getIndexerBoxFields","IndexerCheckBeforeCloseService","auth","btnText","altLegendText","configuredIndexers","generalMinSize","parentModel","isInitial","fieldset","uniqueName","viewValue","$parent","needsConnectionTest","greaterThanZero","timeOfDay","getPlaceholder","union","nzbAddingType","nzbaccesstype","handleConnectionCheckFail","whatFailed","yesText","spinnerActive","JSON","stringify","ConfigController","ConfigModel","submit","form","$valid","$setPristine","restartRequired","$error","item2","$setTouched","err","ignoreSaveNeeded","isSavingNeeded","$dirty","goToConfigState","tabName","html","toState","toParams","fromState","fromParams","preventDefault","nzbhydraapp","module","$stateProvider","$urlRouterProvider","$locationProvider","blockUIConfig","$urlMatcherFactoryProvider","localStorageServiceProvider","loginRequired","allowed","autoBlock","strictMode","otherwise","abstract","views","header","footer","container@","$title","stats@root.stats","askAdmin","results@root.search","details","html5Mode","setPrefix","setNotify","paginationTemplateProvider","setPath","cfpLoadingBarProvider","latencyThreshold","growlProvider","globalTimeToLive","globalPosition","bind","$apply","ngEnter","factory","run","Object","keys","dereferer","escape","$provide","decorator","$delegate","exception","cause","stack","line","trim","mixin","isNullOrEmpty","string","isNull","isString","sessionInjector","$httpProvider","interceptors","_scope","_element","on","eventFocus","eventFocusId","off","ngModel","$parsers","unshift","HEADER_NAME","specificallyHandleInProgress","specificallyHandledBlock","responseError","rejection","shouldHandle","statusText","addHeaderToConfig","decorateRegularCall","decorateDataCall","copyNotOverriddenAttributes","newHttp","hasOwnProperty","arguments","head","jsonp","hashCode","s","charCodeAt","formlyConfig","formlyValidationMessages","addStringMessage","extras","errorExistsAndShouldBeVisibleExpression","formlyConfigProvider","removeChromeAutoComplete","explicitAsync","disableWarnings","onProd","setWrapper","setType","extends","generate","chars","random","uniqueId","defaultOptions","className","noRow","optionsAttr","ngOptions","valueProp","labelProp","copyFields","copy","repeatfields","addNew","repeatsection","newsection","remove","$index","formOptions","formState","clear","mapObject","_showBox","callback","$setDirty","showBox","addEntry","entriesCollection","extend","isSubmitted","allowDelete","obSubmit","deleteEntry","filters","bytes","filesize","trustAs","watch","$watchGroup"],"mappings":"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","file":"nzbhydra.js","sourcesContent":["angular\r\n    .module('nzbhydraApp')\r\n    .directive('hydraupdates', hydraupdates);\r\n\r\nfunction hydraupdates() {\r\n    controller.$inject = [\"$scope\", \"UpdateService\", \"$sce\"];\r\n    return {\r\n        templateUrl: 'static/html/directives/updates.html',\r\n        controller: controller\r\n    };\r\n\r\n    function controller($scope, UpdateService, $sce) {\r\n\r\n        $scope.loadingPromise = UpdateService.getVersions().then(function (data) {\r\n            $scope.currentVersion = data.data.currentVersion;\r\n            $scope.repVersion = data.data.repVersion;\r\n            $scope.updateAvailable = data.data.updateAvailable;\r\n            $scope.changelog = data.data.changelog;\r\n        });\r\n        \r\n        UpdateService.getVersionHistory().then(function(data) {\r\n            $scope.versionHistory = $sce.trustAsHtml(data.data.versionHistory);\r\n        });\r\n\r\n        $scope.update = function () {\r\n            UpdateService.update();\r\n        };\r\n\r\n        $scope.showChangelog = function () {\r\n            UpdateService.showChanges($scope.changelog);\r\n        };\r\n        \r\n        \r\n\r\n    }\r\n}\r\n\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .directive('titleRow', titleRow);\r\n\r\nfunction titleRow() {\r\n    return {\r\n        templateUrl: 'static/html/directives/title-row.html',\r\n        scope: {\r\n            duplicates: \"<\",\r\n            selected: \"<\",\r\n            rowIndex: \"@\"\r\n        },\r\n        controller: ['$scope', '$element', '$attrs', titleRowController]\r\n    };\r\n\r\n    function titleRowController($scope) {\r\n        $scope.expanded = false;\r\n        console.log(\"Building title row\");\r\n        $scope.duplicatesToShow = duplicatesToShow;\r\n        function duplicatesToShow() {\r\n            if ($scope.expanded && $scope.duplicates.length > 1) {\r\n                console.log(\"Showing all duplicates in group\");\r\n                return $scope.duplicates;\r\n            } else {\r\n                console.log(\"Showing first duplicate in group\");\r\n                return [$scope.duplicates[0]];\r\n            }\r\n        }\r\n\r\n    }\r\n}","angular\r\n    .module('nzbhydraApp')\r\n    .directive('titleGroup', titleGroup);\r\n\r\nfunction titleGroup() {\r\n    return {\r\n        templateUrl: 'static/html/directives/title-group.html',\r\n        scope: {\r\n            titles: \"<\",\r\n            selected: \"=\",\r\n            rowIndex: \"<\",\r\n            doShowDuplicates: \"<\",\r\n            internalRowIndex: \"@\"\r\n        },\r\n        controller: ['$scope', '$element', '$attrs', controller],\r\n        multiElement: true\r\n    };\r\n\r\n    function controller($scope, $element, $attrs) {\r\n        $scope.expanded = false;\r\n        $scope.titleGroupExpanded = false;\r\n\r\n        $scope.$on(\"toggleTitleExpansion\", function (event, args) {\r\n            $scope.titleGroupExpanded = args;\r\n            event.stopPropagation();\r\n        });\r\n\r\n\r\n        $scope.titlesToShow = titlesToShow;\r\n        function titlesToShow() {\r\n            return $scope.titles.slice(1);\r\n        }\r\n        \r\n    }\r\n}","angular\r\n    .module('nzbhydraApp')\r\n    .directive('tabOrChart', tabOrChart);\r\n\r\nfunction tabOrChart() {\r\n    return {\r\n        templateUrl: 'static/html/directives/tab-or-chart.html',\r\n        transclude:  {\r\n            \"chartSlot\": \"chart\",\r\n            \"tableSlot\": \"table\"\r\n        },\r\n        restrict: 'E',\r\n        replace: true,\r\n        scope: {\r\n            display: \"@\"\r\n        }\r\n\r\n    };\r\n\r\n}\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .directive('searchResult', searchResult);\r\n\r\nfunction searchResult() {\r\n    return {\r\n        templateUrl: 'static/html/directives/search-result.html',\r\n        require: '^titleGroup',\r\n        scope: {\r\n            titleGroup: \"<\",\r\n            showDuplicates: \"<\",\r\n            selected: \"<\",\r\n            rowIndex: \"<\"\r\n        },\r\n        controller: ['$scope', '$element', '$attrs', controller],\r\n        multiElement: true\r\n    };\r\n\r\n    function controller($scope, $element, $attrs) {\r\n        $scope.titleGroupExpanded = false;\r\n        $scope.hashGroupExpanded = {};\r\n\r\n        $scope.toggleTitleGroup = function () {\r\n            $scope.titleGroupExpanded = !$scope.titleGroupExpanded;\r\n            if (!$scope.titleGroupExpanded) {\r\n                $scope.hashGroupExpanded[$scope.titleGroup[0][0].hash] = false; //Also collapse the first title's duplicates\r\n            }\r\n        };\r\n\r\n        $scope.groupingRowDuplicatesToShow = groupingRowDuplicatesToShow;\r\n        function groupingRowDuplicatesToShow() {\r\n            if ($scope.showDuplicates &&  $scope.titleGroup[0].length > 1 && $scope.hashGroupExpanded[$scope.titleGroup[0][0].hash]) {\r\n                return $scope.titleGroup[0].slice(1);\r\n            } else {\r\n                return [];\r\n            }\r\n        }\r\n\r\n        //<div ng-repeat=\"hashGroup in titleGroup\" ng-if=\"titleGroup.length > 0 && titleGroupExpanded\"  class=\"search-results-row\">\r\n        $scope.otherTitleRowsToShow = otherTitleRowsToShow;\r\n        function otherTitleRowsToShow() {\r\n            if ($scope.titleGroup.length > 1 && $scope.titleGroupExpanded) {\r\n                return $scope.titleGroup.slice(1);\r\n            } else {\r\n                return [];\r\n            }\r\n        }\r\n        \r\n        $scope.hashGroupDuplicatesToShow = hashGroupDuplicatesToShow;\r\n        function hashGroupDuplicatesToShow(hashGroup) {\r\n            if ($scope.showDuplicates && $scope.hashGroupExpanded[hashGroup[0].hash]) {\r\n                return hashGroup.slice(1);\r\n            } else {\r\n                return [];\r\n            }\r\n        }\r\n    }\r\n}","angular\r\n    .module('nzbhydraApp')\r\n    .directive('otherColumns', otherColumns);\r\n\r\nfunction otherColumns($http, $templateCache, $compile, $window) {\r\n    controller.$inject = [\"$scope\", \"$http\", \"$uibModal\", \"growl\", \"HydraAuthService\"];\r\n    return {\r\n        scope: {\r\n            result: \"<\"\r\n        },\r\n        multiElement: true,\r\n\r\n        link: function (scope, element, attrs) {\r\n            $http.get('static/html/directives/search-result-non-title-columns.html', {cache: $templateCache}).success(function (templateContent) {\r\n                element.replaceWith($compile(templateContent)(scope));\r\n            });\r\n\r\n        },\r\n        controller: controller\r\n    };\r\n\r\n    function controller($scope, $http, $uibModal, growl, HydraAuthService) {\r\n\r\n        $scope.showDetailsDl = HydraAuthService.getUserInfos().maySeeDetailsDl;\r\n\r\n        $scope.showNfo = showNfo;\r\n        function showNfo(resultItem) {\r\n            if (resultItem.has_nfo == 0) {\r\n                return;\r\n            }\r\n            var uri = new URI(\"internalapi/getnfo\");\r\n            uri.addQuery(\"searchresultid\", resultItem.searchResultId);\r\n            return $http.get(uri.toString()).then(function (response) {\r\n                if (response.data.has_nfo) {\r\n                    $scope.openModal(\"lg\", response.data.nfo)\r\n                } else {\r\n                    if (!angular.isUndefined(resultItem.message)) {\r\n                        growl.error(resultItem.message);\r\n                    } else {\r\n                        growl.info(\"No NFO available\");\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        $scope.openModal = openModal;\r\n\r\n        function openModal(size, nfo) {\r\n            var modalInstance = $uibModal.open({\r\n                template: '<pre class=\"nfo\"><span ng-bind-html=\"nfo\"></span></pre>',\r\n                controller: NfoModalInstanceCtrl,\r\n                size: size,\r\n                resolve: {\r\n                    nfo: function () {\r\n                        return nfo;\r\n                    }\r\n                }\r\n            });\r\n\r\n            modalInstance.result.then();\r\n        }\r\n        \r\n        $scope.downloadNzb = downloadNzb;\r\n        \r\n        function downloadNzb(resultItem) {\r\n            //href = \"{{ result.link }}\"\r\n            $window.location.href = resultItem.link;\r\n        }\r\n\r\n        $scope.getNfoTooltip = function() {\r\n            if ($scope.result.has_nfo == 1) {\r\n                return \"Show NFO\"\r\n            } else if ($scope.result.has_nfo == 2) {\r\n                return \"Try to load NFO (may not be available)\";\r\n            } else {\r\n                return \"No NFO available\";\r\n            }\r\n        }\r\n    }\r\n}\r\notherColumns.$inject = [\"$http\", \"$templateCache\", \"$compile\", \"$window\"];\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .controller('NfoModalInstanceCtrl', NfoModalInstanceCtrl);\r\n\r\nfunction NfoModalInstanceCtrl($scope, $uibModalInstance, nfo) {\r\n\r\n    $scope.nfo = nfo;\r\n\r\n    $scope.ok = function () {\r\n        $uibModalInstance.close($scope.selected.item);\r\n    };\r\n\r\n    $scope.cancel = function () {\r\n        $uibModalInstance.dismiss();\r\n    };\r\n}\r\nNfoModalInstanceCtrl.$inject = [\"$scope\", \"$uibModalInstance\", \"nfo\"];","//Can be used in an ng-repeat directive to call a function when the last element was rendered\r\n//We use it to mark the end of sorting / filtering so we can stop blocking the UI\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .directive('onFinishRender', onFinishRender);\r\n\r\nfunction onFinishRender($timeout) {\r\n    function linkFunction(scope, element, attr) {\r\n        \r\n        if (scope.$last === true) {\r\n                $timeout(function () {\r\n                    scope.$evalAsync(attr.onFinishRender);\r\n                });\r\n            }\r\n    }\r\n\r\n    return {\r\n        link: linkFunction\r\n    }\r\n}\r\nonFinishRender.$inject = [\"$timeout\"];","angular\r\n    .module('nzbhydraApp')\r\n    .directive('hydralog', hydralog);\r\n\r\nfunction hydralog() {\r\n    controller.$inject = [\"$scope\", \"$http\", \"$sce\", \"$interval\", \"localStorageService\"];\r\n    return {\r\n        templateUrl: \"static/html/directives/log.html\",\r\n        controller: controller\r\n    };\r\n\r\n    function controller($scope, $http, $sce, $interval, localStorageService) {\r\n        $scope.tailInterval = null;\r\n        $scope.doUpdateLog = localStorageService.get(\"doUpdateLog\") != null ? localStorageService.get(\"doUpdateLog\") : false;\r\n        $scope.doTailLog = localStorageService.get(\"doTailLog\") != null ? localStorageService.get(\"doTailLog\") : false;\r\n\r\n\r\n        function getAndShowLog() {\r\n            return $http.get(\"internalapi/getlogs\").success(function (data) {\r\n                $scope.log = $sce.trustAsHtml(data.log);\r\n            });\r\n        }\r\n\r\n        $scope.logPromise = getAndShowLog();\r\n\r\n        $scope.scrollToBottom = function () {\r\n            document.getElementById(\"logfile\").scrollTop = 10000000;\r\n            document.getElementById(\"logfile\").scrollTop = 100001000;\r\n        };\r\n\r\n        $scope.update = function () {\r\n            getAndShowLog();\r\n            $scope.scrollToBottom();\r\n        };\r\n\r\n        function startUpdateLogInterval() {\r\n            $scope.tailInterval = $interval(function () {\r\n                getAndShowLog();\r\n                if ($scope.doTailLog) {\r\n                    $scope.scrollToBottom();\r\n                }\r\n            }, 5000);\r\n        }\r\n\r\n        $scope.toggleUpdate = function() {\r\n            if ($scope.doUpdateLog) {\r\n                startUpdateLogInterval();\r\n            } else if ($scope.tailInterval != null) {\r\n                console.log(\"Cancelling\");\r\n                $interval.cancel($scope.tailInterval);\r\n                localStorageService.set(\"doTailLog\", false);\r\n                $scope.doTailLog = false;\r\n            }\r\n            localStorageService.set(\"doUpdateLog\", $scope.doUpdateLog);\r\n        };\r\n\r\n        $scope.toggleTailLog = function () {\r\n            localStorageService.set(\"doTailLog\", $scope.doTailLog);\r\n        };\r\n\r\n        if ($scope.doUpdateLog) {\r\n          startUpdateLogInterval();\r\n        }\r\n\r\n        $scope.$on(\r\n            \"$destroy\",\r\n            function () {\r\n                if ($scope.tailInterval !== null) {\r\n                    $interval.cancel($scope.tailInterval);\r\n                }\r\n            }\r\n        );\r\n\r\n    }\r\n}\r\n\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .directive('indexerInput', indexerInput);\r\n\r\nfunction indexerInput() {\r\n    controller.$inject = [\"$scope\"];\r\n    return {\r\n        templateUrl: 'static/html/directives/indexer-input.html',\r\n        scope: {\r\n            indexer: \"=\",\r\n            model: \"=\",\r\n            onClick: \"=\"\r\n        },\r\n        replace: true,\r\n        controller: controller\r\n    };\r\n\r\n    function controller($scope) {\r\n        $scope.isFocused = false;\r\n        \r\n        $scope.onFocus = function() {\r\n            $scope.isFocused = true;\r\n        };\r\n\r\n        $scope.onBlur = function () {\r\n            $scope.isFocused = false;    \r\n        };\r\n        \r\n    }\r\n}\r\n\r\n","angular\r\n    .module('nzbhydraApp').directive('focusOn', focusOn);\r\n\r\nfunction focusOn() {\r\n    return directive;\r\n    function directive(scope, elem, attr) {\r\n        scope.$on('focusOn', function (e, name) {\r\n            if (name === attr.focusOn) {\r\n                elem[0].focus();\r\n            }\r\n        });\r\n    }\r\n}\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .directive('duplicateGroup', duplicateGroup);\r\n\r\nfunction duplicateGroup() {\r\n    titleRowController.$inject = [\"$scope\", \"localStorageService\"];\r\n    return {\r\n        templateUrl: 'static/html/directives/duplicate-group.html',\r\n        scope: {\r\n            duplicates: \"<\",\r\n            selected: \"=\",\r\n            isFirstRow: \"<\",\r\n            rowIndex: \"<\",\r\n            displayTitleToggle: \"<\",\r\n            internalRowIndex: \"@\"\r\n        },\r\n        controller: titleRowController\r\n    };\r\n\r\n    function titleRowController($scope, localStorageService) {\r\n        $scope.internalRowIndex = Number($scope.internalRowIndex);\r\n        $scope.rowIndex = Number($scope.rowIndex);\r\n        $scope.titlesExpanded = false;\r\n        $scope.duplicatesExpanded = false;\r\n        $scope.foo = {\r\n            duplicatesDisplayed: localStorageService.get(\"duplicatesDisplayed\") != null ? localStorageService.get(\"duplicatesDisplayed\") : false\r\n        };\r\n        $scope.duplicatesToShow = duplicatesToShow;\r\n        function duplicatesToShow() {\r\n            return $scope.duplicates.slice(1);\r\n        }\r\n\r\n        $scope.toggleTitleExpansion = function () {\r\n            $scope.titlesExpanded = !$scope.titlesExpanded;\r\n            $scope.$emit(\"toggleTitleExpansion\", $scope.titlesExpanded);\r\n        };\r\n\r\n        $scope.toggleDuplicateExpansion = function () {\r\n            $scope.duplicatesExpanded = !$scope.duplicatesExpanded;\r\n        };\r\n\r\n        $scope.$on(\"invertSelection\", function () {\r\n            for (var i = 0; i < $scope.duplicates.length; i++) {\r\n                if ($scope.duplicatesExpanded) {\r\n                    invertSelection($scope.selected, $scope.duplicates[i]);\r\n                } else {\r\n                    if (i > 0) {\r\n                        //Always remove duplicates that aren't displayed\r\n                        invertSelection($scope.selected, $scope.duplicates[i], true);\r\n                    } else {\r\n                        invertSelection($scope.selected, $scope.duplicates[i]);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        $scope.$on(\"duplicatesDisplayed\", function (event, args) {\r\n            $scope.foo.duplicatesDisplayed = args;\r\n        });\r\n\r\n        $scope.clickCheckbox = function (event) {\r\n            var globalCheckboxIndex = $scope.rowIndex * 1000 + $scope.internalRowIndex * 100 + Number(event.currentTarget.dataset.checkboxIndex);\r\n            console.log(globalCheckboxIndex);\r\n            $scope.$emit(\"checkboxClicked\", event, globalCheckboxIndex, event.currentTarget.checked);\r\n        };\r\n\r\n        function isBetween(num, betweena, betweenb) {\r\n            return (betweena <= num && num <= betweenb) || (betweena >= num && num >= betweenb);\r\n        }\r\n\r\n        $scope.$on(\"shiftClick\", function (event, startIndex, endIndex, newValue) {\r\n            var globalDuplicateGroupIndex = $scope.rowIndex * 1000 + $scope.internalRowIndex * 100;\r\n            if (isBetween(globalDuplicateGroupIndex, startIndex, endIndex)) {\r\n\r\n                for (var i = 0; i < $scope.duplicates.length; i++) {\r\n                    if (isBetween(globalDuplicateGroupIndex + i, startIndex, endIndex)) {\r\n                        if (i == 0 || $scope.duplicatesExpanded) {\r\n                            console.log(\"Indirectly clicked row with global index \" + (globalDuplicateGroupIndex + i) + \" setting new checkbox value to \" + newValue);\r\n                            var index = _.indexOf($scope.selected, $scope.duplicates[i]);\r\n                            if (index == -1 && newValue) {\r\n                                console.log(\"Adding to selection\");\r\n                                $scope.selected.push($scope.duplicates[i]);\r\n                            } else if (index > -1 && !newValue) {\r\n                                $scope.selected.splice(index, 1);\r\n                                console.log(\"Removing from selection\");\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        function invertSelection(a, b, dontPush) {\r\n            var index = _.indexOf(a, b);\r\n            if (index > -1) {\r\n                a.splice(index, 1);\r\n            } else {\r\n                if (!dontPush)\r\n                    a.push(b);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n}","angular\r\n    .module('nzbhydraApp')\r\n    .directive('downloadNzbzipButton', downloadNzbzipButton);\r\n\r\nfunction downloadNzbzipButton() {\r\n    controller.$inject = [\"$scope\", \"growl\", \"FileDownloadService\"];\r\n    return {\r\n        templateUrl: 'static/html/directives/download-nzbzip-button.html',\r\n        require: ['^searchResults'],\r\n        scope: {\r\n            searchResults: \"<\",\r\n            searchTitle: \"<\"\r\n        },\r\n        controller: controller\r\n    };\r\n\r\n    function controller($scope, growl, FileDownloadService) {\r\n\r\n        $scope.download = function () {\r\n            if (angular.isUndefined($scope.searchResults) || $scope.searchResults.length == 0) {\r\n                growl.info(\"You should select at least one result...\");\r\n            } else {\r\n\r\n                var values = _.map($scope.searchResults, function (value) {\r\n                    return value.searchResultId;\r\n                });\r\n                var link = \"getnzbzip?searchresultids=\" + values.join(\"|\");\r\n                var searchTitle;\r\n                if (angular.isDefined($scope.searchTitle)) {\r\n                    searchTitle = \" for \" + $scope.searchTitle;\r\n                } else {\r\n                    searchTitle = \"\";\r\n                }\r\n                var filename = \"NZBHydra NZBs\" + searchTitle + \".zip\";\r\n                FileDownloadService.downloadFile(link, filename);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .directive('downloadNzbsButton', downloadNzbsButton);\r\n\r\nfunction downloadNzbsButton() {\r\n    controller.$inject = [\"$scope\", \"NzbDownloadService\", \"growl\"];\r\n    return {\r\n        templateUrl: 'static/html/directives/download-nzbs-button.html',\r\n        require: ['^searchResults'],\r\n        scope: {\r\n            searchResults: \"<\"\r\n        },\r\n        controller: controller\r\n    };\r\n\r\n    function controller($scope, NzbDownloadService, growl) {\r\n\r\n        $scope.downloaders = NzbDownloadService.getEnabledDownloaders();\r\n\r\n        $scope.download = function (downloader) {\r\n            if (angular.isUndefined($scope.searchResults) || $scope.searchResults.length == 0) {\r\n                growl.info(\"You should select at least one result...\");\r\n            } else {\r\n\r\n                var values = _.map($scope.searchResults, function (value) {\r\n                    return value.searchResultId;\r\n                });\r\n\r\n                NzbDownloadService.download(downloader, values).then(function (response) {\r\n                    if (response.data.success) {\r\n                        growl.info(\"Successfully added \" + response.data.added + \" of \" + response.data.of + \" NZBs\");\r\n                    } else {\r\n                        growl.error(\"Error while adding NZBs\");\r\n                    }\r\n                }, function () {\r\n                    growl.error(\"Error while adding NZBs\");\r\n                });\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n}\r\n\r\n","angular\r\n    .module('nzbhydraApp').directive(\"columnFilterWrapper\", columnFilterWrapper);\r\n\r\nfunction columnFilterWrapper() {\r\n    controller.$inject = [\"$scope\"];\r\n    return {\r\n        restrict: \"E\",\r\n        templateUrl: 'static/html/dataTable/columnFilterOuter.html',\r\n        transclude: true,\r\n        controllerAs: 'columnFilterWrapperCtrl',\r\n        scope: true,\r\n        bindToController: true,\r\n        controller: controller\r\n    };\r\n\r\n    function controller($scope) {\r\n        var vm = this;\r\n\r\n        vm.open = false;\r\n        vm.isActive = false;\r\n\r\n        vm.toggle = function () {\r\n            vm.open = !vm.open;\r\n            if (vm.open) {\r\n                $scope.$broadcast(\"opened\");\r\n            }\r\n        };\r\n\r\n        $scope.$on(\"filter\", function (event, column, filterModel, isActive) {\r\n            vm.open = false;\r\n            vm.isActive = isActive;\r\n        })\r\n    }\r\n}\r\n\r\n\r\nangular\r\n    .module('nzbhydraApp').directive(\"freetextFilter\", freetextFilter);\r\n\r\nfunction freetextFilter() {\r\n    controller.$inject = [\"$scope\", \"focus\"];\r\n    return {\r\n        template: '<ng-include src=\"\\'static/html/dataTable/columnFilterFreetext.html\\'\"/>',\r\n        require: \"^columnFilterWrapper\",\r\n        controllerAs: 'innerController',\r\n        scope: {\r\n            column: \"@\"\r\n        },\r\n        controller: controller\r\n    };\r\n\r\n    function controller($scope, focus) {\r\n        $scope.data = {};\r\n\r\n        $scope.$on(\"opened\", function () {\r\n            focus(\"freetext-filter-input\");\r\n        });\r\n\r\n        $scope.onKeypress = function (keyEvent) {\r\n            if (keyEvent.which === 13) {\r\n                $scope.$emit(\"filter\", $scope.column, {filter: $scope.data.filter, filtertype: \"freetext\"}, angular.isDefined($scope.data.filter) && $scope.data.filter.length > 0);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nangular\r\n    .module('nzbhydraApp').directive(\"checkboxesFilter\", checkboxesFilter);\r\n\r\nfunction checkboxesFilter() {\r\n    controller.$inject = [\"$scope\"];\r\n    return {\r\n        template: '<ng-include src=\"\\'static/html/dataTable/columnFilterCheckboxes.html\\'\"/>',\r\n        controllerAs: 'checkboxesFilterController',\r\n        scope: {\r\n            column: \"@\",\r\n            entries: \"<\",\r\n            preselect: \"<\",\r\n            showInvert: \"<\",\r\n            isBoolean: \"<\"\r\n        },\r\n        controller: controller\r\n    };\r\n\r\n    function controller($scope) {\r\n        $scope.selected = {\r\n            entries: []\r\n        };\r\n\r\n        if ($scope.preselect) {\r\n            $scope.selected.entries = $scope.entries.slice();\r\n        }\r\n\r\n        $scope.invert = function () {\r\n            $scope.selected.entries = _.difference($scope.entries, $scope.selected.entries);\r\n        };\r\n\r\n        $scope.apply = function () {\r\n            console.log($scope.selected);\r\n            var isActive = $scope.selected.entries.length < $scope.entries.length;\r\n            $scope.$emit(\"filter\", $scope.column, {filter: _.pluck($scope.selected.entries, \"id\"), filtertype: \"checkboxes\", isBoolean: $scope.isBoolean}, isActive)\r\n        }\r\n    }\r\n}\r\n\r\nangular\r\n    .module('nzbhydraApp').directive(\"booleanFilter\", booleanFilter);\r\n\r\nfunction booleanFilter() {\r\n    controller.$inject = [\"$scope\"];\r\n    return {\r\n        template: '<ng-include src=\"\\'static/html/dataTable/columnFilterBoolean.html\\'\"/>',\r\n        controllerAs: 'booleanFilterController',\r\n        scope: {\r\n            column: \"@\",\r\n            options: \"<\",\r\n            preselect: \"@\"\r\n        },\r\n        controller: controller\r\n    };\r\n\r\n\r\n    function controller($scope) {\r\n        $scope.selected = {value: $scope.options[$scope.preselect].value};\r\n\r\n        $scope.apply = function () {\r\n            console.log($scope.selected);\r\n            $scope.$emit(\"filter\", $scope.column, {filter: $scope.selected.value, filtertype: \"boolean\"}, $scope.selected.value != $scope.options[0].value)\r\n        }\r\n    }\r\n}\r\n\r\nangular\r\n    .module('nzbhydraApp').directive(\"timeFilter\", timeFilter);\r\n\r\nfunction timeFilter() {\r\n    controller.$inject = [\"$scope\"];\r\n    return {\r\n        template: '<ng-include src=\"\\'static/html/dataTable/columnFilterTime.html\\'\"/>',\r\n        scope: {\r\n            column: \"@\",\r\n            selected: \"<\"\r\n        },\r\n        controller: controller\r\n    };\r\n\r\n    function controller($scope) {\r\n\r\n        $scope.dateOptions = {\r\n            dateDisabled: false,\r\n            formatYear: 'yy',\r\n            startingDay: 1\r\n        };\r\n\r\n\r\n        $scope.formats = ['dd-MMMM-yyyy', 'yyyy/MM/dd', 'dd.MM.yyyy', 'shortDate'];\r\n        $scope.format = $scope.formats[0];\r\n        $scope.altInputFormats = ['M!/d!/yyyy'];\r\n\r\n        $scope.openAfter = function () {\r\n            $scope.after.opened = true;\r\n        };\r\n\r\n        $scope.openBefore = function () {\r\n            $scope.before.opened = true;\r\n        };\r\n\r\n        $scope.after = {\r\n            opened: false\r\n        };\r\n\r\n        $scope.before = {\r\n            opened: false\r\n        };\r\n\r\n        $scope.apply = function () {\r\n            var isActive = $scope.selected.beforeDate || $scope.selected.afterDate;\r\n            $scope.$emit(\"filter\", $scope.column, {filter: {after: $scope.selected.afterDate, before: $scope.selected.beforeDate}, filtertype: \"time\"}, isActive)\r\n        }\r\n    }\r\n}\r\n\r\n\r\nangular\r\n    .module('nzbhydraApp').directive(\"columnSortable\", columnSortable);\r\n\r\nfunction columnSortable() {\r\n    controller.$inject = [\"$scope\"];\r\n    return {\r\n        restrict: \"E\",\r\n        templateUrl: \"static/html/dataTable/columnSortable.html\",\r\n        transclude: true,\r\n        scope: {\r\n            sortMode: \"@\", //0: no sorting, 1: asc, 2: desc\r\n            column: \"@\"\r\n        },\r\n        controller: controller\r\n    };\r\n\r\n    function controller($scope) {\r\n\r\n        if (angular.isUndefined($scope.sortMode)) {\r\n            $scope.sortMode = 0;\r\n        }\r\n\r\n        $scope.$on(\"newSortColumn\", function(event, column) {\r\n            if (column != $scope.column) {\r\n                $scope.sortMode = 0;\r\n            }\r\n        });\r\n\r\n        $scope.sort = function () {\r\n            $scope.sortMode = ($scope.sortMode + 1) % 3;\r\n            $scope.$emit(\"sort\", $scope.column, $scope.sortMode)\r\n        };\r\n\r\n    }\r\n}","angular\r\n    .module('nzbhydraApp')\r\n    .directive('connectionTest', connectionTest);\r\n\r\nfunction connectionTest() {\r\n    controller.$inject = [\"$scope\"];\r\n    return {\r\n        templateUrl: 'static/html/directives/connection-test.html',\r\n        require: ['^type', '^data'],\r\n        scope: {\r\n            type: \"=\",\r\n            id: \"=\",\r\n            data: \"=\",\r\n            downloader: \"=\"\r\n        },\r\n        controller: controller\r\n    };\r\n\r\n    function controller($scope) {\r\n        $scope.message = \"\";\r\n        console.log($scope);\r\n\r\n        var testButton = \"#button-test-connection\";\r\n        var testMessage = \"#message-test-connection\";\r\n\r\n        function showSuccess() {\r\n            angular.element(testButton).removeClass(\"btn-default\");\r\n            angular.element(testButton).removeClass(\"btn-danger\");\r\n            angular.element(testButton).addClass(\"btn-success\");\r\n        }\r\n\r\n        function showError() {\r\n            angular.element(testButton).removeClass(\"btn-default\");\r\n            angular.element(testButton).removeClass(\"btn-success\");\r\n            angular.element(testButton).addClass(\"btn-danger\");\r\n        }\r\n\r\n        $scope.testConnection = function () {\r\n            angular.element(testButton).addClass(\"glyphicon-refresh-animate\");\r\n            var myInjector = angular.injector([\"ng\"]);\r\n            var $http = myInjector.get(\"$http\");\r\n            var url;\r\n            var params;\r\n            if ($scope.type == \"downloader\") {\r\n                url = \"internalapi/test_downloader\";\r\n                params = {name: $scope.downloader, username: $scope.data.username, password: $scope.data.password};\r\n                if ($scope.downloader == \"sabnzbd\") {\r\n                    params.apikey = $scope.data.apikey;\r\n                    params.url = $scope.data.url;\r\n                } else {\r\n                    params.host = $scope.data.host;\r\n                    params.port = $scope.data.port;\r\n                    params.ssl = $scope.data.ssl;\r\n                }\r\n            } else if ($scope.data.type == \"newznab\") {\r\n                url = \"internalapi/test_newznab\";\r\n                params = {host: $scope.data.host, apikey: $scope.data.apikey};\r\n                if (angular.isDefined($scope.data.username)) {\r\n                    params[\"username\"] = $scope.data.username;\r\n                    params[\"password\"] = $scope.data.password;\r\n                }\r\n            }\r\n            $http.get(url, {params: params}).success(function (result) {\r\n                //Using ng-class and a scope variable doesn't work for some reason, is only updated at second click \r\n                if (result.result) {\r\n                    angular.element(testMessage).text(\"\");\r\n                    showSuccess();\r\n                } else {\r\n                    angular.element(testMessage).text(result.message);\r\n                    showError();\r\n                }\r\n\r\n            }).error(function () {\r\n                angular.element(testMessage).text(result.message);\r\n                showError();\r\n            }).finally(function () {\r\n                angular.element(testButton).removeClass(\"glyphicon-refresh-animate\");\r\n            })\r\n        }\r\n\r\n    }\r\n}\r\n\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .directive('cfgFormEntry', cfgFormEntry);\r\n\r\nfunction cfgFormEntry() {\r\n    return {\r\n        templateUrl: 'static/html/directives/cfg-form-entry.html',\r\n        require: [\"^title\", \"^cfg\"],\r\n        scope: {\r\n            title: \"@\",\r\n            cfg: \"=\",\r\n            help: \"@\",\r\n            type: \"@?\",\r\n            options: \"=?\"\r\n        },\r\n        controller: [\"$scope\", \"$element\", \"$attrs\", function ($scope, $element, $attrs) {\r\n            $scope.type = angular.isDefined($scope.type) ? $scope.type : 'text';\r\n            $scope.options = angular.isDefined($scope.type) ? $scope.$eval($attrs.options) : [];\r\n        }]\r\n    };\r\n}","angular\r\n    .module('nzbhydraApp')\r\n    .directive('hydrabackup', hydrabackup);\r\n\r\nfunction hydrabackup() {\r\n    controller.$inject = [\"$scope\", \"BackupService\", \"Upload\", \"FileDownloadService\", \"RequestsErrorHandler\", \"growl\", \"RestartService\"];\r\n    return {\r\n        templateUrl: 'static/html/directives/backup.html',\r\n        controller: controller\r\n    };\r\n\r\n    function controller($scope, BackupService, Upload, FileDownloadService, RequestsErrorHandler, growl, RestartService) {\r\n        $scope.refreshBackupList = function () {\r\n            BackupService.getBackupsList().then(function (backups) {\r\n                $scope.backups = backups;\r\n            });\r\n        };\r\n\r\n        $scope.refreshBackupList();\r\n\r\n        $scope.uploadActive = false;\r\n\r\n\r\n        $scope.createAndDownloadBackupFile = function() {\r\n            FileDownloadService.downloadFile(\"internalapi/getbackup\", \"nzbhydra-backup-\" + moment().format(\"YYYY-MM-DD-HH-mm\") + \".zip\");\r\n        };\r\n\r\n        $scope.uploadBackupFile = function (file, errFiles) {\r\n            RequestsErrorHandler.specificallyHandled(function () {\r\n                console.log(\"Hallo\");\r\n                $scope.file = file;\r\n                $scope.errFile = errFiles && errFiles[0];\r\n                if (file) {\r\n                    $scope.uploadActive = true;\r\n                    file.upload = Upload.upload({\r\n                        url: 'internalapi/restorebackup',\r\n                        data: {content: file}\r\n                    });\r\n\r\n                    file.upload.then(function (response) {\r\n                        $scope.uploadActive = false;\r\n                        file.result = response.data;\r\n                        RestartService.restart(\"Restore successful.\");\r\n\r\n                    }, function (response) {\r\n                        $scope.uploadActive = false;\r\n                        growl.error(response.data)\r\n                    }, function (evt) {\r\n                        file.progress = Math.min(100, parseInt(100.0 * evt.loaded / evt.total));\r\n                        file.loaded = Math.floor(evt.loaded / 1024);\r\n                        file.total = Math.floor(evt.total / 1024);\r\n                    });\r\n                }\r\n            });\r\n        };\r\n\r\n        $scope.restoreFromFile = function(filename) {\r\n            BackupService.restoreFromFile(filename).then(function() {\r\n                RestartService.restart(\"Restore successful.\");\r\n            },\r\n            function(response) {\r\n                growl.error(response.data);\r\n            })\r\n        }\r\n\r\n    }\r\n}\r\n\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .directive('addableNzbs', addableNzbs);\r\n\r\nfunction addableNzbs() {\r\n    controller.$inject = [\"$scope\", \"NzbDownloadService\"];\r\n    return {\r\n        templateUrl: 'static/html/directives/addable-nzbs.html',\r\n        require: ['^searchResultId'],\r\n        scope: {\r\n            searchResultId: \"<\",\r\n            downloadType: \"<\"\r\n        },\r\n        controller: controller\r\n    };\r\n\r\n    function controller($scope, NzbDownloadService) {\r\n        $scope.downloaders = _.filter(NzbDownloadService.getEnabledDownloaders(), function(downloader) {\r\n            if ($scope.downloadType != \"nzb\") {\r\n                return downloader.downloadType == $scope.downloadType\r\n            }\r\n            return true;\r\n        });\r\n    }\r\n}\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .directive('addableNzb', addableNzb);\r\n\r\nfunction addableNzb() {\r\n    controller.$inject = [\"$scope\", \"NzbDownloadService\", \"growl\"];\r\n    return {\r\n        templateUrl: 'static/html/directives/addable-nzb.html',\r\n        scope: {\r\n            searchResultId: \"<\",\r\n            downloader: \"<\"\r\n        },\r\n        controller: controller\r\n    };\r\n\r\n    function controller($scope, NzbDownloadService, growl) {\r\n        if ($scope.downloader.iconCssClass) {\r\n            $scope.cssClass = \"fa fa-\" + $scope.downloader.iconCssClass.replace(\"fa-\",\"\").replace(\"fa \", \"\"); \r\n        } else {\r\n            $scope.cssClass = $scope.downloader.type == \"sabnzbd\" ? \"sabnzbd\" : \"nzbget\";\r\n        }\r\n            \r\n        $scope.add = function () {\r\n            $scope.cssClass = \"nzb-spinning\";\r\n            NzbDownloadService.download($scope.downloader, [$scope.searchResultId]).then(function (response) {\r\n                if (response.data.success) {\r\n                    $scope.cssClass = $scope.downloader.type == \"sabnzbd\" ? \"sabnzbd-success\" : \"nzbget-success\";\r\n                } else {\r\n                    $scope.cssClass = $scope.downloader.type == \"sabnzbd\" ? \"sabnzbd-error\" : \"nzbget-error\";\r\n                    growl.error(\"Unable to add NZB. Make sure the downloader is running and properly configured.\");\r\n                }\r\n            }, function () {\r\n                $scope.cssClass = $scope.downloader.type == \"sabnzbd\" ? \"sabnzbd-error\" : \"nzbget-error\";\r\n                growl.error(\"An unexpected error occurred while trying to contact NZB Hydra or add the NZB.\");\r\n            })\r\n        };\r\n        \r\n        \r\n\r\n    }\r\n}\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .factory('UpdateService', UpdateService);\r\n\r\nfunction UpdateService($http, growl, blockUI, RestartService) {\r\n\r\n    var currentVersion;\r\n    var repVersion;\r\n    var updateAvailable;\r\n    var changelog;\r\n    var versionHistory;\r\n    \r\n    return {\r\n        update: update,\r\n        showChanges: showChanges,\r\n        getVersions: getVersions,\r\n        getChangelog: getChangelog,\r\n        getVersionHistory: getVersionHistory\r\n    };\r\n    \r\n    \r\n    \r\n    function getVersions() {\r\n        return $http.get(\"internalapi/get_versions\").then(function (data) {\r\n            currentVersion = data.data.currentVersion;\r\n            repVersion = data.data.repVersion;\r\n            updateAvailable = data.data.updateAvailable;\r\n            return data;\r\n        });\r\n    }\r\n\r\n    function getChangelog() {\r\n        return $http.get(\"internalapi/get_changelog\", {currentVersion: currentVersion, repVersion: repVersion}).then(function (data) {\r\n            changelog = data.data.changelog;\r\n            return data;\r\n        });\r\n    }\r\n    \r\n    function getVersionHistory() {\r\n        return $http.get(\"internalapi/get_version_history\").then(function (data) {\r\n            versionHistory = data.data.versionHistory;\r\n            return data;\r\n        });\r\n    }\r\n\r\n    function showChanges(changelog) {\r\n\r\n        var myInjector = angular.injector([\"ng\", \"ui.bootstrap\"]);\r\n        var $uibModal = myInjector.get(\"$uibModal\");\r\n        var params = {\r\n            size: \"lg\",\r\n            templateUrl: \"static/html/changelog.html\",\r\n            resolve: {\r\n                changelog: function () {\r\n                    return changelog;\r\n                }\r\n            },\r\n            controller: function ($scope, $sce, $uibModalInstance, changelog) {\r\n                //I fucking hate that untrusted HTML shit\r\n                changelog = $sce.trustAsHtml(changelog);\r\n                $scope.changelog = changelog;\r\n                console.log(changelog);\r\n                $scope.ok = function () {\r\n                    $uibModalInstance.dismiss();\r\n                };\r\n            }\r\n        };\r\n\r\n        var modalInstance = $uibModal.open(params);\r\n\r\n        modalInstance.result.then();\r\n    }\r\n    \r\n\r\n    function update() {\r\n        blockUI.start(\"Updating. Please stand by...\");\r\n        $http.get(\"internalapi/update\").then(function (data) {\r\n                if (data.data.success) {\r\n                    RestartService.restart(\"Update complete.\", 15);\r\n                } else {\r\n                    blockUI.reset();\r\n                    growl.info(\"An error occurred while updating. Please check the logs.\");\r\n                }\r\n            },\r\n            function () {\r\n                blockUI.reset();\r\n                growl.info(\"An error occurred while updating. Please check the logs.\");\r\n            });\r\n    }\r\n}\r\nUpdateService.$inject = [\"$http\", \"growl\", \"blockUI\", \"RestartService\"];\r\n\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .controller('UpdateFooterController', UpdateFooterController);\r\n\r\nfunction UpdateFooterController($scope, UpdateService, HydraAuthService) {\r\n\r\n    $scope.updateAvailable = false;\r\n    $scope.checked = false;\r\n\r\n    $scope.mayUpdate = HydraAuthService.getUserInfos().maySeeAdmin;\r\n\r\n    $scope.$on(\"user:loggedIn\", function () {\r\n        if (HydraAuthService.getUserInfos().maySeeAdmin && !$scope.checked) {\r\n            retrieveUpdateInfos();\r\n        }\r\n    });\r\n\r\n\r\n    if ($scope.mayUpdate) {\r\n        retrieveUpdateInfos();\r\n    }\r\n\r\n    function retrieveUpdateInfos() {\r\n        $scope.checked = true;\r\n        UpdateService.getVersions().then(function (data) {\r\n            $scope.currentVersion = data.data.currentVersion;\r\n            $scope.repVersion = data.data.repVersion;\r\n            $scope.updateAvailable = data.data.updateAvailable;\r\n            $scope.changelog = data.data.changelog;\r\n        });\r\n    }\r\n\r\n\r\n    $scope.update = function () {\r\n        UpdateService.update();\r\n    };\r\n\r\n    $scope.showChangelog = function () {\r\n        UpdateService.showChanges($scope.changelog);\r\n    }\r\n\r\n}\r\nUpdateFooterController.$inject = [\"$scope\", \"UpdateService\", \"HydraAuthService\"];\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .controller('SystemController', SystemController);\r\n\r\nfunction SystemController($scope, $state, activeTab, $http, growl, RestartService, ModalService, UpdateService, NzbHydraControlService) {\r\n\r\n    $scope.activeTab = activeTab;\r\n\r\n    $scope.shutdown = function () {\r\n        NzbHydraControlService.shutdown().then(function () {\r\n                growl.info(\"Shutdown initiated. Cya!\");\r\n            },\r\n            function () {\r\n                growl.info(\"Unable to send shutdown command.\");\r\n            })\r\n    };\r\n\r\n    $scope.restart = function () {\r\n        RestartService.restart();\r\n    };\r\n\r\n    $scope.deleteLogAndDatabase = function () {\r\n        ModalService.open(\"Delete log and db\", \"Are you absolutely sure you want to delete your database and log files? Hydra will restart to do that.\",  {\r\n            yes: {\r\n                onYes: function () {\r\n                    NzbHydraControlService.deleteLogAndDb();\r\n                    RestartService.countdown();\r\n                },\r\n                text: \"Yes, delete log and database\"\r\n            },\r\n            no: {\r\n                onCancel: function () {\r\n\r\n                },\r\n                text: \"Nah\"\r\n            }\r\n        });\r\n    };\r\n\r\n    $scope.forceUpdate = function() {\r\n        UpdateService.update()\r\n    };\r\n    \r\n\r\n    $scope.allTabs = [\r\n        {\r\n            active: false,\r\n            state: 'root.system.control',\r\n            name: \"Control\"\r\n        },\r\n        {\r\n            active: false,\r\n            state: 'root.system.updates',\r\n            name: \"Updates\"\r\n        },\r\n        {\r\n            active: false,\r\n            state: 'root.system.log',\r\n            name: \"Log\"\r\n        },\r\n        {\r\n            active: false,\r\n            state: 'root.system.backup',\r\n            name: \"Backup\"\r\n        },\r\n        {\r\n            active: false,\r\n            state: 'root.system.bugreport',\r\n            name: \"Bugreport\"\r\n        },\r\n        {\r\n            active: false,\r\n            state: 'root.system.about',\r\n            name: \"About\"\r\n        }\r\n    ];\r\n\r\n\r\n    $scope.goToSystemState = function (index) {\r\n        $state.go($scope.allTabs[index].state, {activeTab: index}, {inherit: false, notify: true, reload: true});\r\n    };\r\n\r\n    $scope.downloadDebuggingInfos = function() {\r\n        $http({method: 'GET', url: 'internalapi/getdebugginginfos', responseType: 'arraybuffer'}).success(function (data, status, headers, config) {\r\n            var a = document.createElement('a');\r\n            var blob = new Blob([data], {'type': \"application/octet-stream\"});\r\n            a.href = URL.createObjectURL(blob);\r\n            var filename = \"nzbhydra-debuginfo-\" + moment().format(\"YYYY-MM-DD-HH-mm\") + \".zip\";\r\n            a.download = filename;\r\n            \r\n            document.body.appendChild(a);\r\n            a.click();\r\n            document.body.removeChild(a);\r\n        }).error(function (data, status, headers, config) {\r\n            console.log(\"Error:\" + status);\r\n        });\r\n    }\r\n    \r\n}\r\nSystemController.$inject = [\"$scope\", \"$state\", \"activeTab\", \"$http\", \"growl\", \"RestartService\", \"ModalService\", \"UpdateService\", \"NzbHydraControlService\"];\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .factory('StatsService', StatsService);\r\n\r\nfunction StatsService($http) {\r\n\r\n    return {\r\n        get: getStats,\r\n        getDownloadHistory: getDownloadHistory\r\n    };\r\n\r\n    function getStats(after, before) {\r\n        return $http.get(\"internalapi/getstats\", {params: {after:after, before:before}}).success(function (response) {\r\n            return response.data;\r\n        });\r\n    }\r\n\r\n    function getDownloadHistory(pageNumber, limit, filterModel, sortModel) {\r\n        var params = {page: pageNumber, limit: limit, filterModel: filterModel};\r\n        if (angular.isUndefined(pageNumber)) {\r\n            params.page = 1;\r\n        }\r\n        if (angular.isUndefined(limit)) {\r\n            params.limit = 100;\r\n        }\r\n        if (angular.isUndefined(filterModel)) {\r\n            params.filterModel = {}\r\n        }\r\n        if (!angular.isUndefined(sortModel)) {\r\n            params.sortModel = sortModel;\r\n        }\r\n        return $http.post(\"internalapi/getnzbdownloads\", params).success(function (response) {\r\n            return {\r\n                nzbDownloads: response.nzbDownloads,\r\n                totalDownloads: response.totalDownloads\r\n            };\r\n            \r\n        });\r\n    }\r\n\r\n}\r\nStatsService.$inject = [\"$http\"];","angular\r\n    .module('nzbhydraApp')\r\n    .controller('StatsController', StatsController);\r\n\r\nfunction StatsController($scope, $filter, StatsService, blockUI) {\r\n\r\n    $scope.dateOptions = {\r\n        dateDisabled: false,\r\n        formatYear: 'yy',\r\n        startingDay: 1\r\n    };\r\n    var initializingAfter = true;\r\n    var initializingBefore = true;\r\n    $scope.afterDate = moment().subtract(30, \"days\").toDate();\r\n    $scope.beforeDate = moment().toDate();\r\n    updateStats();\r\n\r\n\r\n    $scope.openAfter = function () {\r\n        $scope.after.opened = true;\r\n    };\r\n\r\n    $scope.openBefore = function () {\r\n        $scope.before.opened = true;\r\n    };\r\n\r\n    $scope.after = {\r\n        opened: false\r\n    };\r\n\r\n    $scope.before = {\r\n        opened: false\r\n    };\r\n\r\n    function updateStats() {\r\n        blockUI.start(\"Updating stats...\");\r\n        var after = $scope.afterDate != null ? Math.floor($scope.afterDate.getTime() / 1000) : null;\r\n        var before = $scope.beforeDate != null ? Math.floor($scope.beforeDate.getTime() / 1000)  : null;\r\n        StatsService.get(after, before).then(function(stats) {\r\n            $scope.setStats(stats);\r\n        });\r\n\r\n        blockUI.reset();\r\n    }\r\n\r\n    $scope.$watch('beforeDate', function () {\r\n        if (initializingBefore) {\r\n            initializingBefore = false;\r\n        } else {\r\n            updateStats();\r\n        }\r\n    });\r\n\r\n\r\n    $scope.$watch('afterDate', function () {\r\n        if (initializingAfter) {\r\n            initializingAfter = false;\r\n        } else {\r\n            updateStats();\r\n        }\r\n    });\r\n\r\n    $scope.onKeypress = function (keyEvent) {\r\n        if (keyEvent.which === 13) {\r\n            updateStats();\r\n        }\r\n    };\r\n\r\n    $scope.formats = ['dd-MMMM-yyyy', 'yyyy/MM/dd', 'dd.MM.yyyy', 'shortDate'];\r\n    $scope.format = $scope.formats[0];\r\n    $scope.altInputFormats = ['M!/d!/yyyy'];\r\n\r\n    $scope.setStats = function (stats) {\r\n        stats = stats.data;\r\n\r\n        $scope.nzbDownloads = null;\r\n        $scope.avgResponseTimes = stats.avgResponseTimes;\r\n        $scope.avgIndexerSearchResultsShares = stats.avgIndexerSearchResultsShares;\r\n        $scope.avgIndexerAccessSuccesses = stats.avgIndexerAccessSuccesses;\r\n        $scope.indexerDownloadShares = stats.indexerDownloadShares;\r\n        $scope.downloadsPerHourOfDay = stats.timeBasedDownloadStats.perHourOfDay;\r\n        $scope.downloadsPerDayOfWeek = stats.timeBasedDownloadStats.perDayOfWeek;\r\n        $scope.searchesPerHourOfDay = stats.timeBasedSearchStats.perHourOfDay;\r\n        $scope.searchesPerDayOfWeek = stats.timeBasedSearchStats.perDayOfWeek;\r\n\r\n\r\n        var numIndexers = $scope.avgResponseTimes.length;\r\n\r\n        $scope.avgResponseTimesChart = getChart(\"multiBarHorizontalChart\", $scope.avgResponseTimes, \"name\", \"avgResponseTime\", \"\", \"Response time\");\r\n        $scope.avgResponseTimesChart.options.chart.margin.left = 100;\r\n        $scope.avgResponseTimesChart.options.chart.yAxis.rotateLabels = -30;\r\n        var avgResponseTimesChartHeight = Math.max(numIndexers * 30, 350);\r\n        $scope.avgResponseTimesChart.options.chart.height = avgResponseTimesChartHeight;\r\n\r\n        $scope.resultsSharesChart = getResultsSharesChart();\r\n\r\n        var rotation = 30;\r\n        if (numIndexers > 30) {\r\n            rotation = 70;\r\n        }\r\n        $scope.resultsSharesChart.options.chart.xAxis.rotateLabels = rotation;\r\n        $scope.resultsSharesChart.options.chart.height = avgResponseTimesChartHeight;\r\n\r\n        $scope.downloadsPerHourOfDayChart = getChart(\"discreteBarChart\", $scope.downloadsPerHourOfDay, \"hour\", \"count\", \"Hour of day\", 'Downloads');\r\n        $scope.downloadsPerHourOfDayChart.options.chart.xAxis.rotateLabels = 0;\r\n\r\n        $scope.downloadsPerDayOfWeekChart = getChart(\"discreteBarChart\", $scope.downloadsPerDayOfWeek, \"day\", \"count\", \"Day of week\", 'Downloads');\r\n        $scope.downloadsPerDayOfWeekChart.options.chart.xAxis.rotateLabels = 0;\r\n\r\n        $scope.searchesPerHourOfDayChart = getChart(\"discreteBarChart\", $scope.searchesPerHourOfDay, \"hour\", \"count\", \"Hour of day\", 'Searches');\r\n        $scope.searchesPerHourOfDayChart.options.chart.xAxis.rotateLabels = 0;\r\n\r\n        $scope.searchesPerDayOfWeekChart = getChart(\"discreteBarChart\", $scope.searchesPerDayOfWeek, \"day\", \"count\", \"Day of week\", 'Searches');\r\n        $scope.searchesPerDayOfWeekChart.options.chart.xAxis.rotateLabels = 0;\r\n\r\n        $scope.indexerDownloadSharesChart = {\r\n            options: {\r\n                chart: {\r\n                    type: 'pieChart',\r\n                    height: 500,\r\n                    x: function (d) {\r\n                        return d.name;\r\n                    },\r\n                    y: function (d) {\r\n                        return d.share;\r\n                    },\r\n                    showLabels: true,\r\n                    duration: 500,\r\n                    labelThreshold: 0.01,\r\n                    labelSunbeamLayout: true,\r\n                    tooltip: {\r\n                        valueFormatter: function (d, i) {\r\n                            return $filter('number')(d, 2) + \"%\";\r\n                        }\r\n                    },\r\n                    legend: {\r\n                        margin: {\r\n                            top: 5,\r\n                            right: 35,\r\n                            bottom: 5,\r\n                            left: 0\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            data: $scope.indexerDownloadShares\r\n        };\r\n\r\n        $scope.indexerDownloadSharesChart.options.chart.height = Math.min(Math.max(numIndexers * 40, 350), 900);\r\n    };\r\n\r\n\r\n    function getChart(chartType, values, xKey, yKey, xAxisLabel, yAxisLabel) {\r\n        return {\r\n            options: {\r\n                chart: {\r\n                    type: chartType,\r\n                    height: 350,\r\n                    margin: {\r\n                        top: 20,\r\n                        right: 20,\r\n                        bottom: 100,\r\n                        left: 50\r\n                    },\r\n                    x: function (d) {\r\n                        return d[xKey];\r\n                    },\r\n                    y: function (d) {\r\n                        return d[yKey];\r\n                    },\r\n                    showValues: true,\r\n                    valueFormat: function (d) {\r\n                        return d;\r\n                    },\r\n                    color: function () {\r\n                        return \"red\"\r\n                    },\r\n                    showControls: false,\r\n                    showLegend: false,\r\n                    duration: 100,\r\n                    xAxis: {\r\n                        axisLabel: xAxisLabel,\r\n                        tickFormat: function (d) {\r\n                            return d;\r\n                        },\r\n                        rotateLabels: 30,\r\n                        showMaxMin: false,\r\n                        color: function () {\r\n                            return \"white\"\r\n                        }\r\n                    },\r\n                    yAxis: {\r\n                        axisLabel: yAxisLabel,\r\n                        axisLabelDistance: -10,\r\n                        tickFormat: function (d) {\r\n                            return d;\r\n                        }\r\n                    },\r\n                    tooltip: {\r\n                        enabled: false\r\n                    },\r\n                    zoom: {\r\n                        enabled: true,\r\n                        scaleExtent: [1, 10],\r\n                        useFixedDomain: false,\r\n                        useNiceScale: false,\r\n                        horizontalOff: false,\r\n                        verticalOff: true,\r\n                        unzoomEventType: 'dblclick.zoom'\r\n                    }\r\n                }\r\n            }, data: [{\r\n                \"key\": \"doesntmatter\",\r\n                \"bar\": true,\r\n                \"values\": values\r\n            }]\r\n        };\r\n    }\r\n\r\n    //Was unable to use the function above for this and gave up\r\n    function getResultsSharesChart() {\r\n        return {\r\n            options: {\r\n                chart: {\r\n                    type: 'multiBarChart',\r\n                    height: 350,\r\n                    margin: {\r\n                        top: 20,\r\n                        right: 20,\r\n                        bottom: 100,\r\n                        left: 45\r\n                    },\r\n\r\n                    clipEdge: true,\r\n                    duration: 500,\r\n                    stacked: false,\r\n                    reduceXTicks: false,\r\n                    showValues: true,\r\n                    tooltip: {\r\n                        enabled: true,\r\n                        valueFormatter: function (d) {\r\n                            return d + \"%\";\r\n                        }\r\n                    },\r\n                    showControls: false,\r\n                    xAxis: {\r\n                        axisLabel: '',\r\n                        showMaxMin: false,\r\n                        rotateLabels: 30,\r\n                        axisLabelDistance: 30,\r\n                        tickFormat: function (d) {\r\n                            return d;\r\n                        }\r\n                    },\r\n                    yAxis: {\r\n                        axisLabel: 'Share (%)',\r\n                        axisLabelDistance: -20,\r\n                        tickFormat: function (d) {\r\n                            return d;\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n\r\n            data: [\r\n                {\r\n                    key: \"Results\",\r\n                    values: _.map($scope.avgIndexerSearchResultsShares, function (stats) {\r\n                        return {series: 0, y: stats.avgResultsShare, x: stats.name}\r\n                    })\r\n                },\r\n                {\r\n                    key: \"Unique results\",\r\n                    values: _.map($scope.avgIndexerSearchResultsShares, function (stats) {\r\n                        return {series: 1, y: stats.avgUniqueResults, x: stats.name}\r\n                    })\r\n                }\r\n            ]\r\n        };\r\n    }\r\n\r\n\r\n}\r\nStatsController.$inject = [\"$scope\", \"$filter\", \"StatsService\", \"blockUI\"];\r\n","//\r\nangular\r\n    .module('nzbhydraApp')\r\n    .factory('SearchService', SearchService);\r\n\r\nfunction SearchService($http) {\r\n\r\n\r\n    var lastExecutedQuery;\r\n    var lastResults;\r\n\r\n    return {\r\n        search: search,\r\n        getLastResults: getLastResults,\r\n        loadMore: loadMore\r\n    };\r\n    \r\n\r\n    function search(category, query, tmdbid, imdbid, title, tvdbid, rid, season, episode, minsize, maxsize, minage, maxage, indexers, mode) {\r\n        var uri;\r\n        if (category.indexOf(\"Movies\") > -1 || (category.indexOf(\"20\") == 0) || mode == \"movie\") {\r\n            uri = new URI(\"internalapi/moviesearch\");\r\n            if (angular.isDefined(tmdbid)) {\r\n                uri.addQuery(\"tmdbid\", tmdbid);\r\n            } else if (angular.isDefined(imdbid)) {\r\n                uri.addQuery(\"imdbid\", imdbid);\r\n            } else {\r\n                uri.addQuery(\"query\", query);\r\n            }\r\n\r\n        } else if (category.indexOf(\"TV\") > -1 || (category.indexOf(\"50\") == 0) || mode == \"tvsearch\") {\r\n            uri = new URI(\"internalapi/tvsearch\");\r\n            if (angular.isDefined(tvdbid)) {\r\n                uri.addQuery(\"tvdbid\", tvdbid);\r\n            }\r\n            if (angular.isDefined(rid)) {\r\n                uri.addQuery(\"rid\", rid);\r\n            } else {\r\n                uri.addQuery(\"query\", query);\r\n            }\r\n\r\n            if (angular.isDefined(season)) {\r\n                uri.addQuery(\"season\", season);\r\n            }\r\n            if (angular.isDefined(episode)) {\r\n                uri.addQuery(\"episode\", episode);\r\n            }\r\n        } else {\r\n            uri = new URI(\"internalapi/search\");\r\n            uri.addQuery(\"query\", query);\r\n        }\r\n        if (angular.isDefined(title)) {\r\n            uri.addQuery(\"title\", title);\r\n        }\r\n        if (_.isNumber(minsize)) {\r\n            uri.addQuery(\"minsize\", minsize);\r\n        }\r\n        if (_.isNumber(maxsize)) {\r\n            uri.addQuery(\"maxsize\", maxsize);\r\n        }\r\n        if (_.isNumber(minage)) {\r\n            uri.addQuery(\"minage\", minage);\r\n        }\r\n        if (_.isNumber(maxage)) {\r\n            uri.addQuery(\"maxage\", maxage);\r\n        }\r\n        if (!angular.isUndefined(indexers)) {\r\n            uri.addQuery(\"indexers\", decodeURIComponent(indexers));\r\n        }\r\n        \r\n\r\n        uri.addQuery(\"category\", category);\r\n        lastExecutedQuery = uri;\r\n        return $http.get(uri.toString()).then(processData);\r\n\r\n    }\r\n\r\n    function loadMore(offset, loadAll) {\r\n        lastExecutedQuery.removeQuery(\"offset\");\r\n        lastExecutedQuery.addQuery(\"offset\", offset);\r\n        lastExecutedQuery.addQuery(\"loadAll\", loadAll ? true : false);\r\n\r\n        return $http.get(lastExecutedQuery.toString()).then(processData);\r\n    }\r\n\r\n    function processData(response) {\r\n        var results = response.data.results;\r\n        var indexersearches = response.data.indexersearches;\r\n        var total = response.data.total;\r\n        var rejected = response.data.rejected;\r\n        var resultsCount = results.length;\r\n\r\n\r\n        //Sum up response times of indexers from individual api accesses\r\n        //TODO: Move this to search result controller because we need to update it every time we loaded more results\r\n        _.each(indexersearches, function (ps) {\r\n            if (ps.did_search) {\r\n                ps.averageResponseTime = _.reduce(ps.apiAccesses, function (memo, rp) {\r\n                    return memo + rp.response_time;\r\n                }, 0);\r\n                ps.averageResponseTime = ps.averageResponseTime / ps.apiAccesses.length;\r\n            }\r\n        });\r\n        \r\n        lastResults = {\"results\": results, \"indexersearches\": indexersearches, \"total\": total, \"resultsCount\": resultsCount, \"rejected\": rejected};\r\n        return lastResults;\r\n    }\r\n    \r\n    function getLastResults() {\r\n        return lastResults;\r\n    }\r\n}\r\nSearchService.$inject = [\"$http\"];","angular\r\n    .module('nzbhydraApp')\r\n    .controller('SearchResultsController', SearchResultsController);\r\n\r\nfunction sumRejected(rejected) {\r\n    return _.reduce(rejected, function (memo, entry) {\r\n        return memo + entry[1];\r\n    }, 0);\r\n}\r\n\r\n//SearchResultsController.$inject = ['blockUi'];\r\nfunction SearchResultsController($stateParams, $scope, $q, $timeout, blockUI, growl, localStorageService, SearchService, ConfigService) {\r\n\r\n    if (localStorageService.get(\"sorting\") != null) {\r\n        var sorting = localStorageService.get(\"sorting\");\r\n        $scope.sortPredicate = sorting.predicate;\r\n        $scope.sortReversed = sorting.reversed;\r\n    } else {\r\n        $scope.sortPredicate = \"epoch\";\r\n        $scope.sortReversed = true;\r\n    }\r\n    $scope.limitTo = 100;\r\n    $scope.offset = 0;\r\n    //Handle incoming data\r\n\r\n    $scope.indexersearches = _.sortBy(SearchService.getLastResults().indexersearches, function (i) {\r\n        return i.indexer.toLowerCase()\r\n    });\r\n    $scope.indexerDisplayState = []; //Stores if a indexer's results should be displayed or not\r\n    $scope.indexerResultsInfo = {}; //Stores information about the indexer's results like how many we already retrieved\r\n    $scope.groupExpanded = {};\r\n    $scope.selected = [];\r\n    if ($stateParams.title) {\r\n        $scope.searchTitle = $stateParams.title;\r\n    } else if ($stateParams.query) {\r\n        $scope.searchTitle = $stateParams.query;\r\n    } else {\r\n        $scope.searchTitle = undefined;\r\n    }\r\n\r\n    $scope.selectedIds = _.map($scope.selected, function (value) {\r\n        return value.searchResultId;\r\n    });\r\n\r\n    $scope.lastClicked = null;\r\n    $scope.lastClickedValue = null;\r\n\r\n    $scope.foo = {\r\n        indexerStatusesExpanded: localStorageService.get(\"indexerStatusesExpanded\") != null ? localStorageService.get(\"indexerStatusesExpanded\") : false,\r\n        duplicatesDisplayed: localStorageService.get(\"duplicatesDisplayed\") != null ? localStorageService.get(\"duplicatesDisplayed\") : false\r\n    };\r\n\r\n    $scope.countFilteredOut = 0;\r\n\r\n    //Initially set visibility of all found indexers to true, they're needed for initial filtering / sorting\r\n    _.forEach($scope.indexersearches, function (ps) {\r\n        $scope.indexerDisplayState[ps.indexer.toLowerCase()] = true;\r\n    });\r\n\r\n    _.forEach($scope.indexersearches, function (ps) {\r\n        $scope.indexerResultsInfo[ps.indexer.toLowerCase()] = {loadedResults: ps.loaded_results};\r\n    });\r\n\r\n    //Process results\r\n    $scope.results = SearchService.getLastResults().results;\r\n    $scope.total = SearchService.getLastResults().total;\r\n    $scope.resultsCount = SearchService.getLastResults().resultsCount;\r\n    $scope.rejected = SearchService.getLastResults().rejected;\r\n    $scope.countRejected = sumRejected($scope.rejected);\r\n    $scope.filteredResults = sortAndFilter($scope.results);\r\n\r\n    $scope.$emit(\"searchResultsShown\");\r\n    stopBlocking();\r\n\r\n    //Returns the content of the property (defined by the current sortPredicate) of the first group element \r\n    $scope.firstResultPredicate = firstResultPredicate;\r\n    function firstResultPredicate(item) {\r\n        return item[0][$scope.sortPredicate];\r\n    }\r\n\r\n    //Returns the unique group identifier which allows angular to keep track of the grouped search results even after filtering, making filtering by indexers a lot faster (albeit still somewhat slow...)  \r\n    $scope.groupId = groupId;\r\n    function groupId(item) {\r\n        return item[0][0].searchResultId;\r\n    }\r\n\r\n    //Block the UI and return after timeout. This way we make sure that the blocking is done before angular starts updating the model/view. There's probably a better way to achieve that?\r\n    function startBlocking(message) {\r\n        var deferred = $q.defer();\r\n        blockUI.start(message);\r\n        $timeout(function () {\r\n            deferred.resolve();\r\n        }, 100);\r\n        return deferred.promise;\r\n    }\r\n\r\n    //Set sorting according to the predicate. If it's the same as the old one, reverse, if not sort by the given default (so that age is descending, name ascending, etc.)\r\n    //Sorting (and filtering) are really slow (about 2 seconds for 1000 results from 5 indexers) but I haven't found any way of making it faster, apart from the tracking \r\n    $scope.setSorting = setSorting;\r\n    function setSorting(predicate, reversedDefault) {\r\n        if (predicate == $scope.sortPredicate) {\r\n            $scope.sortReversed = !$scope.sortReversed;\r\n        } else {\r\n            $scope.sortReversed = reversedDefault;\r\n        }\r\n        $scope.sortPredicate = predicate;\r\n        startBlocking(\"Sorting / filtering...\").then(function () {\r\n            $scope.filteredResults = sortAndFilter($scope.results);\r\n            blockUI.reset();\r\n            localStorageService.set(\"sorting\", {predicate: predicate, reversed: $scope.sortReversed});\r\n        });\r\n    }\r\n\r\n    $scope.inlineFilter = inlineFilter;\r\n    function inlineFilter(result) {\r\n        var ok = true;\r\n        ok = ok && $scope.titleFilter && result.title.toLowerCase().indexOf($scope.titleFilter) > -1;\r\n        ok = ok && $scope.minSizeFilter && $scope.minSizeFilter * 1024 * 1024 < result.size;\r\n        ok = ok && $scope.maxSizeFilter && $scope.maxSizeFilter * 1024 * 1024 > result.size;\r\n        return ok;\r\n    }\r\n\r\n\r\n    $scope.$on(\"searchInputChanged\", function (event, query, minage, maxage, minsize, maxsize) {\r\n        $scope.filteredResults = sortAndFilter($scope.results, query, minage, maxage, minsize, maxsize);\r\n    });\r\n\r\n    $scope.resort = function () {\r\n    };\r\n\r\n    function sortAndFilter(results, query, minage, maxage, minsize, maxsize) {\r\n        $scope.countFilteredOut = 0;\r\n\r\n        function filterByAgeAndSize(item) {\r\n            var ok = true;\r\n            ok = ok && (!_.isNumber(minsize) || item.size / 1024 / 1024 >= minsize)\r\n                && (!_.isNumber(maxsize) || item.size / 1024 / 1024 <= maxsize)\r\n                && (!_.isNumber(minage) || item.age_days >= Number(minage))\r\n                && (!_.isNumber(maxage) || item.age_days <= Number(maxage));\r\n\r\n            if (ok && query) {\r\n                var words = query.toLowerCase().split(\" \");\r\n                ok = _.every(words, function (word) {\r\n                    return item.title.toLowerCase().indexOf(word) > -1;\r\n                });\r\n            }\r\n            if (!ok) {\r\n                $scope.countFilteredOut++;\r\n            }\r\n            return ok;\r\n        }\r\n\r\n\r\n        function getItemIndexerDisplayState(item) {\r\n            return $scope.indexerDisplayState[item.indexer.toLowerCase()];\r\n        }\r\n\r\n        function getCleanedTitle(element) {\r\n            return element.title.toLowerCase().replace(/[\\s\\-\\._]/ig, \"\");\r\n        }\r\n\r\n        function createSortedHashgroups(titleGroup) {\r\n\r\n            function createHashGroup(hashGroup) {\r\n                //Sorting hash group's contents should not matter for size and age and title but might for category (we might remove this, it's probably mostly unnecessary)\r\n                var sortedHashGroup = _.sortBy(hashGroup, function (item) {\r\n                    var sortPredicateValue;\r\n                    if ($scope.sortPredicate == \"grabs\") {\r\n                        sortPredicateValue = angular.isDefined(item.grabs) ? item.grabs : 0;\r\n                    } else {\r\n                        sortPredicateValue = item[$scope.sortPredicate];\r\n                    }\r\n                    //var sortPredicateValue = item[$scope.sortPredicate];\r\n                    return $scope.sortReversed ? -sortPredicateValue : sortPredicateValue;\r\n                });\r\n                //Now sort the hash group by indexer score (inverted) so that the result with the highest indexer score is shown on top (or as the only one of a hash group if it's collapsed)\r\n                sortedHashGroup = _.sortBy(sortedHashGroup, function (item) {\r\n                    return item.indexerscore * -1;\r\n                });\r\n                return sortedHashGroup;\r\n            }\r\n\r\n            function getHashGroupFirstElementSortPredicate(hashGroup) {\r\n                if ($scope.sortPredicate == \"grabs\") {\r\n                    sortPredicateValue = angular.isDefined(hashGroup[0].grabs) ? hashGroup[0].grabs : 0;\r\n                } else {\r\n                    var sortPredicateValue = hashGroup[0][$scope.sortPredicate];\r\n                }\r\n                return $scope.sortReversed ? -sortPredicateValue : sortPredicateValue;\r\n            }\r\n\r\n            return _.chain(titleGroup).groupBy(\"hash\").map(createHashGroup).sortBy(getHashGroupFirstElementSortPredicate).value();\r\n        }\r\n\r\n        function getTitleGroupFirstElementsSortPredicate(titleGroup) {\r\n            var sortPredicateValue;\r\n            if ($scope.sortPredicate == \"title\") {\r\n                sortPredicateValue = titleGroup[0][0].title.toLowerCase();\r\n            } else if ($scope.sortPredicate == \"grabs\") {\r\n                sortPredicateValue = angular.isDefined(titleGroup[0][0].grabs) ? titleGroup[0][0].grabs : 0;\r\n            } else {\r\n                sortPredicateValue = titleGroup[0][0][$scope.sortPredicate];\r\n            }\r\n\r\n            return sortPredicateValue;\r\n        }\r\n\r\n        var filtered = _.chain(results)\r\n        //Filter by age, size and title\r\n            .filter(filterByAgeAndSize)\r\n            //Remove elements of which the indexer is currently hidden    \r\n            .filter(getItemIndexerDisplayState)\r\n            //Make groups of results with the same title    \r\n            .groupBy(getCleanedTitle)\r\n            //For every title group make subgroups of duplicates and sort the group    \r\n            .map(createSortedHashgroups)\r\n            //And then sort the title group using its first hashgroup's first item (the group itself is already sorted and so are the hash groups)    \r\n            .sortBy(getTitleGroupFirstElementsSortPredicate)\r\n            .value();\r\n        if ($scope.sortReversed) {\r\n            filtered = filtered.reverse();\r\n        }\r\n        if ($scope.countFilteredOut > 0) {\r\n            growl.info(\"Filtered \" + $scope.countFilteredOut + \" of the retrieved results\");\r\n        }\r\n\r\n        $scope.lastClicked = null;\r\n        return filtered;\r\n    }\r\n\r\n    $scope.toggleTitlegroupExpand = function toggleTitlegroupExpand(titleGroup) {\r\n        $scope.groupExpanded[titleGroup[0][0].title] = !$scope.groupExpanded[titleGroup[0][0].title];\r\n        $scope.groupExpanded[titleGroup[0][0].hash] = !$scope.groupExpanded[titleGroup[0][0].hash];\r\n    };\r\n\r\n\r\n    $scope.stopBlocking = stopBlocking;\r\n    function stopBlocking() {\r\n        blockUI.reset();\r\n    }\r\n\r\n    $scope.loadMore = loadMore;\r\n    function loadMore(loadAll) {\r\n        startBlocking(loadAll ? \"Loading all results...\" : \"Loading more results...\").then(function () {\r\n            SearchService.loadMore($scope.resultsCount, loadAll).then(function (data) {\r\n                $scope.results = $scope.results.concat(data.results);\r\n                $scope.filteredResults = sortAndFilter($scope.results);\r\n                $scope.total = data.total;\r\n                $scope.rejected = data.rejected;\r\n                $scope.countRejected = sumRejected($scope.rejected);\r\n                $scope.resultsCount += data.resultsCount;\r\n                stopBlocking();\r\n            });\r\n        });\r\n    }\r\n\r\n\r\n//Filters the results according to new visibility settings.\r\n    $scope.toggleIndexerDisplay = toggleIndexerDisplay;\r\n    function toggleIndexerDisplay(indexer) {\r\n        $scope.indexerDisplayState[indexer.toLowerCase()] = $scope.indexerDisplayState[indexer.toLowerCase()];\r\n        startBlocking(\"Filtering. Sorry...\").then(function () {\r\n            $scope.filteredResults = sortAndFilter($scope.results);\r\n        }).then(function () {\r\n            stopBlocking();\r\n        });\r\n    }\r\n\r\n    $scope.countResults = countResults;\r\n    function countResults() {\r\n        return $scope.results.length;\r\n    }\r\n\r\n    $scope.invertSelection = function invertSelection() {\r\n        $scope.$broadcast(\"invertSelection\");\r\n    };\r\n\r\n    $scope.toggleIndexerStatuses = function () {\r\n        $scope.foo.indexerStatusesExpanded = !$scope.foo.indexerStatusesExpanded;\r\n        localStorageService.set(\"indexerStatusesExpanded\", $scope.foo.indexerStatusesExpanded);\r\n    };\r\n\r\n    $scope.toggleDuplicatesDisplayed = function () {\r\n        //$scope.foo.duplicatesDisplayed = !$scope.foo.duplicatesDisplayed;\r\n        localStorageService.set(\"duplicatesDisplayed\", $scope.foo.duplicatesDisplayed);\r\n        $scope.$broadcast(\"duplicatesDisplayed\", $scope.foo.duplicatesDisplayed);\r\n    };\r\n\r\n    $scope.$on(\"checkboxClicked\", function (event, originalEvent, rowIndex, newCheckedValue) {\r\n        if (originalEvent.shiftKey && $scope.lastClicked != null) {\r\n            $scope.$broadcast(\"shiftClick\", Number($scope.lastClicked), Number(rowIndex), Number($scope.lastClickedValue));\r\n        }\r\n        $scope.lastClicked = rowIndex;\r\n        $scope.lastClickedValue = newCheckedValue;\r\n    });\r\n\r\n    $scope.filterRejectedZero = function() {\r\n        return function (entry) {\r\n            return entry[1] > 0;\r\n        }\r\n    }\r\n}\r\nSearchResultsController.$inject = [\"$stateParams\", \"$scope\", \"$q\", \"$timeout\", \"blockUI\", \"growl\", \"localStorageService\", \"SearchService\", \"ConfigService\"];\r\n\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .factory('SearchHistoryService', SearchHistoryService);\r\n\r\nfunction SearchHistoryService($filter, $http) {\r\n\r\n    return {\r\n        getSearchHistory: getSearchHistory,\r\n        getSearchHistoryForSearching: getSearchHistoryForSearching,\r\n        formatRequest: formatRequest,\r\n        getStateParamsForRepeatedSearch: getStateParamsForRepeatedSearch\r\n    };\r\n\r\n    function getSearchHistoryForSearching() {\r\n        return $http.post(\"internalapi/getsearchrequestsforsearching\").success(function (response) {\r\n            return {\r\n                searchRequests: response.searchRequests,\r\n                totalRequests: response.totalRequests\r\n            }\r\n        });\r\n    }\r\n\r\n    function getSearchHistory(pageNumber, limit, filterModel, sortModel, distinct, onlyCurrentUser) {\r\n        var params = {\r\n            page: pageNumber,\r\n            limit: limit,\r\n            filterModel: filterModel,\r\n            distinct: distinct,\r\n            onlyCurrentUser: onlyCurrentUser\r\n        };\r\n        if (angular.isUndefined(pageNumber)) {\r\n            params.page = 1;\r\n        }\r\n        if (angular.isUndefined(limit)) {\r\n            params.limit = 100;\r\n        }\r\n        if (angular.isUndefined(filterModel)) {\r\n            params.filterModel = {}\r\n        }\r\n        if (!angular.isUndefined(sortModel)) {\r\n            params.sortModel = sortModel;\r\n        }\r\n        return $http.post(\"internalapi/getsearchrequests\", params).success(function (response) {\r\n            return {\r\n                searchRequests: response.searchRequests,\r\n                totalRequests: response.totalRequests\r\n            }\r\n        });\r\n    }\r\n\r\n    function formatRequest(request, includeIdLink, includequery, describeEmptySearch, includeTitle) {\r\n        var result = [];\r\n        //ID key: ID value\r\n        //season\r\n        //episode\r\n        //author\r\n        //title\r\n        if (includequery && request.query) {\r\n            result.push(\"Query: \" + request.query);\r\n        }\r\n        if (request.title && includeTitle) {\r\n            result.push('<span class=\"history-title\">Title: </span>' + request.title);\r\n        } else if (request.movietitle && includeTitle) {\r\n            result.push('<span class=\"history-title\">Title: </span>' + request.movietitle);\r\n        } else if (request.tvtitle && includeTitle) {\r\n            result.push('<span class=\"history-title\">Title: </span>' + request.tvtitle);\r\n        } else if (request.identifier_key) {\r\n            var href;\r\n            var key;\r\n            if (request.identifier_key == \"imdbid\") {\r\n                key = \"IMDB ID\";\r\n                href = \"https://www.imdb.com/title/tt\"\r\n            } else if (request.identifier_key == \"tvdbid\") {\r\n                key = \"TVDB ID\";\r\n                href = \"https://thetvdb.com/?tab=series&id=\"\r\n            } else if (request.identifier_key == \"rid\") {\r\n                key = \"TVRage ID\";\r\n                href = \"internalapi/redirect_rid?rid=\"\r\n            } else if (request.identifier_key == \"tmdb\") {\r\n                key = \"TMDV ID\";\r\n                href = \"https://www.themoviedb.org/movie/\"\r\n            }\r\n            href = href + request.identifier_value;\r\n            href = $filter(\"dereferer\")(href);\r\n            if (includeIdLink) {\r\n                result.push('<span class=\"history-title\">' + key + ': </span><a target=\"_blank\" href=\"' + href + '\">' + request.identifier_value + \"</a>\");\r\n            } else {\r\n                result.push('<span class=\"history-title\">' + key + \": </span>\" + request.identifier_value);\r\n            }\r\n        }\r\n        if (request.season) {\r\n            result.push('<span class=\"history-title\">Season: </span>' + request.season);\r\n        }\r\n        if (request.episode) {\r\n            result.push('<span class=\"history-title\">Episode: </span>' + request.episode);\r\n        }\r\n        if (request.author) {\r\n            result.push('<span class=\"history-title\">Author: </span>' + request.author);\r\n        }\r\n        if (result.length == 0 && describeEmptySearch) {\r\n            result = ['<span class=\"history-title\">Empty search</span>'];\r\n        }\r\n\r\n        return result.join(\", \");\r\n\r\n    }\r\n\r\n    function getStateParamsForRepeatedSearch(request) {\r\n        var stateParams = {};\r\n        stateParams.mode = \"search\"\r\n        if (request.identifier_key == \"imdbid\") {\r\n            stateParams.mode = \"movie\"\r\n            stateParams.imdbid = request.identifier_value;\r\n        } else if (request.identifier_key == \"tvdbid\" || request.identifier_key == \"rid\") {\r\n            stateParams.mode = \"tvsearch\";\r\n            if (request.identifier_key == \"rid\") {\r\n                stateParams.rid = request.identifier_value;\r\n            } else {\r\n                stateParams.tvdbid = request.identifier_value;\r\n            }\r\n\r\n            if (request.season != \"\") {\r\n                stateParams.season = request.season;\r\n            }\r\n            if (request.episode != \"\") {\r\n                stateParams.episode = request.episode;\r\n            }\r\n        }\r\n        if (request.query != \"\") {\r\n            stateParams.query = request.query;\r\n        }\r\n\r\n\r\n        if (request.movietitle != null) {\r\n            stateParams.title = request.movietitle;\r\n        }\r\n        if (request.tvtitle != null) {\r\n            stateParams.title = request.tvtitle;\r\n        }\r\n\r\n        if (request.category) {\r\n            stateParams.category = request.category;\r\n        }\r\n\r\n        stateParams.category = request.category;\r\n\r\n        return stateParams;\r\n    }\r\n\r\n\r\n}\r\nSearchHistoryService.$inject = [\"$filter\", \"$http\"];","angular\r\n    .module('nzbhydraApp')\r\n    .controller('SearchHistoryController', SearchHistoryController);\r\n\r\n\r\nfunction SearchHistoryController($scope, $state, SearchHistoryService, ConfigService, history, $sce, $filter) {\r\n    $scope.limit = 100;\r\n    $scope.pagination = {\r\n        current: 1\r\n    };\r\n    $scope.sortModel = {\r\n        column: \"time\",\r\n        sortMode: 2\r\n    };\r\n    $scope.filterModel = {};\r\n\r\n    //Filter options\r\n    $scope.categoriesForFiltering = [];\r\n    _.forEach(ConfigService.getSafe().categories, function (category) {\r\n        $scope.categoriesForFiltering.push({label: category.pretty, id: category.pretty})\r\n    });\r\n    $scope.preselectedTimeInterval = {beforeDate: null, afterDate: null};\r\n    $scope.accessOptionsForFiltering = [{label: \"All\", value: \"all\"}, {label: \"API\", value: false}, {label: \"Internal\", value: true}];\r\n\r\n    //Preloaded data\r\n    $scope.searchRequests = history.data.searchRequests;\r\n    $scope.totalRequests = history.data.totalRequests;\r\n\r\n    $scope.update = function () {\r\n        SearchHistoryService.getSearchHistory($scope.pagination.current, $scope.limit, $scope.filterModel, $scope.sortModel).then(function (history) {\r\n            $scope.searchRequests = history.data.searchRequests;\r\n            $scope.totalRequests = history.data.totalRequests;\r\n        });\r\n    };\r\n\r\n    $scope.$on(\"sort\", function (event, column, sortMode) {\r\n        if (sortMode == 0) {\r\n            column = \"time\";\r\n            sortMode = 2;\r\n        }\r\n        $scope.sortModel = {\r\n            column: column,\r\n            sortMode: sortMode\r\n        };\r\n        $scope.$broadcast(\"newSortColumn\", column);\r\n        $scope.update();\r\n    });\r\n\r\n    $scope.$on(\"filter\", function (event, column, filterModel, isActive) {\r\n        if (filterModel.filter) {\r\n            $scope.filterModel[column] = filterModel;\r\n        } else {\r\n            delete $scope.filterModel[column];\r\n        }\r\n        $scope.update();\r\n    });\r\n\r\n\r\n    $scope.openSearch = function (request) {\r\n        var stateParams = {};\r\n        if (request.identifier_key == \"imdbid\") {\r\n            stateParams.imdbid = request.identifier_value;\r\n        } else if (request.identifier_key == \"tvdbid\" || request.identifier_key == \"rid\") {\r\n            if (request.identifier_key == \"rid\") {\r\n                stateParams.rid = request.identifier_value;\r\n            } else {\r\n                stateParams.tvdbid = request.identifier_value;\r\n            }\r\n\r\n            if (request.season != \"\") {\r\n                stateParams.season = request.season;\r\n            }\r\n            if (request.episode != \"\") {\r\n                stateParams.episode = request.episode;\r\n            }\r\n        }\r\n        if (request.query != \"\") {\r\n            stateParams.query = request.query;\r\n        }\r\n        if (request.type == \"tv\") {\r\n            stateParams.mode = \"tvsearch\"\r\n        } else if (request.type == \"movie\") {\r\n            stateParams.mode = \"movie\"\r\n        } else {\r\n            stateParams.mode = \"search\"\r\n        }\r\n\r\n        if (request.movietitle != null) {\r\n            stateParams.title = request.movietitle;\r\n        }\r\n        if (request.tvtitle != null) {\r\n            stateParams.title = request.tvtitle;\r\n        }\r\n\r\n        if (request.category) {\r\n            stateParams.category = request.category;\r\n        }\r\n\r\n        stateParams.category = request.category;\r\n\r\n        $state.go(\"root.search\", stateParams, {inherit: false});\r\n    };\r\n\r\n    $scope.formatQuery = function (request) {\r\n        if (request.movietitle != null) {\r\n            return request.movietitle;\r\n        }\r\n        if (request.tvtitle != null) {\r\n            return request.tvtitle;\r\n        }\r\n\r\n        if (!request.query && !request.identifier_key && !request.season && !request.episode) {\r\n            return \"Update query\";\r\n        }\r\n        return request.query;\r\n    };\r\n\r\n    $scope.formatAdditional = function (request) {\r\n        var result = [];\r\n        //ID key: ID value\r\n        //season\r\n        //episode\r\n        //author\r\n        //title\r\n        if (request.identifier_key) {\r\n            var href;\r\n            var key;\r\n            if (request.identifier_key == \"imdbid\") {\r\n                key = \"IMDB ID\";\r\n                href = \"https://www.imdb.com/title/tt\"\r\n            } else if (request.identifier_key == \"tvdbid\") {\r\n                key = \"TVDB ID\";\r\n                href = \"https://thetvdb.com/?tab=series&id=\"\r\n            } else if (request.identifier_key == \"rid\") {\r\n                key = \"TVRage ID\";\r\n                href = \"internalapi/redirect_rid?rid=\"\r\n            } else if (request.identifier_key == \"tmdb\") {\r\n                key = \"TMDV ID\";\r\n                href = \"https://www.themoviedb.org/movie/\"\r\n            }\r\n            href = href + request.identifier_value;\r\n            href = $filter(\"dereferer\")(href);\r\n            result.push(key + \": \" + '<a target=\"_blank\" href=\"' + href + '\">' + request.identifier_value + \"</a>\");\r\n        }\r\n        if (request.season) {\r\n            result.push(\"Season: \" + request.season);\r\n        }\r\n        if (request.episode) {\r\n            result.push(\"Episode: \" + request.episode);\r\n        }\r\n        if (request.author) {\r\n            result.push(\"Author: \" + request.author);\r\n        }\r\n        if (request.title) {\r\n            result.push(\"Title: \" + request.title);\r\n        }\r\n        return $sce.trustAsHtml(result.join(\", \"));\r\n    };\r\n\r\n\r\n\r\n\r\n}\r\nSearchHistoryController.$inject = [\"$scope\", \"$state\", \"SearchHistoryService\", \"ConfigService\", \"history\", \"$sce\", \"$filter\"];\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .controller('SearchController', SearchController);\r\n\r\nfunction SearchController($scope, $http, $stateParams, $state, $window, $filter, $sce, growl, SearchService, focus, ConfigService, HydraAuthService, CategoriesService, blockUI, $element, ModalService, SearchHistoryService) {\r\n\r\n    function getNumberOrUndefined(number) {\r\n        if (_.isUndefined(number) || _.isNaN(number) || number == \"\") {\r\n            return undefined;\r\n        }\r\n        number = parseInt(number);\r\n        if (_.isNumber(number)) {\r\n            return number;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    //Fill the form with the search values we got from the state params (so that their values are the same as in the current url)\r\n    $scope.mode = $stateParams.mode;\r\n    $scope.categories = _.filter(CategoriesService.getAll(), function (c) {\r\n        return c.mayBeSelected && c.ignoreResults != \"internal\" && c.ignoreResults != \"always\";\r\n    });\r\n    if (angular.isDefined($stateParams.category) && $stateParams.category) {\r\n        $scope.category = CategoriesService.getByName($stateParams.category);\r\n    } else {\r\n        $scope.category = CategoriesService.getDefault();\r\n    }\r\n    $scope.category = (_.isUndefined($stateParams.category) || $stateParams.category == \"\") ? CategoriesService.getDefault() : CategoriesService.getByName($stateParams.category);\r\n    $scope.tmdbid = $stateParams.tmdbid;\r\n    $scope.tvdbid = $stateParams.tvdbid;\r\n    $scope.imdbid = $stateParams.imdbid;\r\n    $scope.rid = $stateParams.rid;\r\n    $scope.title = $stateParams.title;\r\n    $scope.season = $stateParams.season;\r\n    $scope.episode = $stateParams.episode;\r\n    $scope.query = $stateParams.query;\r\n    $scope.minsize = getNumberOrUndefined($stateParams.minsize);\r\n    $scope.maxsize = getNumberOrUndefined($stateParams.maxsize);\r\n    $scope.minage = getNumberOrUndefined($stateParams.minage);\r\n    $scope.maxage = getNumberOrUndefined($stateParams.maxage);\r\n    if (!_.isUndefined($scope.title) && _.isUndefined($scope.query)) {\r\n        //$scope.query = $scope.title;\r\n    }\r\n    if (!angular.isUndefined($stateParams.indexers)) {\r\n        $scope.indexers = decodeURIComponent($stateParams.indexers).split(\"|\");\r\n    }\r\n\r\n    $scope.showIndexers = {};\r\n\r\n    $scope.searchHistory = [];\r\n\r\n    var safeConfig = ConfigService.getSafe();\r\n    $scope.showIndexerSelection = HydraAuthService.getUserInfos().showIndexerSelection;\r\n\r\n    //Doesn't belong here but whatever\r\n    var firstStartThreeDaysAgo = ConfigService.getSafe().firstStart < moment().subtract(3, \"days\").unix();\r\n    var doShowSurvey = (ConfigService.getSafe().pollShown == 0 && firstStartThreeDaysAgo) || ConfigService.getSafe().pollShown == 1;\r\n    if (doShowSurvey) {\r\n        var message;\r\n        if (ConfigService.getSafe().pollShown == 0) {\r\n            message = \"Dear user, I would like to ask you to answer a short query about NZB Hydra. It is absolutely anonymous and will not take more than a couple of minutes. You would help me a lot!\";\r\n        } else {\r\n            message = \"Dear user, thank you for answering my last survey. Unfortunately I'm an idiot and didn't know that SurveyMonkey would only show me the first 100 results. Please be so kind and answer the new survey :-)\";\r\n        }\r\n        ModalService.open(\"User query\",\r\n            message, {\r\n                yes: {\r\n                    onYes: function () {\r\n                        $window.open($filter(\"dereferer\")(\"https://goo.gl/forms/F3PwtEor2krBxLcR2\"), \"_blank\");\r\n                        $http.get(\"internalapi/pollshown\", {params: {selection: 1}});\r\n                        ConfigService.getSafe().pollShown = 2;\r\n                    },\r\n                    text: \"Yes, I want to help. Take me there.\"\r\n                },\r\n                cancel: {\r\n                    onCancel: function () {\r\n                        $http.get(\"internalapi/pollshown\", {params: {selection: 0}});\r\n                        ConfigService.getSafe().pollShown = 0;\r\n                    },\r\n                    text: \"Not now. Remind me.\"\r\n                },\r\n                no: {\r\n                    onNo: function () {\r\n                        $http.get(\"internalapi/pollshown\", {params: {selection: -1}});\r\n                        ConfigService.getSafe().pollShown = -1;\r\n                    },\r\n                    text: \"Nah, feck off!\"\r\n                }\r\n            });\r\n    }\r\n\r\n\r\n    $scope.typeAheadWait = 300;\r\n    $scope.selectedItem = \"\";\r\n    $scope.autocompleteLoading = false;\r\n    $scope.isAskById = $scope.category.supportsById;\r\n    $scope.isById = {value: true}; //If true the user wants to search by id so we enable autosearch. Was unable to achieve this using a simple boolean\r\n    $scope.availableIndexers = [];\r\n    $scope.autocompleteClass = \"autocompletePosterMovies\";\r\n\r\n    $scope.toggle = function (searchCategory) {\r\n        $scope.category = searchCategory;\r\n\r\n        //Show checkbox to ask if the user wants to search by ID (using autocomplete)\r\n        $scope.isAskById = $scope.category.supportsById;\r\n\r\n        focus('searchfield');\r\n\r\n        //Hacky way of triggering the autocomplete loading\r\n        var searchModel = $element.find(\"#searchfield\").controller(\"ngModel\");\r\n        if (angular.isDefined(searchModel.$viewValue)) {\r\n            searchModel.$setViewValue(searchModel.$viewValue + \" \");\r\n        }\r\n\r\n        if (safeConfig.searching.enableCategorySizes) {\r\n            var min = searchCategory.min;\r\n            var max = searchCategory.max;\r\n            if (_.isNumber(min)) {\r\n                $scope.minsize = min;\r\n            } else {\r\n                $scope.minsize = \"\";\r\n            }\r\n            if (_.isNumber(max)) {\r\n                $scope.maxsize = max;\r\n            } else {\r\n                $scope.maxsize = \"\";\r\n            }\r\n        }\r\n\r\n        $scope.availableIndexers = getAvailableIndexers();\r\n\r\n\r\n    };\r\n\r\n\r\n    // Any function returning a promise object can be used to load values asynchronously\r\n    $scope.getAutocomplete = function (val) {\r\n        $scope.autocompleteLoading = true;\r\n        //Expected model returned from API:\r\n        //label: What to show in the results\r\n        //title: Will be used for file search\r\n        //value: Will be used as extraInfo (ttid oder tvdb id)\r\n        //poster: url of poster to show\r\n\r\n        //Don't use autocomplete if checkbox is disabled\r\n        if (!$scope.isById.value) {\r\n            return {};\r\n        }\r\n\r\n        if ($scope.category.name.indexOf(\"movies\") > -1) {\r\n            return $http.get('internalapi/autocomplete?type=movie', {\r\n                params: {\r\n                    input: val\r\n                }\r\n            }).then(function (response) {\r\n                $scope.autocompleteLoading = false;\r\n                return response.data.results;\r\n            });\r\n        } else if ($scope.category.name.indexOf(\"tv\") > -1) {\r\n\r\n            return $http.get('internalapi/autocomplete?type=tv', {\r\n                params: {\r\n                    input: val\r\n                }\r\n            }).then(function (response) {\r\n                $scope.autocompleteLoading = false;\r\n                return response.data.results;\r\n            });\r\n        } else {\r\n            return {};\r\n        }\r\n    };\r\n\r\n\r\n    $scope.startSearch = function () {\r\n        blockUI.start(\"Searching...\");\r\n        var indexers = angular.isUndefined($scope.indexers) ? undefined : $scope.indexers.join(\"|\");\r\n        SearchService.search($scope.category.name, $scope.query, $scope.tmdbid, $scope.imdbid, $scope.title, $scope.tvdbid, $scope.rid, $scope.season, $scope.episode, $scope.minsize, $scope.maxsize, $scope.minage, $scope.maxage, indexers, $scope.mode).then(function () {\r\n            $state.go(\"root.search.results\", {\r\n                minsize: $scope.minsize,\r\n                maxsize: $scope.maxsize,\r\n                minage: $scope.minage,\r\n                maxage: $scope.maxage\r\n            }, {\r\n                inherit: true\r\n            });\r\n            $scope.tmdbid = undefined;\r\n            $scope.imdbid = undefined;\r\n            $scope.tvdbid = undefined;\r\n        });\r\n    };\r\n\r\n    function getSelectedIndexers() {\r\n        var activatedIndexers = _.filter($scope.availableIndexers).filter(function (indexer) {\r\n            return indexer.activated;\r\n        });\r\n        return _.pluck(activatedIndexers, \"name\").join(\"|\");\r\n    }\r\n\r\n\r\n    $scope.goToSearchUrl = function () {\r\n        var stateParams = {};\r\n        if ($scope.category.name.indexOf(\"movies\") > -1) {\r\n            stateParams.title = $scope.title;\r\n            stateParams.mode = \"movie\";\r\n        } else if ($scope.category.name.indexOf(\"tv\") > -1) {\r\n            stateParams.mode = \"tvsearch\";\r\n            stateParams.title = $scope.title;\r\n        } else if ($scope.category.name == \"ebook\") {\r\n            stateParams.mode = \"ebook\";\r\n        } else {\r\n            stateParams.mode = \"search\";\r\n        }\r\n\r\n        stateParams.tmdbid = $scope.tmdbid;\r\n        stateParams.tvdbid = $scope.tvdbid;\r\n        stateParams.title = $scope.title;\r\n        stateParams.season = $scope.season;\r\n        stateParams.episode = $scope.episode;\r\n        stateParams.query = $scope.query;\r\n        stateParams.minsize = $scope.minsize;\r\n        stateParams.maxsize = $scope.maxsize;\r\n        stateParams.minage = $scope.minage;\r\n        stateParams.maxage = $scope.maxage;\r\n        stateParams.category = $scope.category.name;\r\n        stateParams.indexers = encodeURIComponent(getSelectedIndexers());\r\n        $state.go(\"root.search\", stateParams, {inherit: false, notify: true, reload: true});\r\n    };\r\n\r\n    $scope.repeatSearch = function (request) {\r\n        $state.go(\"root.search\", SearchHistoryService.getStateParamsForRepeatedSearch(request), {inherit: false, notify: true, reload: true});\r\n    };\r\n\r\n\r\n    $scope.selectAutocompleteItem = function ($item) {\r\n        $scope.selectedItem = $item;\r\n        $scope.title = $item.title;\r\n        if ($scope.category.name.indexOf(\"movies\") > -1) {\r\n            $scope.tmdbid = $item.value;\r\n        } else if ($scope.category.name.indexOf(\"tv\") > -1) {\r\n            $scope.tvdbid = $item.value;\r\n        }\r\n        $scope.query = \"\";\r\n        $scope.goToSearchUrl();\r\n    };\r\n\r\n    $scope.startQuerySearch = function () {\r\n        if (!$scope.query) {\r\n            growl.error(\"You didn't enter a query...\");\r\n        } else {\r\n            //Reset values because they might've been set from the last search\r\n            $scope.title = undefined;\r\n            $scope.tmdbid = undefined;\r\n            $scope.tvdbid = undefined;\r\n            $scope.season = undefined;\r\n            $scope.episode = undefined;\r\n            $scope.goToSearchUrl();\r\n        }\r\n    };\r\n\r\n\r\n    $scope.autocompleteActive = function () {\r\n        return $scope.category.supportsById;\r\n    };\r\n\r\n    $scope.seriesSelected = function () {\r\n        return $scope.category.name.indexOf(\"tv\") > -1;\r\n    };\r\n\r\n    $scope.toggleIndexer = function (indexer) {\r\n        $scope.indexers[indexer] = !$scope.indexers[indexer]\r\n    };\r\n\r\n\r\n    function isIndexerPreselected(indexer) {\r\n        if (angular.isUndefined($scope.indexers)) {\r\n            return indexer.preselect;\r\n        } else {\r\n            return _.contains($scope.indexers, indexer.name);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    function getAvailableIndexers() {\r\n        return _.chain(safeConfig.indexers).filter(function (indexer) {\r\n            return indexer.enabled && indexer.showOnSearch && (angular.isUndefined(indexer.categories) || indexer.categories.length == 0 || $scope.category.name == \"all\" || indexer.categories.indexOf($scope.category.name) > -1);\r\n        }).sortBy(function (indexer) {\r\n            return indexer.name.toLowerCase();\r\n        })\r\n            .map(function (indexer) {\r\n                return {name: indexer.name, activated: isIndexerPreselected(indexer), categories: indexer.categories};\r\n            }).value();\r\n    }\r\n\r\n\r\n    $scope.toggleAllIndexers = function () {\r\n        angular.forEach($scope.availableIndexers, function (indexer) {\r\n            indexer.activated = !indexer.activated;\r\n        })\r\n    };\r\n\r\n    $scope.searchInputChanged = function () {\r\n        $scope.$broadcast(\"searchInputChanged\", $scope.query != $stateParams.query ? $scope.query : null, $scope.minage, $scope.maxage, $scope.minsize, $scope.maxsize);\r\n    };\r\n\r\n\r\n    $scope.formatRequest = function (request) {\r\n        return $sce.trustAsHtml(SearchHistoryService.formatRequest(request, false, true, true, true));\r\n    };\r\n\r\n    $scope.availableIndexers = getAvailableIndexers();\r\n\r\n\r\n    function getAndSetSearchRequests() {\r\n        SearchHistoryService.getSearchHistoryForSearching().success(function (data) {\r\n            $scope.searchHistory = data.searchRequests;\r\n        });\r\n    }\r\n\r\n    if ($scope.mode) {\r\n        $scope.startSearch();\r\n    } else {\r\n        //Getting the search history only makes sense when we're not currently searching\r\n        getAndSetSearchRequests();\r\n    }\r\n\r\n    $scope.$on(\"searchResultsShown\", function() {\r\n        getAndSetSearchRequests();\r\n    });\r\n\r\n\r\n\r\n\r\n}\r\nSearchController.$inject = [\"$scope\", \"$http\", \"$stateParams\", \"$state\", \"$window\", \"$filter\", \"$sce\", \"growl\", \"SearchService\", \"focus\", \"ConfigService\", \"HydraAuthService\", \"CategoriesService\", \"blockUI\", \"$element\", \"ModalService\", \"SearchHistoryService\"];\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .factory('RestartService', RestartService);\r\n\r\nfunction RestartService(blockUI, $timeout, $window, growl, NzbHydraControlService) {\r\n\r\n    return {\r\n        restart: restart,\r\n        countdown: countdown\r\n    };\r\n\r\n\r\n    function internalCaR(message, timer) {\r\n\r\n        if (timer >= 1) {\r\n            blockUI.start(message + \"Restarting. Will reload page in \" + timer + \" seconds...\");\r\n            $timeout(function () {\r\n                internalCaR(message, timer - 1)\r\n            }, 1000);\r\n        } else {\r\n            $timeout(function () {\r\n                blockUI.start(\"Reloading page...\");\r\n                $window.location.reload();\r\n            }, 1000);\r\n        }\r\n    }\r\n    \r\n    function countdown() {\r\n        internalCaR(\"\", 15);\r\n    }\r\n\r\n    function restart(message) {\r\n        message = angular.isDefined(message) ? message + \" \" : \"\";\r\n        NzbHydraControlService.restart().then(internalCaR(message, 15),\r\n            function () {\r\n                growl.info(\"Unable to send restart command.\");\r\n            }\r\n        )\r\n    }\r\n}\r\nRestartService.$inject = [\"blockUI\", \"$timeout\", \"$window\", \"growl\", \"NzbHydraControlService\"];\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .factory('NzbHydraControlService', NzbHydraControlService);\r\n\r\nfunction NzbHydraControlService($http) {\r\n\r\n    return {\r\n        restart: restart,\r\n        shutdown: shutdown,\r\n        deleteLogAndDb: deleteLogAndDb\r\n    };\r\n\r\n    function restart() {\r\n        return $http.get(\"internalapi/restart\");\r\n    }\r\n\r\n    function shutdown() {\r\n        return $http.get(\"internalapi/shutdown\");\r\n    }\r\n\r\n    function deleteLogAndDb() {\r\n        return $http.get(\"internalapi/deleteloganddb\");\r\n    }\r\n}\r\nNzbHydraControlService.$inject = [\"$http\"];\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .factory('NzbDownloadService', NzbDownloadService);\r\n\r\nfunction NzbDownloadService($http, ConfigService, DownloaderCategoriesService) {\r\n\r\n    var service = {\r\n        download: download,\r\n        getEnabledDownloaders: getEnabledDownloaders\r\n    };\r\n\r\n    return service;\r\n\r\n    function sendNzbAddCommand(downloader, searchresultids, category) {\r\n        var params = {downloader: downloader.name, searchresultids: angular.toJson(searchresultids)};\r\n        if (category != \"No category\") {\r\n            params[\"category\"] = category;\r\n        }\r\n        return $http.put(\"internalapi/addnzbs\", params);\r\n    }\r\n    \r\n    function download(downloader, searchresultids) {\r\n        \r\n        var category = downloader.defaultCategory;\r\n        \r\n        if ((_.isUndefined(category) || category == \"\" || category == null) && category != \"No category\") {\r\n            return DownloaderCategoriesService.openCategorySelection(downloader).then(function (category) {\r\n                return sendNzbAddCommand(downloader, searchresultids, category)\r\n            }, function (error) {\r\n                throw error;\r\n            });\r\n        } else {\r\n            return sendNzbAddCommand(downloader, searchresultids, category)\r\n        }\r\n    }\r\n    \r\n    function getEnabledDownloaders() {\r\n        return _.filter(ConfigService.getSafe().downloaders, \"enabled\");\r\n    }\r\n}\r\nNzbDownloadService.$inject = [\"$http\", \"ConfigService\", \"DownloaderCategoriesService\"];\r\n\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .factory('ModalService', ModalService);\r\n\r\nfunction ModalService($uibModal, $q) {\r\n    \r\n    return {\r\n        open: open\r\n    };\r\n    \r\n    function open(headline, message, params, size) {\r\n        //params example:\r\n        /*\r\n        var p =\r\n        {\r\n            yes: {\r\n                text: \"Yes\",    //default: Ok\r\n                onYes: function() {}\r\n            },\r\n            no: {               //default: Empty\r\n                text: \"No\",\r\n                onNo: function () {\r\n                }\r\n            },\r\n            cancel: {           \r\n                text: \"Cancel\", //default: Cancel\r\n                onCancel: function () {\r\n                }\r\n            }\r\n        };\r\n        */\r\n        var modalInstance = $uibModal.open({\r\n            templateUrl: 'static/html/modal.html',\r\n            controller: 'ModalInstanceCtrl',\r\n            size: angular.isDefined(size) ? size : \"md\",\r\n            resolve: {\r\n                headline: function () {\r\n                    return headline;\r\n                },\r\n                message: function(){ \r\n                    return message;\r\n                },\r\n                params: function() {\r\n                    return params;\r\n                }\r\n            }\r\n        });\r\n\r\n        modalInstance.result.then(function() {\r\n            \r\n        }, function() {\r\n            \r\n        });\r\n    }\r\n    \r\n}\r\nModalService.$inject = [\"$uibModal\", \"$q\"];\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .controller('ModalInstanceCtrl', ModalInstanceCtrl);\r\n\r\nfunction ModalInstanceCtrl($scope, $uibModalInstance, headline, message, params) {\r\n\r\n    $scope.message = message;\r\n    $scope.headline = headline;\r\n    $scope.params = params;\r\n    $scope.showCancel = angular.isDefined(params) && angular.isDefined(params.cancel);\r\n    $scope.showNo = angular.isDefined(params) && angular.isDefined(params.no);\r\n\r\n    if (angular.isUndefined(params) || angular.isUndefined(params.yes)) {\r\n        $scope.params = {\r\n            yes: {\r\n                text: \"Ok\"\r\n            }\r\n        }\r\n    } else if (angular.isUndefined(params.yes.text)) {\r\n        params.yes.text = \"Yes\";\r\n    }\r\n    \r\n    if (angular.isDefined(params) && angular.isDefined(params.no) && angular.isUndefined($scope.params.no.text)) {\r\n        $scope.params.no.text = \"No\";\r\n    }\r\n    \r\n    if (angular.isDefined(params) && angular.isDefined(params.cancel) && angular.isUndefined($scope.params.cancel.text)) {\r\n        $scope.params.cancel.text = \"Cancel\";\r\n    }\r\n\r\n    $scope.yes = function () {\r\n        $uibModalInstance.close();\r\n        if(angular.isDefined(params) && angular.isDefined(params.yes) && angular.isDefined($scope.params.yes.onYes)) {\r\n            $scope.params.yes.onYes();\r\n        }\r\n    };\r\n\r\n    $scope.no = function () {\r\n        $uibModalInstance.close();\r\n        if (angular.isDefined(params) && angular.isDefined(params.no) && angular.isDefined($scope.params.no.onNo)) {\r\n            $scope.params.no.onNo();\r\n        }\r\n    };\r\n\r\n    $scope.cancel = function () {\r\n        $uibModalInstance.dismiss();\r\n        if (angular.isDefined(params.cancel) && angular.isDefined($scope.params.cancel.onCancel)) {\r\n            $scope.params.cancel.onCancel();\r\n        }\r\n    };\r\n\r\n    $scope.$on(\"modal.closing\", function (targetScope, reason, c) {\r\n        if (reason == \"backdrop click\") {\r\n            $scope.cancel();\r\n        }\r\n    });\r\n}\r\nModalInstanceCtrl.$inject = [\"$scope\", \"$uibModalInstance\", \"headline\", \"message\", \"params\"];\r\n","angular\n    .module('nzbhydraApp')\n    .service('GeneralModalService', GeneralModalService);\n\nfunction GeneralModalService() {\n    \n    \n    this.open = function (msg, template, templateUrl, size, data) {\n        \n        //Prevent circular dependency\n        var myInjector = angular.injector([\"ng\", \"ui.bootstrap\"]);\n        var $uibModal = myInjector.get(\"$uibModal\");\n        var params = {};\n        \n        if(angular.isUndefined(size)) {\n            params[\"size\"] = size;\n        }\n        if (angular.isUndefined(template)) {\n            if (angular.isUndefined(templateUrl)) {\n                params[\"template\"] = '<pre>' + msg + '</pre>';\n            } else {\n                params[\"templateUrl\"] = templateUrl;\n            }\n        } else {\n            params[\"template\"] = template;\n        }\n        params[\"resolve\"] = \n        {\n            data: function () {\n                return data;\n            }\n        };\n        \n        var modalInstance = $uibModal.open(params);\n\n        modalInstance.result.then();\n\n    };\n    \n   \n}","angular\r\n    .module('nzbhydraApp')\r\n    .controller('LoginController', LoginController);\r\n\r\nfunction LoginController($scope, RequestsErrorHandler, $state, HydraAuthService, growl) {\r\n    $scope.user = {};\r\n    $scope.login = function () {\r\n        RequestsErrorHandler.specificallyHandled(function () {\r\n            HydraAuthService.login($scope.user.username, $scope.user.password).then(function () {\r\n                HydraAuthService.setLoggedInByForm();\r\n                growl.info(\"Login successful!\");\r\n                $state.go(\"root.search\");\r\n            }, function () {\r\n                growl.error(\"Login failed!\")\r\n            });\r\n        });\r\n    }\r\n}\r\nLoginController.$inject = [\"$scope\", \"RequestsErrorHandler\", \"$state\", \"HydraAuthService\", \"growl\"];\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .controller('IndexerStatusesController', IndexerStatusesController);\r\n\r\n    function IndexerStatusesController($scope, $http, statuses) {\r\n        $scope.statuses = statuses.data.indexerStatuses;\r\n        \r\n        $scope.isInPast = function (timestamp) {\r\n            return timestamp * 1000 < (new Date).getTime();\r\n        };\r\n        \r\n        $scope.enable = function(indexerName) {\r\n            $http.get(\"internalapi/enableindexer\", {params: {name: indexerName}}).then(function(response){\r\n                $scope.statuses = response.data.indexerStatuses;\r\n            });\r\n        }\r\n\r\n    }\r\n    IndexerStatusesController.$inject = [\"$scope\", \"$http\", \"statuses\"];\r\n\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .filter('formatDate', formatDate);\r\n\r\nfunction formatDate(dateFilter) {\r\n    return function(timestamp, hidePast) {\r\n        if (timestamp) {\r\n            if (timestamp * 1000 < (new Date).getTime() && hidePast) {\r\n                return \"\"; //\r\n            }\r\n            \r\n            var t = timestamp * 1000;\r\n            t = dateFilter(t, 'yyyy-MM-dd HH:mm');\r\n            return t;\r\n        } else {\r\n            return \"\";\r\n        }\r\n    }\r\n}\r\nformatDate.$inject = [\"dateFilter\"];\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .filter('reformatDate', reformatDate);\r\n\r\nfunction reformatDate() {\r\n    return function (date) {\r\n        //Date in database is saved as UTC without timezone information\r\n        return moment.utc(date, \"ddd, D MMM YYYY HH:mm:ss z\").local().format(\"YYYY-MM-DD HH:mm\");\r\n        \r\n    }\r\n}","angular\r\n    .module('nzbhydraApp')\r\n    .controller('IndexController', IndexController);\r\n\r\nfunction IndexController($scope, $http, $stateParams, $state) {\r\n    console.log(\"Index\");\r\n    $state.go(\"root.search\");\r\n}\r\nIndexController.$inject = [\"$scope\", \"$http\", \"$stateParams\", \"$state\"];\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .factory('HydraAuthService', HydraAuthService);\r\n\r\nfunction HydraAuthService($q, $rootScope, $http, bootstrapped) {\r\n\r\n    var loggedIn = bootstrapped.username;\r\n\r\n    \r\n    return {\r\n        isLoggedIn: isLoggedIn,\r\n        login: login,\r\n        askForPassword: askForPassword,\r\n        logout: logout,\r\n        setLoggedInByForm: setLoggedInByForm,\r\n        getUserRights: getUserRights,\r\n        setLoggedInByBasic: setLoggedInByBasic,\r\n        getUserName: getUserName,\r\n        getUserInfos: getUserInfos\r\n    };\r\n\r\n\r\n\r\n    function getUserInfos() {\r\n        return bootstrapped;\r\n    }\r\n\r\n    \r\n    function isLoggedIn() {\r\n        return bootstrapped.username;\r\n    }\r\n    \r\n    function setLoggedInByForm() {\r\n        $rootScope.$broadcast(\"user:loggedIn\");\r\n    }\r\n\r\n    function setLoggedInByBasic(_maySeeStats, _maySeeAdmin, _username) {\r\n    }\r\n    \r\n    function login(username, password) {\r\n        var deferred = $q.defer();\r\n        return $http.post(\"auth/login\", data = {username: username, password: password}).then(function (data) {\r\n            bootstrapped = data.data;\r\n            loggedIn = true;\r\n            $rootScope.$broadcast(\"user:loggedIn\");\r\n           deferred.resolve();\r\n        });\r\n        return deferred;\r\n    }\r\n\r\n    function askForPassword(params) {\r\n        return $http.get(\"internalapi/askforpassword\", {params: params}).then(function (data) {\r\n            bootstrapped = data.data;\r\n            return bootstrapped;\r\n        });\r\n\r\n    }\r\n    \r\n    function logout() {\r\n        var deferred = $q.defer();\r\n        return $http.post(\"auth/logout\").then(function(data) {\r\n            $rootScope.$broadcast(\"user:loggedOut\");\r\n            bootstrapped = data.data;\r\n            loggedIn = false;\r\n            deferred.resolve();\r\n        });\r\n        return deferred;\r\n    }\r\n    \r\n    function getUserRights() {\r\n        var userInfos = getUserInfos();\r\n        return {maySeeStats: userInfos.maySeeStats, maySeeAdmin: userInfos.maySeeAdmin, maySeeSearch: userInfos.maySeeSearch};\r\n    }\r\n    \r\n    function getUserName() {\r\n        return bootstrapped.username;\r\n    }\r\n\r\n\r\n    \r\n    \r\n    \r\n   \r\n}\r\nHydraAuthService.$inject = [\"$q\", \"$rootScope\", \"$http\", \"bootstrapped\"];","angular\r\n    .module('nzbhydraApp')\r\n    .controller('HeaderController', HeaderController);\r\n\r\nfunction HeaderController($scope, $state, growl, HydraAuthService, $location) {\r\n\r\n\r\n    $scope.showLoginout = false;\r\n    $scope.oldUserName = null;\r\n\r\n    function update() {\r\n\r\n        $scope.userInfos = HydraAuthService.getUserInfos();\r\n        if (!$scope.userInfos.authConfigured) {\r\n            $scope.showAdmin = true;\r\n            $scope.showStats = true;\r\n            $scope.showLoginout = false;\r\n        } else {\r\n            if ($scope.userInfos.username) {\r\n                $scope.showAdmin = $scope.userInfos.maySeeAdmin || !$scope.userInfos.adminRestricted;\r\n                $scope.showStats = $scope.userInfos.maySeeStats || !$scope.userInfos.statsRestricted;\r\n                $scope.showLoginout = true;\r\n                $scope.username = $scope.userInfos.username;\r\n                $scope.loginlogoutText = \"Logout \" + $scope.username;\r\n                $scope.oldUserName = $scope.username;\r\n            } else {\r\n                $scope.showAdmin = !$scope.userInfos.adminRestricted;\r\n                $scope.showStats = !$scope.userInfos.statsRestricted;\r\n                $scope.loginlogoutText = \"Login\";\r\n                $scope.showLoginout = $scope.userInfos.adminRestricted || $scope.userInfos.statsRestricted || $scope.userInfos.searchRestricted;\r\n                $scope.username = \"\";\r\n            }\r\n        }\r\n    }\r\n\r\n    update();\r\n\r\n\r\n    $scope.$on(\"user:loggedIn\", function (event, data) {\r\n        update();\r\n    });\r\n\r\n    $scope.$on(\"user:loggedOut\", function (event, data) {\r\n        update();\r\n    });\r\n\r\n    var bases = document.getElementsByTagName('base');\r\n    var baseHref = null;\r\n\r\n    if (bases.length > 0) {\r\n        baseHref = bases[0].href;\r\n    }\r\n\r\n    $scope.loginout = function () {\r\n        if (HydraAuthService.isLoggedIn()) {\r\n            HydraAuthService.logout().then(function () {\r\n                if ($scope.userInfos.authType === \"basic\") {\r\n                    growl.info(\"Logged out. Close your browser to make sure session is closed.\");\r\n                }\r\n                else if ($scope.userInfos.authType === \"form\") {\r\n                    growl.info(\"Logged out\");\r\n                    window.location.href = baseHref;\r\n                }\r\n                update();\r\n                //$state.go(\"root.search\", null, {reload: true});\r\n            });\r\n\r\n        } else {\r\n            if ($scope.userInfos.authType === \"basic\") {\r\n                var params = {};\r\n                if ($scope.oldUserName) {\r\n                    params = {\r\n                        old_username: $scope.oldUserName\r\n                    }\r\n                }\r\n                HydraAuthService.askForPassword(params).then(function () {\r\n                    growl.info(\"Login successful!\");\r\n                    update();\r\n                    $scope.oldUserName = null;\r\n                    $state.go(\"root.search\");\r\n                })\r\n            } else if ($scope.userInfos.authType === \"form\") {\r\n                window.location.href = baseHref + \"login\";\r\n            } else {\r\n                growl.info(\"You shouldn't need to login but here you go!\");\r\n            }\r\n        }\r\n    }\r\n}\r\nHeaderController.$inject = [\"$scope\", \"$state\", \"growl\", \"HydraAuthService\", \"$location\"];\r\n","hashCode = function (s) {\r\n    return s.split(\"\").reduce(function (a, b) {\r\n        a = ((a << 5) - a) + b.charCodeAt(0);\r\n        return a & a\r\n    }, 0);\r\n};\r\n\r\nangular\r\n    .module('nzbhydraApp').run([\"formlyConfig\", \"formlyValidationMessages\", function (formlyConfig, formlyValidationMessages) {\r\n    formlyValidationMessages.addStringMessage('required', 'This field is required');\r\n    formlyConfig.extras.errorExistsAndShouldBeVisibleExpression = 'fc.$touched || form.$submitted';\r\n\r\n}]);\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .config([\"formlyConfigProvider\", function config(formlyConfigProvider) {\r\n        formlyConfigProvider.extras.removeChromeAutoComplete = true;\r\n        formlyConfigProvider.extras.explicitAsync = true;\r\n        formlyConfigProvider.disableWarnings = window.onProd;\r\n\r\n\r\n        formlyConfigProvider.setWrapper({\r\n            name: 'settingWrapper',\r\n            templateUrl: 'setting-wrapper.html'\r\n        });\r\n\r\n\r\n        formlyConfigProvider.setWrapper({\r\n            name: 'fieldset',\r\n            template: [\r\n                '<fieldset>',\r\n                '<legend>{{options.templateOptions.label}}</legend>',\r\n                '<formly-transclude></formly-transclude>',\r\n                '</fieldset>'\r\n            ].join(' ')\r\n        });\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'help',\r\n            template: [\r\n                '<div class=\"panel panel-default\">',\r\n                '<div class=\"panel-body\">',\r\n                '<div ng-repeat=\"line in options.templateOptions.lines\">{{ line }}</div>',\r\n                '</div>',\r\n                '</div>'\r\n            ].join(' ')\r\n        });\r\n\r\n\r\n        formlyConfigProvider.setWrapper({\r\n            name: 'logicalGroup',\r\n            template: [\r\n                '<formly-transclude></formly-transclude>'\r\n            ].join(' ')\r\n        });\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'horizontalInput',\r\n            extends: 'input',\r\n            wrapper: ['settingWrapper', 'bootstrapHasError']\r\n        });\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'timeOfDay',\r\n            extends: 'horizontalInput',\r\n            controller: ['$scope', function ($scope) {\r\n                $scope.model[$scope.options.key] = moment.utc($scope.model[$scope.options.key]).toDate();\r\n            }]\r\n        });\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'percentInput',\r\n            template: [\r\n                '<input type=\"number\" class=\"form-control\" placeholder=\"Percent\" ng-model=\"model[options.key]\" ng-pattern=\"/^[0-9]+(\\.[0-9]{1,2})?$/\" step=\"0.01\" required />'\r\n            ].join(' ')\r\n        });\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'apiKeyInput',\r\n            template: [\r\n                '<div class=\"input-group\">',\r\n                '<input type=\"text\" class=\"form-control\" ng-model=\"model[options.key]\"/>',\r\n                '<span class=\"input-group-btn input-group-btn2\">',\r\n                '<button class=\"btn btn-default\" type=\"button\" ng-click=\"generate()\"><span class=\"glyphicon glyphicon-refresh\"></span></button>',\r\n                '</div>'\r\n            ].join(' '),\r\n            controller: function ($scope) {\r\n                $scope.generate = function () {\r\n                    var result = \"\";\r\n                    var length = 24;\r\n                    var chars = \"0123456789abcdefghijklmnopqrstuvwxyz\";\r\n                    for (var i = length; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)];\r\n                    $scope.model[$scope.options.key] = result;\r\n                }\r\n            }\r\n        });\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'testConnection',\r\n            templateUrl: 'button-test-connection.html'\r\n        });\r\n\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'horizontalTestConnection',\r\n            extends: 'testConnection',\r\n            wrapper: ['settingWrapper', 'bootstrapHasError']\r\n        });\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'checkCaps',\r\n            templateUrl: 'button-check-caps.html',\r\n            controller: function ($scope, ConfigBoxService, ModalService) {\r\n                $scope.message = \"\";\r\n                $scope.uniqueId = hashCode($scope.model.name) + hashCode($scope.model.host);\r\n\r\n                var testButton = \"#button-check-caps-\" + $scope.uniqueId;\r\n                var testMessage = \"#message-check-caps-\" + $scope.uniqueId;\r\n\r\n                function showSuccess() {\r\n                    angular.element(testButton).removeClass(\"btn-default\");\r\n                    angular.element(testButton).removeClass(\"btn-danger\");\r\n                    angular.element(testButton).addClass(\"btn-success\");\r\n                }\r\n\r\n                function showError() {\r\n                    angular.element(testButton).removeClass(\"btn-default\");\r\n                    angular.element(testButton).removeClass(\"btn-success\");\r\n                    angular.element(testButton).addClass(\"btn-danger\");\r\n                }\r\n\r\n                $scope.checkCaps = function () {\r\n                    angular.element(testButton).addClass(\"glyphicon-refresh-animate\");\r\n\r\n                    var url = \"internalapi/test_caps\";\r\n                    var params = {indexer: $scope.model.name, apikey: $scope.model.apikey, host: $scope.model.host};\r\n                    if (angular.isDefined($scope.model.username)) {\r\n                        params[\"username\"] = $scope.model.username;\r\n                        params[\"password\"] = $scope.model.password;\r\n                    }\r\n                    ConfigBoxService.checkCaps(url, params, $scope.model).then(function (data, model) {\r\n                        angular.element(testMessage).text(\"Supports: \" + data.supportedIds + \",\" ? data.supportedIds && data.supportedTypes : \"\" + data.supportedTypes);\r\n                        showSuccess();\r\n                    }, function (message) {\r\n                        angular.element(testMessage).text(message);\r\n                        showError();\r\n                        ModalService.open(\"Error testing capabilities\", 'The capabilities of the indexer could not be checked. You can set the IDs manually. Refer to the <a href=\"https://github.com/theotherp/nzbhydra/wiki/Supported-Search-Types-And-Indexer-Hosts\" target=\"_blank\">Wiki</a> for the IDs supported by some indexers.<br><br>You may repeat the check at any time to try again.');\r\n                    }).finally(function () {\r\n                        angular.element(testButton).removeClass(\"glyphicon-refresh-animate\");\r\n                    });\r\n                }\r\n            }\r\n        });\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'horizontalCheckCaps',\r\n            extends: 'checkCaps',\r\n            wrapper: ['settingWrapper', 'bootstrapHasError']\r\n        });\r\n\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'horizontalApiKeyInput',\r\n            extends: 'apiKeyInput',\r\n            wrapper: ['settingWrapper', 'bootstrapHasError']\r\n        });\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'horizontalPercentInput',\r\n            extends: 'percentInput',\r\n            wrapper: ['settingWrapper', 'bootstrapHasError']\r\n        });\r\n\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'switch',\r\n            template: \r\n                '<div style=\"text-align:left\"><input bs-switch type=\"checkbox\" ng-model=\"model[options.key]\"/></div>'\r\n        });\r\n\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'duoSetting',\r\n            extends: 'input',\r\n            defaultOptions: {\r\n                className: 'col-md-9',\r\n                templateOptions: {\r\n                    type: 'number',\r\n                    noRow: true,\r\n                    label: ''\r\n                }\r\n            }\r\n        });\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'horizontalSwitch',\r\n            extends: 'switch',\r\n            wrapper: ['settingWrapper', 'bootstrapHasError']\r\n        });\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'horizontalSelect',\r\n            extends: 'select',\r\n            wrapper: ['settingWrapper', 'bootstrapHasError']\r\n        });\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'horizontalMultiselect',\r\n            defaultOptions: {\r\n                templateOptions: {\r\n                    optionsAttr: 'bs-options',\r\n                    ngOptions: 'option[to.valueProp] as option in to.options | filter: $select.search',\r\n                    valueProp: 'id',\r\n                    labelProp: 'label',\r\n                    getPlaceholder: function() {return \"\";}\r\n                }\r\n            },\r\n            templateUrl: 'ui-select-multiple.html',\r\n            wrapper: ['settingWrapper', 'bootstrapHasError']\r\n        });\r\n\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'label',\r\n            template: '<label class=\"control-label\">{{to.label}}</label>'\r\n        });\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'duolabel',\r\n            extends: 'label',\r\n            defaultOptions: {\r\n                className: 'col-md-2',\r\n                templateOptions: {\r\n                    label: '-'\r\n                }\r\n            }\r\n        });\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'repeatSection',\r\n            templateUrl: 'repeatSection.html',\r\n            controller: function ($scope) {\r\n                $scope.formOptions = {formState: $scope.formState};\r\n                $scope.addNew = addNew;\r\n                $scope.remove = remove;\r\n                $scope.copyFields = copyFields;\r\n\r\n                function copyFields(fields) {\r\n                    fields = angular.copy(fields);\r\n                    $scope.repeatfields = fields;\r\n                    return fields;\r\n                }\r\n\r\n                $scope.clear = function (field) {\r\n                    return _.mapObject(field, function (key, val) {\r\n                        if (typeof val === 'object') {\r\n                            return $scope.clear(val);\r\n                        }\r\n                        return undefined;\r\n\r\n                    });\r\n                };\r\n\r\n\r\n                function addNew() {\r\n                    $scope.model[$scope.options.key] = $scope.model[$scope.options.key] || [];\r\n                    var repeatsection = $scope.model[$scope.options.key];\r\n                    var newsection = angular.copy($scope.options.templateOptions.defaultModel);\r\n                    repeatsection.push(newsection);\r\n                }\r\n\r\n                function remove($index) {\r\n                    $scope.model[$scope.options.key].splice($index, 1);\r\n                }\r\n            }\r\n        });\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'arrayConfig',\r\n            templateUrl: 'arrayConfig.html',\r\n            controller: function ($scope, $uibModal, growl) {\r\n                $scope.formOptions = {formState: $scope.formState};\r\n                $scope._showBox = _showBox;\r\n                $scope.showBox = showBox;\r\n                $scope.isInitial = false;\r\n\r\n                $scope.presets = $scope.options.data.presets($scope.model);\r\n\r\n\r\n                function _showBox(model, parentModel, isInitial, callback) {\r\n                    var modalInstance = $uibModal.open({\r\n                        templateUrl: 'configBox.html',\r\n                        controller: 'ConfigBoxInstanceController',\r\n                        size: 'lg',\r\n                        resolve: {\r\n                            model: function () {\r\n                                return model;\r\n                            },\r\n                            fields: function () {\r\n                                return $scope.options.data.fieldsFunction(model, parentModel, isInitial, angular.injector());\r\n                            },\r\n                            isInitial: function () {\r\n                                return isInitial\r\n                            },\r\n                            parentModel: function () {\r\n                                return parentModel;\r\n                            },\r\n                            data: function () {\r\n                                return $scope.options.data;\r\n                            }\r\n                        }\r\n                    });\r\n\r\n\r\n                    modalInstance.result.then(function () {\r\n                        $scope.form.$setDirty(true);\r\n                        if (angular.isDefined(callback)) {\r\n                            callback(true);\r\n                        }\r\n                    }, function () {\r\n                        if (angular.isDefined(callback)) {\r\n                            callback(false);\r\n                        }\r\n                    });\r\n                }\r\n\r\n                function showBox(model, parentModel) {\r\n                    $scope._showBox(model, parentModel, false)\r\n                }\r\n\r\n                $scope.addEntry = function (entriesCollection, preset) {\r\n                    if ($scope.options.data.checkAddingAllowed(entriesCollection, preset)) {\r\n                        var model = angular.copy($scope.options.data.defaultModel);\r\n                        if (angular.isDefined(preset)) {\r\n                            _.extend(model, preset);\r\n                        }\r\n\r\n                        $scope.isInitial = true;\r\n\r\n                        $scope._showBox(model, entriesCollection, true, function (isSubmitted) {\r\n                            if (isSubmitted) {\r\n                                entriesCollection.push(model);\r\n                            }\r\n                        });\r\n                    } else {\r\n                        growl.error(\"That predefined indexer is already configured.\"); //For now this is the only case where adding is forbidden so we use this hardcoded message \"for now\"... (;-))\r\n                    }\r\n\r\n                };\r\n\r\n            }\r\n\r\n        });\r\n\r\n    }]);\r\n\r\n\r\nangular.module('nzbhydraApp').controller('ConfigBoxInstanceController', [\"$scope\", \"$q\", \"$uibModalInstance\", \"$http\", \"model\", \"fields\", \"isInitial\", \"parentModel\", \"data\", \"growl\", function ($scope, $q, $uibModalInstance, $http, model, fields, isInitial, parentModel, data, growl) {\r\n\r\n    $scope.model = model;\r\n    $scope.fields = fields;\r\n    $scope.isInitial = isInitial;\r\n    $scope.allowDelete = data.allowDeleteFunction(model);\r\n    $scope.spinnerActive = false;\r\n    $scope.needsConnectionTest = false;\r\n    \r\n    $scope.obSubmit = function () {\r\n        console.log($scope);\r\n        if ($scope.form.$valid) {\r\n            \r\n            var a = data.checkBeforeClose($scope, model).then(function() {\r\n                $uibModalInstance.close($scope);\r\n            });\r\n        } else {\r\n            growl.error(\"Config invalid. Please check your settings.\");\r\n            angular.forEach($scope.form.$error, function (error) {\r\n                angular.forEach(error, function (field) {\r\n                    field.$setTouched();\r\n                });\r\n            });\r\n        }\r\n    };\r\n\r\n    $scope.reset = function () {\r\n        $scope.reset();\r\n    };\r\n\r\n    $scope.deleteEntry = function () {\r\n        parentModel.splice(parentModel.indexOf(model), 1);\r\n        $uibModalInstance.close($scope);\r\n    };\r\n\r\n    $scope.reset = function () {\r\n        if (angular.isDefined(data.resetFunction)) {\r\n            data.resetFunction($scope);\r\n        }\r\n    };\r\n\r\n    $scope.$on(\"modal.closing\", function (targetScope, reason) {\r\n        if (reason == \"backdrop click\") {\r\n            $scope.reset($scope);\r\n        }\r\n    });\r\n}]);\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .factory('ConfigBoxService', ConfigBoxService);\r\n\r\nfunction ConfigBoxService($http, $q) {\r\n\r\n    return {\r\n        checkConnection: checkConnection,\r\n        checkCaps: checkCaps\r\n    };\r\n\r\n    function checkConnection(url, settings) {\r\n        var deferred = $q.defer();\r\n\r\n        $http.post(url, settings).success(function (result) {\r\n            //Using ng-class and a scope variable doesn't work for some reason, is only updated at second click \r\n            if (result.result) {\r\n                deferred.resolve();\r\n            } else {\r\n                deferred.reject({checked: true, message: result.message});\r\n            }\r\n        }).error(function (result) {\r\n            deferred.reject({checked: false, message: result.message});\r\n        });\r\n\r\n        return deferred.promise;\r\n    }\r\n\r\n    function checkCaps(url, params, model) {\r\n        var deferred = $q.defer();\r\n\r\n        $http.post(url, params).success(function (data) {\r\n            //Using ng-class and a scope variable doesn't work for some reason, is only updated at second click \r\n            if (data.success) {\r\n                model.search_ids = data.supportedIds;\r\n                model.searchTypes = data.supportedTypes;\r\n                if (data.supportsAllCategories) {   //Don't display all the categories, will be replaced with placeholder \"All categories\"\r\n                    model.categories = [];\r\n                } else {\r\n                    model.categories = data.supportedCategories;\r\n                }\r\n                model.animeCategory = data.animeCategory;\r\n                model.audiobookCategory = data.audiobookCategory;\r\n                model.comicCategory = data.comicCategory;\r\n                model.ebookCategory = data.ebookCategory;\r\n                model.magazineCategory = data.magazineCategory;\r\n                model.backend = data.backend;\r\n                deferred.resolve({supportedIds: data.supportedIds, supportedTypes: data.supportedTypes}, model);\r\n            } else {\r\n                deferred.reject(data.message);\r\n            }\r\n        }).error(function () {\r\n            deferred.reject(\"Unknown error\");\r\n        });\r\n\r\n        return deferred.promise;\r\n    }\r\n\r\n}\r\nConfigBoxService.$inject = [\"$http\", \"$q\"];\r\n\r\n\r\n\r\n\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .factory('FileDownloadService', FileDownloadService);\r\n\r\nfunction FileDownloadService($http, growl ) {\r\n\r\n    var service = {\r\n        downloadFile: downloadFile\r\n    };\r\n\r\n    return service;\r\n    \r\n    function downloadFile(link, filename) {\r\n        $http({method: 'GET', url: link, responseType: 'arraybuffer'}).success(function (data, status, headers, config) {\r\n            var a = document.createElement('a');\r\n            var blob = new Blob([data], {'type': \"application/octet-stream\"});\r\n            a.href = URL.createObjectURL(blob);\r\n            a.download = filename;\r\n\r\n            document.body.appendChild(a);\r\n            a.click();\r\n            document.body.removeChild(a);\r\n        }).error(function (data, status, headers, config) {\r\n            growl.error(status);\r\n        });\r\n\r\n    }\r\n    \r\n\r\n}\r\nFileDownloadService.$inject = [\"$http\", \"growl\"];\r\n\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .factory('DownloaderCategoriesService', DownloaderCategoriesService);\r\n\r\nfunction DownloaderCategoriesService($http, $q, $uibModal) {\r\n\r\n    var categories = {};\r\n    var selectedCategory = {};\r\n\r\n    var service = {\r\n        get: getCategories,\r\n        invalidate: invalidate,\r\n        select: select,\r\n        openCategorySelection: openCategorySelection\r\n    };\r\n\r\n    var deferred;\r\n\r\n    return service;\r\n\r\n\r\n    function getCategories(downloader) {\r\n\r\n        function loadAll() {\r\n            if (angular.isDefined(categories) && angular.isDefined(categories.downloader)) {\r\n                var deferred = $q.defer();\r\n                deferred.resolve(categories.downloader);\r\n                return deferred.promise;\r\n            }\r\n            \r\n            return $http.get('internalapi/getcategories', {params: {downloader: downloader.name}})\r\n                .then(function (categoriesResponse) {\r\n                    \r\n                    console.log(\"Updating downloader categories cache\");\r\n                    var categories = {downloader: categoriesResponse.data.categories};\r\n                    return categoriesResponse.data.categories;\r\n\r\n                }, function (error) {\r\n                    throw error;\r\n                });\r\n        }\r\n\r\n        return loadAll().then(function (categories) {\r\n            return categories;\r\n        }, function (error) {\r\n            throw error;\r\n        });\r\n    }\r\n\r\n\r\n    function openCategorySelection(downloader) {\r\n        $uibModal.open({\r\n            templateUrl: 'static/html/directives/addable-nzb-modal.html',\r\n            controller: 'DownloaderCategorySelectionController',\r\n            size: \"sm\",\r\n            resolve: {\r\n                categories: function () {\r\n                    return getCategories(downloader)\r\n                }\r\n            }\r\n        });\r\n        deferred = $q.defer();\r\n        return deferred.promise;\r\n    }\r\n\r\n    function select(category) {\r\n        selectedCategory = category;\r\n        console.log(\"Selected category \" + category);\r\n        deferred.resolve(category);\r\n    }\r\n\r\n    function invalidate() {\r\n        console.log(\"Invalidating categories\");\r\n        categories = undefined;\r\n    }\r\n}\r\nDownloaderCategoriesService.$inject = [\"$http\", \"$q\", \"$uibModal\"];\r\n\r\nangular\r\n    .module('nzbhydraApp').controller('DownloaderCategorySelectionController', [\"$scope\", \"$uibModalInstance\", \"DownloaderCategoriesService\", \"categories\", function ($scope, $uibModalInstance, DownloaderCategoriesService, categories) {\r\n    console.log(categories);\r\n    $scope.categories = categories;\r\n    $scope.select = function (category) {\r\n        DownloaderCategoriesService.select(category);\r\n        $uibModalInstance.close($scope);\r\n    }\r\n}]);","angular\r\n    .module('nzbhydraApp')\r\n    .controller('DownloadHistoryController', DownloadHistoryController);\r\n\r\n\r\nfunction DownloadHistoryController($scope, StatsService, downloads, ConfigService) {\r\n    $scope.limit = 100;\r\n    $scope.pagination = {\r\n        current: 1\r\n    };\r\n    $scope.sortModel = {\r\n        column: \"time\",\r\n        sortMode: 2\r\n    };\r\n    $scope.filterModel = {};\r\n\r\n    //Filter options\r\n    $scope.indexersForFiltering = [];\r\n    _.forEach(ConfigService.getSafe().indexers, function (indexer) {\r\n        $scope.indexersForFiltering.push({label: indexer.name, id: indexer.name})\r\n    });\r\n    $scope.preselectedTimeInterval = {beforeDate: null, afterDate: null};\r\n    $scope.successfulForFiltering = [{label: \"Succesful\", id: true}, {label: \"Unsuccesful\", id: false}, {label: \"Unknown\", id: null}];\r\n    $scope.accessOptionsForFiltering = [{label: \"All\", value: \"all\"}, {label: \"API\", value: false}, {label: \"Internal\", value: true}];\r\n\r\n\r\n    //Preloaded data\r\n    $scope.nzbDownloads = downloads.data.nzbDownloads;\r\n    $scope.totalDownloads = downloads.data.totalDownloads;\r\n\r\n\r\n    $scope.update = function () {\r\n        StatsService.getDownloadHistory($scope.pagination.current, $scope.limit, $scope.filterModel, $scope.sortModel).then(function (downloads) {\r\n            $scope.nzbDownloads = downloads.data.nzbDownloads;\r\n            $scope.totalDownloads = downloads.data.totalDownloads;\r\n        });\r\n    };\r\n\r\n\r\n    $scope.$on(\"sort\", function (event, column, sortMode) {\r\n        if (sortMode == 0) {\r\n            column = \"time\";\r\n            sortMode = 2;\r\n        }\r\n        $scope.sortModel = {\r\n            column: column,\r\n            sortMode: sortMode\r\n        };\r\n        $scope.$broadcast(\"newSortColumn\", column);\r\n        $scope.update();\r\n    });\r\n\r\n\r\n    $scope.$on(\"filter\", function (event, column, filterModel, isActive) {\r\n        if (filterModel.filter) {\r\n            $scope.filterModel[column] = filterModel;\r\n        } else {\r\n            delete $scope.filterModel[column];\r\n        }\r\n        $scope.update();\r\n    })\r\n\r\n}\r\nDownloadHistoryController.$inject = [\"$scope\", \"StatsService\", \"downloads\", \"ConfigService\"];\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .filter('reformatDateEpoch', reformatDateEpoch);\r\n\r\nfunction reformatDateEpoch() {\r\n    return function (date) {\r\n        return moment.unix(date).local().format(\"YYYY-MM-DD HH:mm\");\r\n\r\n    }\r\n}","angular\r\n    .module('nzbhydraApp')\r\n    .factory('ConfigService', ConfigService);\r\n\r\nfunction ConfigService($http, $q, $cacheFactory, bootstrapped) {\r\n\r\n    var cache = $cacheFactory(\"nzbhydra\");\r\n    var safeConfig = bootstrapped.safeConfig;\r\n\r\n    return {\r\n        set: set,\r\n        get: get,\r\n        getSafe: getSafe,\r\n        invalidateSafe: invalidateSafe,\r\n        maySeeAdminArea: maySeeAdminArea\r\n    };\r\n\r\n\r\n    function set(newConfig) {\r\n        $http.put('internalapi/setsettings', newConfig)\r\n            .then(function (successresponse) {\r\n                console.log(\"Settings saved. Updating cache\");\r\n                cache.put(\"config\", newConfig);\r\n                invalidateSafe();\r\n            }, function (errorresponse) {\r\n                console.log(\"Error saving settings:\");\r\n                console.log(errorresponse);\r\n            });\r\n    }\r\n\r\n\r\n    function get() {\r\n        var config = cache.get(\"config\");\r\n        if (angular.isUndefined(config)) {\r\n            config = $http.get('internalapi/getconfig').then(function (data) {\r\n                return data.data;\r\n            });\r\n            cache.put(\"config\", config);\r\n        }\r\n\r\n        return config;\r\n    }\r\n\r\n    function getSafe() {\r\n        return safeConfig;\r\n    }\r\n\r\n    function invalidateSafe() {\r\n        $http.get('internalapi/getsafeconfig').then(function (data) {\r\n            safeConfig = data.data;\r\n        });\r\n    }\r\n\r\n    function maySeeAdminArea() {\r\n        function loadAll() {\r\n            var maySeeAdminArea = cache.get(\"maySeeAdminArea\");\r\n            if (!angular.isUndefined(maySeeAdminArea)) {\r\n                var deferred = $q.defer();\r\n                deferred.resolve(maySeeAdminArea);\r\n                return deferred.promise;\r\n            }\r\n\r\n            return $http.get('internalapi/mayseeadminarea')\r\n                .then(function (configResponse) {\r\n                    var config = configResponse.data;\r\n                    cache.put(\"maySeeAdminArea\", config);\r\n                    return configResponse.data;\r\n                });\r\n        }\r\n\r\n        return loadAll().then(function (maySeeAdminArea) {\r\n            return maySeeAdminArea;\r\n        });\r\n    }\r\n}\r\nConfigService.$inject = [\"$http\", \"$q\", \"$cacheFactory\", \"bootstrapped\"];","angular\r\n    .module('nzbhydraApp')\r\n    .factory('ConfigFields', ConfigFields);\r\n\r\nfunction ConfigFields($injector) {\r\n\r\n    var restartWatcher;\r\n\r\n    return {\r\n        getFields: getFields,\r\n        setRestartWatcher: setRestartWatcher\r\n    };\r\n\r\n    function setRestartWatcher(restartWatcherFunction) {\r\n        restartWatcher = restartWatcherFunction;\r\n    }\r\n\r\n\r\n    function restartListener(field, newValue, oldValue) {\r\n        if (newValue != oldValue) {\r\n            restartWatcher();\r\n        }\r\n    }\r\n\r\n\r\n    function ipValidator() {\r\n        return {\r\n            expression: function ($viewValue, $modelValue) {\r\n                var value = $modelValue || $viewValue;\r\n                if (value) {\r\n                    return /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/.test(value)\r\n                        || /^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$/.test(value);\r\n                }\r\n                return true;\r\n            },\r\n            message: '$viewValue + \" is not a valid IP Address\"'\r\n        };\r\n    }\r\n\r\n    function regexValidator(regex, message, prefixViewValue) {\r\n        return {\r\n            expression: function ($viewValue, $modelValue) {\r\n                var value = $modelValue || $viewValue;\r\n                if (value) {\r\n                    return regex.test(value);\r\n                }\r\n                return true;\r\n            },\r\n            message: (prefixViewValue ? '$viewValue + \" ' : '\" ') + message + '\"'\r\n        };\r\n    }\r\n\r\n\r\n    function getCategoryFields() {\r\n        var fields = [];\r\n        var ConfigService = $injector.get(\"ConfigService\");\r\n        var categories = ConfigService.getSafe().categories;\r\n        fields.push({\r\n            key: 'enableCategorySizes',\r\n            type: 'horizontalSwitch',\r\n            templateOptions: {\r\n                type: 'switch',\r\n                label: 'Category sizes',\r\n                help: \"Preset min and max sizes depending on the selected category\"\r\n            }\r\n        });\r\n        _.each(categories, function (category) {\r\n                if (category.name != \"all\" && category.name != \"na\") {\r\n                    var categoryFields = [\r\n                        {\r\n                            key: \"categories.\" + category.name + '.requiredWords',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'Required words',\r\n                                placeholder: 'separate, with, commas, like, this'\r\n                            }\r\n                        },\r\n                        {\r\n                            key: \"categories.\" + category.name + '.requiredRegex',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'Required regex',\r\n                                help: 'Must be present in a title (which is converted to lowercase before)'\r\n                            }\r\n                        },\r\n                        {\r\n                            key: \"categories.\" + category.name + '.forbiddenWords',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'Forbidden words',\r\n                                placeholder: 'separate, with, commas, like, this'\r\n                            }\r\n                        },\r\n                        {\r\n                            key: \"categories.\" + category.name + '.forbiddenRegex',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'Forbidden regex',\r\n                                help: 'Must not be present in a title (which is converted to lowercase before)'\r\n                            }\r\n                        },\r\n                        {\r\n                            key: \"categories.\" + category.name + '.applyRestrictions',\r\n                            type: 'horizontalSelect',\r\n                            templateOptions: {\r\n                                label: 'Apply restrictions',\r\n                                options: [\r\n                                    {name: 'Internal searches', value: 'internal'},\r\n                                    {name: 'API searches', value: 'external'},\r\n                                    {name: 'All searches', value: 'both'}\r\n                                ],\r\n                                help: \"For which type of search word restrictions will be applied\"\r\n                            }\r\n                        }\r\n                    ];\r\n                    categoryFields.push({\r\n                        wrapper: 'settingWrapper',\r\n                        templateOptions: {\r\n                            label: 'Size preset'\r\n                        },\r\n                        fieldGroup: [\r\n                            {\r\n                                key: \"categories.\" + category.name + '.min',\r\n                                type: 'duoSetting',\r\n                                templateOptions: {\r\n                                    addonRight: {\r\n                                        text: 'MB'\r\n                                    }\r\n                                }\r\n                            },\r\n                            {\r\n                                type: 'duolabel'\r\n                            },\r\n                            {\r\n                                key: \"categories.\" + category.name + '.max',\r\n                                type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\r\n                            }\r\n                        ]\r\n                    });\r\n                    categoryFields.push({\r\n                        key: \"categories.\" + category.name + '.newznabCategories',\r\n                        type: 'horizontalInput',\r\n                        templateOptions: {\r\n                            type: 'text',\r\n                            label: 'Newznab categories',\r\n                            help: 'Map newznab categories to hydra categories',\r\n                            required: true\r\n                        },\r\n                        parsers: [function (value) {\r\n                            if (!value) {\r\n                                return value;\r\n                            }\r\n                            var arr = [];\r\n                            arr.push.apply(arr, value.split(\",\").map(Number));\r\n                            return arr;\r\n\r\n                        }]\r\n                    });\r\n                    categoryFields.push({\r\n                        key: \"categories.\" + category.name + '.ignoreResults',\r\n                        type: 'horizontalSelect',\r\n                        templateOptions: {\r\n                            label: 'Ignore results',\r\n                            options: [\r\n                                {name: 'For internal searches', value: 'internal'},\r\n                                {name: 'For API searches', value: 'external'},\r\n                                {name: 'Always', value: 'always'},\r\n                                {name: 'Never', value: 'never'}\r\n                            ],\r\n                            help: \"Ignore results from this category\"\r\n                        }\r\n                    });\r\n\r\n                    fields.push({\r\n                        wrapper: 'fieldset',\r\n                        templateOptions: {\r\n                            label: category.pretty\r\n                        },\r\n                        fieldGroup: categoryFields\r\n\r\n                    })\r\n                }\r\n            }\r\n        );\r\n        return fields;\r\n    }\r\n\r\n    function getFields(rootModel) {\r\n        return {\r\n            main: [\r\n                {\r\n                    wrapper: 'fieldset',\r\n                    templateOptions: {label: 'Hosting'},\r\n                    fieldGroup: [\r\n                        {\r\n                            key: 'host',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'Host',\r\n                                required: true,\r\n                                placeholder: 'IPv4/6 address to bind to',\r\n                                help: 'I strongly recommend using a reverse proxy instead of exposing this directly. Requires restart.'\r\n                            },\r\n                            validators: {\r\n                                ipAddress: ipValidator()\r\n                            },\r\n                            watcher: {\r\n                                listener: restartListener\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'port',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'number',\r\n                                label: 'Port',\r\n                                required: true,\r\n                                placeholder: '5050',\r\n                                help: 'Requires restart'\r\n                            },\r\n                            validators: {\r\n                                port: regexValidator(/^\\d{1,5}$/, \"is no valid port\", true)\r\n                            },\r\n                            watcher: {\r\n                                listener: restartListener\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'urlBase',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'URL base',\r\n                                placeholder: '/nzbhydra',\r\n                                help: 'Set when using an external proxy. Call using a trailing slash, e.g. http://www.domain.com/nzbhydra/'\r\n                            },\r\n                            validators: {\r\n                                urlBase: regexValidator(/^(\\/\\w+)*$/, \"Base URL needs to start with a slash and must not end with one\")\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'externalUrl',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'External URL',\r\n                                placeholder: 'https://www.somedomain.com/nzbhydra/',\r\n                                help: 'Set to the full external URL so machines outside can use the generated NZB links.'\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'useLocalUrlForApiAccess',\r\n                            type: 'horizontalSwitch',\r\n                            hideExpression: '!model.externalUrl',\r\n                            templateOptions: {\r\n                                type: 'switch',\r\n                                label: 'Use local address in API results',\r\n                                help: 'Disable to make API results use the external URL in NZB links.'\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'socksProxy',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'SOCKS proxy',\r\n                                placeholder: 'socks5://user:pass@127.0.0.1:1080',\r\n                                help: \"IPv4 only\"\r\n                            },\r\n                            watcher: {\r\n                                listener: restartListener\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'httpProxy',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'HTTP proxy',\r\n                                placeholder: 'http://user:pass@10.0.0.1:1080',\r\n                                help: \"IPv4 only\"\r\n                            },\r\n                            watcher: {\r\n                                listener: restartListener\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'httpsProxy',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'HTTPS proxy',\r\n                                placeholder: 'https://user:pass@10.0.0.1:1090',\r\n                                help: \"IPv4 only\"\r\n                            },\r\n                            watcher: {\r\n                                listener: restartListener\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'ssl',\r\n                            type: 'horizontalSwitch',\r\n                            templateOptions: {\r\n                                type: 'switch',\r\n                                label: 'Use SSL',\r\n                                help: 'I recommend using a reverse proxy instead of this. Requires restart.'\r\n                            },\r\n                            watcher: {\r\n                                listener: restartListener\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'sslcert',\r\n                            hideExpression: '!model.ssl',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'SSL certificate file',\r\n                                required: true,\r\n                                help: 'Requires restart.'\r\n                            },\r\n                            watcher: {\r\n                                listener: restartListener\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'sslkey',\r\n                            hideExpression: '!model.ssl',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'SSL key file',\r\n                                required: true,\r\n                                help: 'Requires restart.'\r\n                            },\r\n                            watcher: {\r\n                                listener: restartListener\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'sslca',\r\n                            hideExpression: '!model.ssl',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'SSL intermediate certificate (CA file)',\r\n                                help: 'Requires restart.'\r\n                            },\r\n                            watcher: {\r\n                                listener: restartListener\r\n                            }\r\n                        }\r\n\r\n\r\n                    ]\r\n                },\r\n                {\r\n                    wrapper: 'fieldset',\r\n                    templateOptions: {label: 'UI'},\r\n                    fieldGroup: [\r\n\r\n                        {\r\n                            key: 'theme',\r\n                            type: 'horizontalSelect',\r\n                            templateOptions: {\r\n                                type: 'select',\r\n                                label: 'Theme',\r\n                                help: 'Reload page after saving',\r\n                                options: [\r\n                                    {name: 'Grey', value: 'grey'},\r\n                                    {name: 'Bright', value: 'bright'},\r\n                                    {name: 'Dark', value: 'dark'}\r\n                                ]\r\n                            }\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    wrapper: 'fieldset',\r\n                    templateOptions: {label: 'Security'},\r\n                    fieldGroup: [\r\n\r\n                        {\r\n                            key: 'apikey',\r\n                            type: 'horizontalApiKeyInput',\r\n                            templateOptions: {\r\n                                label: 'API key',\r\n                                help: 'Remove to disable. Alphanumeric only'\r\n                            },\r\n                            validators: {\r\n                                apikey: regexValidator(/^[a-zA-Z0-9]*$/, \"API key must only contain numbers and digits\", false)\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'dereferer',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'Dereferer',\r\n                                help: 'Redirect external links to hide your instance. Insert $s for target URL. Delete to disable.'\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'verifySsl',\r\n                            type: 'horizontalSwitch',\r\n                            templateOptions: {\r\n                                label: 'Verify SSL certificates',\r\n                                help: 'If enabled only valid/known SSL certificates will be accepted when accessing indexers'\r\n                            }\r\n                        }\r\n                    ]\r\n                },\r\n\r\n                {\r\n                    wrapper: 'fieldset',\r\n                    key: 'logging',\r\n                    templateOptions: {label: 'Logging'},\r\n                    fieldGroup: [\r\n                        {\r\n                            key: 'logfilelevel',\r\n                            type: 'horizontalSelect',\r\n                            templateOptions: {\r\n                                type: 'select',\r\n                                label: 'Logfile level',\r\n                                options: [\r\n                                    {name: 'Critical', value: 'CRITICAL'},\r\n                                    {name: 'Error', value: 'ERROR'},\r\n                                    {name: 'Warning', value: 'WARNING'},\r\n                                    {name: 'Info', value: 'INFO'},\r\n                                    {name: 'Debug', value: 'DEBUG'}\r\n                                ]\r\n                            },\r\n                            watcher: {\r\n                                listener: restartListener\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'logfilename',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'Log file',\r\n                                required: true\r\n                            },\r\n                            watcher: {\r\n                                listener: restartListener\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'rolloverAtStart',\r\n                            type: 'horizontalSwitch',\r\n                            templateOptions: {\r\n                                label: 'Startup rollover',\r\n                                help: 'Starts a new log file on start/restart'\r\n                            },\r\n                            watcher: {\r\n                                listener: restartListener\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'logMaxSize',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'number',\r\n                                label: 'Max log file size',\r\n                                help: 'When log file size is reached a new one is started. Set to 0 to disable.',\r\n                                addonRight: {\r\n                                    text: 'kB'\r\n                                }\r\n                            },\r\n                            watcher: {\r\n                                listener: restartListener\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'logRotateAfterDays',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'number',\r\n                                label: 'Rotate after',\r\n                                help: 'A new log file is started after this many days. Supercedes max size. Keep empty to disable.',\r\n                                addonRight: {\r\n                                    text: 'days'\r\n                                }\r\n                            },\r\n                            watcher: {\r\n                                listener: restartListener\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'keepLogFiles',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'number',\r\n                                label: 'Keep log files',\r\n                                help: 'Number of log files to keep before oldest is deleted.'\r\n                            },\r\n                            watcher: {\r\n                                listener: restartListener\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'logfileUmask',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'Log file chmod',\r\n                                help: 'chmod for log files (linux only)'\r\n                            },\r\n                            watcher: {\r\n                                listener: restartListener\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'consolelevel',\r\n                            type: 'horizontalSelect',\r\n                            templateOptions: {\r\n                                type: 'select',\r\n                                label: 'Console log level',\r\n                                options: [\r\n                                    {name: 'Critical', value: 'CRITICAL'},\r\n                                    {name: 'Error', value: 'ERROR'},\r\n                                    {name: 'Warning', value: 'WARNING'},\r\n                                    {name: 'Info', value: 'INFO'},\r\n                                    {name: 'Debug', value: 'DEBUG'}\r\n                                ]\r\n                            },\r\n                            watcher: {\r\n                                listener: restartListener\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'logIpAddresses',\r\n                            type: 'horizontalSwitch',\r\n                            templateOptions: {\r\n                                type: 'switch',\r\n                                label: 'Log IP addresses'\r\n                            }\r\n                        }\r\n\r\n\r\n                    ]\r\n                },\r\n                {\r\n                    wrapper: 'fieldset',\r\n                    templateOptions: {label: 'Updating'},\r\n                    fieldGroup: [\r\n\r\n                        {\r\n                            key: 'gitPath',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                label: 'Git executable',\r\n                                help: 'Set if git is not in your path'\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'branch',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'Repository branch',\r\n                                required: true,\r\n                                help: 'Stay on master. Seriously...'\r\n                            }\r\n                        }\r\n                    ]\r\n                },\r\n\r\n                {\r\n                    wrapper: 'fieldset',\r\n                    templateOptions: {label: 'Other'},\r\n                    fieldGroup: [\r\n                        {\r\n                            key: 'keepSearchResultsForDays',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'number',\r\n                                label: 'Store results for ...',\r\n                                addonRight: {\r\n                                    text: 'days'\r\n                                },\r\n                                required: true,\r\n                                help: 'Meta data from searches is stored in the database. When they\\'re deleted links to hydra become invalid.'\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'debug',\r\n                            type: 'horizontalSwitch',\r\n                            templateOptions: {\r\n                                type: 'switch',\r\n                                label: 'Enable debugging',\r\n                                help: \"Only do this if you know what and why you're doing it\"\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'runThreaded',\r\n                            type: 'horizontalSwitch',\r\n                            templateOptions: {\r\n                                type: 'switch',\r\n                                label: 'Run threaded server',\r\n                                help: 'Requires restart'\r\n                            },\r\n                            watcher: {\r\n                                listener: restartListener\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'startupBrowser',\r\n                            type: 'horizontalSwitch',\r\n                            templateOptions: {\r\n                                type: 'switch',\r\n                                label: 'Open browser on startup'\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'shutdownForRestart',\r\n                            type: 'horizontalSwitch',\r\n                            templateOptions: {\r\n                                type: 'switch',\r\n                                label: 'Shutdown to restart',\r\n                                help: 'When run with a service manager which automatically restarts Hydra enable this to prevent duplicate instances'\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            ],\r\n\r\n            searching: [\r\n                {\r\n                    wrapper: 'fieldset',\r\n                    templateOptions: {\r\n                        label: 'Indexer access'\r\n                    },\r\n                    fieldGroup: [\r\n                        {\r\n                            key: 'timeout',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'number',\r\n                                label: 'Timeout when accessing indexers',\r\n                                addonRight: {\r\n                                    text: 'seconds'\r\n                                }\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'ignoreTemporarilyDisabled',\r\n                            type: 'horizontalSwitch',\r\n                            templateOptions: {\r\n                                type: 'switch',\r\n                                label: 'Ignore temporarily disabled',\r\n                                help: \"If enabled access to indexers will never be paused after an error occurred\"\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'ignorePassworded',\r\n                            type: 'horizontalSwitch',\r\n                            templateOptions: {\r\n                                type: 'switch',\r\n                                label: 'Ignore passworded releases',\r\n                                help: \"Not all indexers provide this information\"\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'forbiddenWords',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'Forbidden words',\r\n                                placeholder: 'separate, with, commas, like, this',\r\n                                help: \"Results with any of these words in the title will be ignored\"\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'forbiddenRegex',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'Forbidden regex',\r\n                                help: 'Must not be present in a title (which is converted to lowercase before)'\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'requiredWords',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'Required words',\r\n                                placeholder: 'separate, with, commas, like, this',\r\n                                help: \"Only results with at least one of these words in the title will be used\"\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'requiredRegex',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'Required regex',\r\n                                help: 'Must be present in a title (which is converted to lowercase before)'\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'applyRestrictions',\r\n                            type: 'horizontalSelect',\r\n                            templateOptions: {\r\n                                label: 'Apply word restrictions',\r\n                                options: [\r\n                                    {name: 'Internal searches', value: 'internal'},\r\n                                    {name: 'API searches', value: 'external'},\r\n                                    {name: 'All searches', value: 'both'}\r\n                                ],\r\n                                help: \"For which type of search word restrictions will be applied\"\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'forbiddenGroups',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'Forbidden groups',\r\n                                placeholder: 'separate, with, commas, like, this',\r\n                                help: 'Posts from any groups containing any of these words will be ignored'\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'forbiddenPosters',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'Forbidden posters',\r\n                                placeholder: 'separate, with, commas, like, this',\r\n                                help: 'Posts from any posters containing any of these words will be ignored'\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'maxAge',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'number',\r\n                                label: 'Maximum results age',\r\n                                help: 'Results older than this are ignored. Can be overwritten per search',\r\n                                addonRight: {\r\n                                    text: 'days'\r\n                                }\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'generate_queries',\r\n                            type: 'horizontalMultiselect',\r\n                            templateOptions: {\r\n                                label: 'Generate queries',\r\n                                options: [\r\n                                    {label: 'Internal searches', id: 'internal'},\r\n                                    {label: 'API searches', id: 'external'}\r\n                                ],\r\n                                help: \"Generate queries for indexers which do not support ID based searches\"\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'idFallbackToTitle',\r\n                            type: 'horizontalMultiselect',\r\n                            templateOptions: {\r\n                                label: 'Fallback to title queries',\r\n                                options: [\r\n                                    {label: 'Internal searches', id: 'internal'},\r\n                                    {label: 'API searches', id: 'external'}\r\n                                ],\r\n                                help: \"When no results were found for a query ID search again using the title\"\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'idFallbackToTitlePerIndexer',\r\n                            type: 'horizontalSwitch',\r\n                            templateOptions: {\r\n                                type: 'switch',\r\n                                label: 'Fallback per indexer',\r\n                                help: \"If enabled, fallback will occur on a per-indexer basis\"\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'userAgent',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'User agent',\r\n                                required: true\r\n                            }\r\n                        }\r\n\r\n                    ]\r\n                },\r\n                {\r\n                    wrapper: 'fieldset',\r\n                    templateOptions: {\r\n                        label: 'Result processing'\r\n                    },\r\n                    fieldGroup: [\r\n                        {\r\n                            key: 'htmlParser',\r\n                            type: 'horizontalSelect',\r\n                            templateOptions: {\r\n                                type: 'select',\r\n                                label: 'HTML parser',\r\n                                options: [\r\n                                    {name: 'Default BS (slower)', value: 'html.parser'},\r\n                                    {name: 'LXML (faster, needs to be installed separately)', value: 'lxml'}\r\n                                ]\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'duplicateSizeThresholdInPercent',\r\n                            type: 'horizontalPercentInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'Duplicate size threshold',\r\n                                required: true,\r\n                                addonRight: {\r\n                                    text: '%'\r\n                                }\r\n\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'duplicateAgeThreshold',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'number',\r\n                                label: 'Duplicate age threshold',\r\n                                required: true,\r\n                                addonRight: {\r\n                                    text: 'hours'\r\n                                }\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'alwaysShowDuplicates',\r\n                            type: 'horizontalSwitch',\r\n                            templateOptions: {\r\n                                type: 'switch',\r\n                                label: 'Always show duplicates',\r\n                                help: 'Activate to show duplicates in search results by default'\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'removeTrailing',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'Remove trailing...',\r\n                                help: 'Removed from title if it ends with either of these. Case insensitive and disregards leading/trailing spaces'\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'nzbAccessType',\r\n                            type: 'horizontalSelect',\r\n                            templateOptions: {\r\n                                type: 'select',\r\n                                label: 'NZB access type',\r\n                                options: [\r\n                                    {name: 'Proxy NZBs from indexer', value: 'serve'},\r\n                                    {name: 'Redirect to the indexer', value: 'redirect'}\r\n                                ],\r\n                                help: \"How access to NZBs is provided when NZBs are downloaded (by the user or external tools). Redirecting is recommended.\"\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            ],\r\n\r\n            categories: getCategoryFields(),\r\n\r\n            downloaders: [\r\n                {\r\n                    type: \"arrayConfig\",\r\n                    data: {\r\n                        defaultModel: {\r\n                            enabled: true\r\n                        },\r\n                        entryTemplateUrl: 'downloaderEntry.html',\r\n                        presets: function () {\r\n                            return getDownloaderPresets();\r\n                        },\r\n                        checkAddingAllowed: function () {\r\n                            return true;\r\n                        },\r\n                        presetsOnly: true,\r\n                        addNewText: 'Add new downloader',\r\n                        fieldsFunction: getDownloaderBoxFields,\r\n                        allowDeleteFunction: function () {\r\n                            return true;\r\n                        },\r\n                        checkBeforeClose: function (scope, model) {\r\n                            var DownloaderCheckBeforeCloseService = $injector.get(\"DownloaderCheckBeforeCloseService\");\r\n                            return DownloaderCheckBeforeCloseService.check(scope, model);\r\n                        },\r\n                        resetFunction: function (scope) {\r\n                            scope.options.resetModel();\r\n                            scope.options.resetModel();\r\n                        }\r\n\r\n                    }\r\n                }\r\n            ],\r\n\r\n\r\n            indexers: [\r\n                {\r\n                    type: \"arrayConfig\",\r\n                    data: {\r\n                        defaultModel: {\r\n                            animeCategory: null,\r\n                            comicCategory: null,\r\n                            audiobookCategory: null,\r\n                            magazineCategory: null,\r\n                            ebookCategory: null,\r\n                            enabled: true,\r\n                            categories: [],\r\n                            downloadLimit: null,\r\n                            loadLimitOnRandom: null,\r\n                            host: null,\r\n                            apikey: null,\r\n                            hitLimit: null,\r\n                            hitLimitResetTime: 0,\r\n                            timeout: null,\r\n                            name: null,\r\n                            showOnSearch: true,\r\n                            score: 0,\r\n                            username: null,\r\n                            password: null,\r\n                            preselect: true,\r\n                            type: 'newznab',\r\n                            accessType: \"both\",\r\n                            search_ids: undefined, //[\"imdbid\", \"rid\", \"tvdbid\"],\r\n                            searchTypes: undefined, //[\"tvsearch\", \"movie\"]\r\n                            backend: null,\r\n                            userAgent: null\r\n                        },\r\n                        addNewText: 'Add new indexer',\r\n                        entryTemplateUrl: 'indexerEntry.html',\r\n                        presets: function (model) {\r\n                            return getIndexerPresets(model);\r\n                        },\r\n\r\n                        checkAddingAllowed: function (existingIndexers, preset) {\r\n                            if (!preset || !(preset.type == \"anizb\" || preset.type == \"binsearch\" || preset.type == \"nzbindex\" || preset.type == \"nzbclub\")) {\r\n                                return true;\r\n                            }\r\n                            return !_.any(existingIndexers, function (existingEntry) {\r\n                                return existingEntry.name == preset.name;\r\n                            });\r\n\r\n                        },\r\n                        fieldsFunction: getIndexerBoxFields,\r\n                        allowDeleteFunction: function (model) {\r\n                            return true;\r\n                        },\r\n                        checkBeforeClose: function (scope, model) {\r\n                            var IndexerCheckBeforeCloseService = $injector.get(\"IndexerCheckBeforeCloseService\");\r\n                            return IndexerCheckBeforeCloseService.check(scope, model);\r\n                        },\r\n                        resetFunction: function (scope) {\r\n                            //Then reset the model twice (for some reason when we do it once the search types / ids fields are empty, resetting again fixes that... (wtf))\r\n                            scope.options.resetModel();\r\n                            scope.options.resetModel();\r\n                        }\r\n\r\n                    }\r\n                }\r\n            ],\r\n\r\n            auth: [\r\n                {\r\n                    key: 'authType',\r\n                    type: 'horizontalSelect',\r\n                    templateOptions: {\r\n                        label: 'Auth type',\r\n                        options: [\r\n                            {name: 'None', value: 'none'},\r\n                            {name: 'HTTP Basic auth', value: 'basic'},\r\n                            {name: 'Login form', value: 'form'}\r\n                        ]\r\n\r\n                    }\r\n                },\r\n                {\r\n                    key: 'restrictSearch',\r\n                    type: 'horizontalSwitch',\r\n                    templateOptions: {\r\n                        type: 'switch',\r\n                        label: 'Restrict searching',\r\n                        help: 'Restrict access to searching'\r\n                    },\r\n                    hideExpression: function () {\r\n                        return rootModel.auth.authType == \"none\";\r\n                    }\r\n                },\r\n                {\r\n                    key: 'restrictStats',\r\n                    type: 'horizontalSwitch',\r\n                    templateOptions: {\r\n                        type: 'switch',\r\n                        label: 'Restrict stats',\r\n                        help: 'Restrict access to stats'\r\n                    },\r\n                    hideExpression: function () {\r\n                        return rootModel.auth.authType == \"none\";\r\n                    }\r\n                },\r\n                {\r\n                    key: 'restrictAdmin',\r\n                    type: 'horizontalSwitch',\r\n                    templateOptions: {\r\n                        type: 'switch',\r\n                        label: 'Restrict admin',\r\n                        help: 'Restrict access to admin functions'\r\n                    },\r\n                    hideExpression: function () {\r\n                        return rootModel.auth.authType == \"none\";\r\n                    }\r\n                },\r\n                {\r\n                    key: 'restrictDetailsDl',\r\n                    type: 'horizontalSwitch',\r\n                    templateOptions: {\r\n                        type: 'switch',\r\n                        label: 'Restrict NZB details & DL',\r\n                        help: 'Restrict NZB details, comments and download links'\r\n                    },\r\n                    hideExpression: function () {\r\n                        return rootModel.auth.authType == \"none\";\r\n                    }\r\n                },\r\n                {\r\n                    key: 'restrictIndexerSelection',\r\n                    type: 'horizontalSwitch',\r\n                    templateOptions: {\r\n                        type: 'switch',\r\n                        label: 'Restrict indexer selection box',\r\n                        help: 'Restrict visibility of indexer selection box in search. Affects only GUI'\r\n                    },\r\n                    hideExpression: function () {\r\n                        return rootModel.auth.authType == \"none\";\r\n                    }\r\n                },\r\n                {\r\n                    key: 'rememberUsers',\r\n                    type: 'horizontalSwitch',\r\n                    templateOptions: {\r\n                        type: 'switch',\r\n                        label: 'Remember users',\r\n                        help: 'Remember users with cookie for 14 days'\r\n                    },\r\n                    hideExpression: function () {\r\n                        return rootModel.auth.authType == \"none\";\r\n                    }\r\n                },\r\n                {\r\n                    key: 'rememberUsersExpiry',\r\n                    type: 'horizontalInput',\r\n                    templateOptions: {\r\n                        type: 'number',\r\n                        label: 'Cookie expiry',\r\n                        help: 'How long users are remembered',\r\n                        addonRight: {\r\n                            text: 'days'\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    type: 'repeatSection',\r\n                    key: 'users',\r\n                    model: rootModel.auth,\r\n                    templateOptions: {\r\n                        btnText: 'Add new user',\r\n                        altLegendText: 'Authless',\r\n                        fields: [\r\n                            {\r\n                                key: 'username',\r\n                                type: 'horizontalInput',\r\n                                templateOptions: {\r\n                                    type: 'text',\r\n                                    label: 'Username',\r\n                                    required: true\r\n                                }\r\n\r\n                            },\r\n                            {\r\n                                key: 'password',\r\n                                type: 'horizontalInput',\r\n                                templateOptions: {\r\n                                    type: 'password',\r\n                                    label: 'Password',\r\n                                    required: true\r\n                                }\r\n                            },\r\n                            {\r\n                                key: 'maySeeAdmin',\r\n                                type: 'horizontalSwitch',\r\n                                templateOptions: {\r\n                                    type: 'switch',\r\n                                    label: 'May see admin area'\r\n                                }\r\n                            },\r\n                            {\r\n                                key: 'maySeeStats',\r\n                                type: 'horizontalSwitch',\r\n                                templateOptions: {\r\n                                    type: 'switch',\r\n                                    label: 'May see stats'\r\n                                },\r\n                                hideExpression: 'model.maySeeAdmin'\r\n                            },\r\n                            {\r\n                                key: 'maySeeDetailsDl',\r\n                                type: 'horizontalSwitch',\r\n                                templateOptions: {\r\n                                    type: 'switch',\r\n                                    label: 'May see NZB details & DL links'\r\n                                },\r\n                                hideExpression: 'model.maySeeAdmin'\r\n                            },\r\n                            {\r\n                                key: 'showIndexerSelection',\r\n                                type: 'horizontalSwitch',\r\n                                templateOptions: {\r\n                                    type: 'switch',\r\n                                    label: 'May see indexer selection box'\r\n                                },\r\n                                hideExpression: 'model.maySeeAdmin'\r\n                            }\r\n\r\n                        ],\r\n                        defaultModel: {\r\n                            username: null,\r\n                            password: null,\r\n                            maySeeStats: true,\r\n                            maySeeAdmin: true,\r\n                            maySeeDetailsDl: true,\r\n                            showIndexerSelection: true\r\n                        }\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}\r\nConfigFields.$inject = [\"$injector\"];\r\n\r\n\r\nfunction getIndexerPresets(configuredIndexers) {\r\n    var presets = [\r\n        [\r\n            {\r\n                name: \"6box\",\r\n                host: \"https://6box.me\"\r\n            },\r\n            {\r\n                name: \"6box spotweb\",\r\n                host: \"https://6box.me/spotweb\"\r\n            },\r\n            {\r\n                name: \"altHUB\",\r\n                host: \"https://api.althub.co.za\"\r\n            },\r\n            {\r\n                name: \"DogNZB\",\r\n                host: \"https://api.dognzb.cr\"\r\n            },\r\n            {\r\n                name: \"Drunken Slug\",\r\n                host: \"https://api.drunkenslug.com\"\r\n            },\r\n            {\r\n                name: \"LuluNZB\",\r\n                host: \"https://lulunzb.com\"\r\n            },\r\n            {\r\n                name: \"miatrix\",\r\n                host: \"https://www.miatrix.com\"\r\n            },\r\n            {\r\n                name: \"newz69.keagaming\",\r\n                host: \"https://newz69.keagaming.com\"\r\n            },\r\n            {\r\n                name: \"NewzTown\",\r\n                host: \"https://newztown.co.za\"\r\n            },\r\n            {\r\n                name: \"NZB Finder\",\r\n                host: \"https://nzbfinder.ws\"\r\n            },\r\n            {\r\n                name: \"NZBCat\",\r\n                host: \"https://nzb.cat\"\r\n            },\r\n            {\r\n                name: \"nzb.ag\",\r\n                host: \"https://nzb.ag\"\r\n            },\r\n            {\r\n                name: \"nzb.is\",\r\n                host: \"https://nzb.is\"\r\n            },\r\n            {\r\n                name: \"nzb.su\",\r\n                host: \"https://api.nzb.su\"\r\n            },\r\n            {\r\n                name: \"nzb7\",\r\n                host: \"https://www.nzb7.com\"\r\n            },\r\n            {\r\n                name: \"NZBGeek\",\r\n                host: \"https://api.nzbgeek.info\"\r\n            },\r\n            {\r\n                name: \"NzbNdx\",\r\n                host: \"https://www.nzbndx.com\"\r\n            },\r\n            {\r\n                name: \"NzBNooB\",\r\n                host: \"https://www.nzbnoob.com\"\r\n            },\r\n            {\r\n                name: \"nzbplanet\",\r\n                host: \"https://nzbplanet.net\"\r\n            },\r\n            {\r\n                name: \"NZBs.org\",\r\n                host: \"https://nzbs.org\"\r\n            },\r\n            {\r\n                name: \"NZBs.io\",\r\n                host: \"https://www.nzbs.io\"\r\n            },\r\n            {\r\n                name: \"Nzeeb\",\r\n                host: \"https://www.nzeeb.com\"\r\n            },\r\n            {\r\n                name: \"oznzb\",\r\n                host: \"https://api.oznzb.com\"\r\n            },\r\n            {\r\n                name: \"omgwtfnzbs\",\r\n                host: \"https://api.omgwtfnzbs.me\"\r\n            },\r\n            {\r\n                name: \"PFMonkey\",\r\n                host: \"https://www.pfmonkey.com\"\r\n            },\r\n            {\r\n                name: \"SimplyNZBs\",\r\n                host: \"https://simplynzbs.com\"\r\n            },\r\n            {\r\n                name: \"Tabula-Rasa\",\r\n                host: \"https://www.tabula-rasa.pw\"\r\n            },\r\n            {\r\n                name: \"Usenet-Crawler\",\r\n                host: \"https://www.usenet-crawler.com\"\r\n            }\r\n        ],\r\n        [\r\n            {\r\n                name: \"Jackett/Cardigann\",\r\n                host: \"http://127.0.0.1:9117/torznab/YOURTRACKER\",\r\n                search_ids: [],\r\n                searchTypes: [],\r\n                type: \"jackett\",\r\n                accessType: \"internal\"\r\n            }\r\n        ],\r\n        [\r\n            {\r\n                accessType: \"both\",\r\n                categories: [\"anime\"],\r\n                downloadLimit: null,\r\n                enabled: false,\r\n                hitLimit: null,\r\n                hitLimitResetTime: null,\r\n                host: \"https://anizb.org\",\r\n                loadLimitOnRandom: null,\r\n                name: \"anizb\",\r\n                password: null,\r\n                preselect: true,\r\n                score: 0,\r\n                search_ids: [],\r\n                searchTypes: [],\r\n                showOnSearch: true,\r\n                timeout: null,\r\n                type: \"anizb\",\r\n                username: null\r\n            },\r\n            {\r\n                accessType: \"internal\",\r\n                categories: [],\r\n                downloadLimit: null,\r\n                enabled: true,\r\n                hitLimit: null,\r\n                hitLimitResetTime: null,\r\n                host: \"https://binsearch.info\",\r\n                loadLimitOnRandom: null,\r\n                name: \"Binsearch\",\r\n                password: null,\r\n                preselect: true,\r\n                score: 0,\r\n                search_ids: [],\r\n                searchTypes: [],\r\n                showOnSearch: true,\r\n                timeout: null,\r\n                type: \"binsearch\",\r\n                username: null\r\n            },\r\n            {\r\n                accessType: \"internal\",\r\n                categories: [],\r\n                downloadLimit: null,\r\n                enabled: true,\r\n                hitLimit: null,\r\n                hitLimitResetTime: null,\r\n                host: \"https://www.nzbclub.com\",\r\n                loadLimitOnRandom: null,\r\n                name: \"NZBClub\",\r\n                password: null,\r\n                preselect: true,\r\n                score: 0,\r\n                search_ids: [],\r\n                searchTypes: [],\r\n                showOnSearch: true,\r\n                timeout: null,\r\n                type: \"nzbclub\",\r\n                username: null\r\n\r\n            },\r\n            {\r\n                accessType: \"internal\",\r\n                categories: [],\r\n                downloadLimit: null,\r\n                enabled: true,\r\n                generalMinSize: 1,\r\n                hitLimit: null,\r\n                hitLimitResetTime: null,\r\n                host: \"https://nzbindex.com\",\r\n                loadLimitOnRandom: null,\r\n                name: \"NZBIndex\",\r\n                password: null,\r\n                preselect: true,\r\n                score: 0,\r\n                search_ids: [],\r\n                searchTypes: [],\r\n                showOnSearch: true,\r\n                timeout: null,\r\n                type: \"nzbindex\",\r\n                username: null\r\n\r\n            }\r\n        ]\r\n    ];\r\n\r\n\r\n    return presets;\r\n}\r\n\r\nfunction getIndexerBoxFields(model, parentModel, isInitial, injector) {\r\n    var fieldset = [];\r\n\r\n    fieldset.push({\r\n        key: 'enabled',\r\n        type: 'horizontalSwitch',\r\n        templateOptions: {\r\n            type: 'switch',\r\n            label: 'Enabled'\r\n        }\r\n    });\r\n\r\n    if (model.type == 'newznab' || model.type == 'jackett') {\r\n        fieldset.push(\r\n            {\r\n                key: 'name',\r\n                type: 'horizontalInput',\r\n                templateOptions: {\r\n                    type: 'text',\r\n                    label: 'Name',\r\n                    required: true,\r\n                    help: 'Used for identification. Changing the name will lose all history and stats!'\r\n                },\r\n                validators: {\r\n                    uniqueName: {\r\n                        expression: function (viewValue) {\r\n                            if (isInitial || viewValue != model.name) {\r\n                                return _.pluck(parentModel, \"name\").indexOf(viewValue) == -1;\r\n                            }\r\n                            return true;\r\n                        },\r\n                        message: '\"Indexer \\\\\"\" + $viewValue + \"\\\\\" already exists\"'\r\n                    }\r\n                }\r\n            })\r\n    }\r\n    if (model.type == 'newznab' || model.type == 'jackett') {\r\n        fieldset.push(\r\n            {\r\n                key: 'host',\r\n                type: 'horizontalInput',\r\n                templateOptions: {\r\n                    type: 'text',\r\n                    label: 'Host',\r\n                    required: true,\r\n                    placeholder: 'http://www.someindexer.com'\r\n                },\r\n                watcher: {\r\n                    listener: function (field, newValue, oldValue, scope) {\r\n                        if (newValue != oldValue) {\r\n                            scope.$parent.needsConnectionTest = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    if (model.type == 'newznab' || model.type == 'jackett') {\r\n        fieldset.push(\r\n            {\r\n                key: 'apikey',\r\n                type: 'horizontalInput',\r\n                templateOptions: {\r\n                    type: 'text',\r\n                    label: 'API Key'\r\n                },\r\n                watcher: {\r\n                    listener: function (field, newValue, oldValue, scope) {\r\n                        if (newValue != oldValue) {\r\n                            scope.$parent.needsConnectionTest = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    fieldset.push(\r\n        {\r\n            key: 'score',\r\n            type: 'horizontalInput',\r\n            templateOptions: {\r\n                type: 'number',\r\n                label: 'Priority',\r\n                required: true,\r\n                help: 'When duplicate search results are found the result from the indexer with the highest number will be selected'\r\n            }\r\n        });\r\n\r\n    fieldset.push(\r\n        {\r\n            key: 'timeout',\r\n            type: 'horizontalInput',\r\n            templateOptions: {\r\n                type: 'number',\r\n                label: 'Timeout',\r\n                help: 'Supercedes the general timeout in \"Searching\"'\r\n            }\r\n        });\r\n\r\n    if (model.type == 'newznab' || model.type == 'jackett') {\r\n        fieldset.push(\r\n            {\r\n                key: 'hitLimit',\r\n                type: 'horizontalInput',\r\n                templateOptions: {\r\n                    type: 'number',\r\n                    label: 'API hit limit',\r\n                    help: 'Maximum number of API hits since \"API hit reset time\"'\r\n                }\r\n            },\r\n            {\r\n                key: 'downloadLimit',\r\n                type: 'horizontalInput',\r\n                templateOptions: {\r\n                    type: 'number',\r\n                    label: 'Download limit',\r\n                    help: 'When # of downloads since \"Hit reset time\" is reached indexer will not be searched.'\r\n                }\r\n            }\r\n        );\r\n        fieldset.push(\r\n            {\r\n                key: 'loadLimitOnRandom',\r\n                type: 'horizontalInput',\r\n                templateOptions: {\r\n                    type: 'number',\r\n                    label: 'Load limiting',\r\n                    help: 'If set indexer will only be picked for one out of x API searches (on average)'\r\n                },\r\n                validators: {\r\n                    greaterThanZero: {\r\n                        expression: function ($viewValue, $modelValue) {\r\n                            var value = $modelValue || $viewValue;\r\n                            return angular.isUndefined(value) || value === null || value === \"\" || value > 1;\r\n                        },\r\n                        message: '\"Value must be greater than 1\"'\r\n                    }\r\n\r\n                }\r\n            },\r\n            {\r\n                key: 'hitLimitResetTime',\r\n                type: 'horizontalInput',\r\n                hideExpression: '!model.hitLimit && !model.downloadLimit',\r\n                templateOptions: {\r\n                    type: 'number',\r\n                    label: 'Hit reset time',\r\n                    help: 'UTC hour of day at which the API hit counter is reset (0==24). Leave empty for a rolling reset counter'\r\n                },\r\n                validators: {\r\n                    timeOfDay: {\r\n                        expression: function ($viewValue, $modelValue) {\r\n                            var value = $modelValue || $viewValue;\r\n                            return value >= 0 && value <= 24;\r\n                        },\r\n                        message: '$viewValue + \" is not a valid hour of day (0-24)\"'\r\n                    }\r\n\r\n                }\r\n            });\r\n    }\r\n    if (model.type == 'newznab') {\r\n        fieldset.push(\r\n            {\r\n                key: 'username',\r\n                type: 'horizontalInput',\r\n                templateOptions: {\r\n                    type: 'text',\r\n                    required: false,\r\n                    label: 'Username',\r\n                    help: 'Only needed if indexer requires HTTP auth for API access (rare)'\r\n                },\r\n                watcher: {\r\n                    listener: function (field, newValue, oldValue, scope) {\r\n                        if (newValue != oldValue) {\r\n                            scope.$parent.needsConnectionTest = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        );\r\n    }\r\n    if (model.type == 'newznab') {\r\n        fieldset.push(\r\n            {\r\n                key: 'password',\r\n                type: 'horizontalInput',\r\n                hideExpression: '!model.username',\r\n                templateOptions: {\r\n                    type: 'text',\r\n                    required: false,\r\n                    label: 'Password',\r\n                    help: 'Only needed if indexer requires HTTP auth for API access (rare)'\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    if (model.type == 'newznab') {\r\n        fieldset.push(\r\n            {\r\n                key: 'userAgent',\r\n                type: 'horizontalInput',\r\n                templateOptions: {\r\n                    type: 'text',\r\n                    required: false,\r\n                    label: 'User agent',\r\n                    help: 'Rarely needed. Will supercede the one in the main searching settings'\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n\r\n    fieldset.push(\r\n        {\r\n            key: 'preselect',\r\n            type: 'horizontalSwitch',\r\n            hideExpression: 'model.accessType == \"external\"',\r\n            templateOptions: {\r\n                type: 'switch',\r\n                label: 'Preselect',\r\n                help: 'Preselect this indexer on the search page'\r\n            }\r\n        }\r\n    );\r\n    if (model.type != \"jackett\") {\r\n        fieldset.push(\r\n            {\r\n                key: 'accessType',\r\n                type: 'horizontalSelect',\r\n                templateOptions: {\r\n                    label: 'Enable for...',\r\n                    options: [\r\n                        {name: 'Internal searches only', value: 'internal'},\r\n                        {name: 'API searches only', value: 'external'},\r\n                        {name: 'Internal and API searches', value: 'both'}\r\n                    ]\r\n                }\r\n            }\r\n        );\r\n    }\r\n    if (model.type != \"anizb\") {\r\n        fieldset.push(\r\n            {\r\n                key: 'categories',\r\n                type: 'horizontalMultiselect',\r\n                templateOptions: {\r\n                    label: 'Enable for...',\r\n                    help: 'You can decide that this indexer should only be used for certain categories',\r\n                    options: [\r\n                        {\r\n                            id: \"movies\",\r\n                            label: \"Movies\"\r\n                        },\r\n                        {\r\n                            id: \"movieshd\",\r\n                            label: \"Movies HD\"\r\n                        },\r\n                        {\r\n                            id: \"moviessd\",\r\n                            label: \"Movies SD\"\r\n                        },\r\n                        {\r\n                            id: \"tv\",\r\n                            label: \"TV\"\r\n                        },\r\n                        {\r\n                            id: \"tvhd\",\r\n                            label: \"TV HD\"\r\n                        },\r\n                        {\r\n                            id: \"tvsd\",\r\n                            label: \"TV SD\"\r\n                        },\r\n                        {\r\n                            id: \"anime\",\r\n                            label: \"Anime\"\r\n                        },\r\n                        {\r\n                            id: \"audio\",\r\n                            label: \"Audio\"\r\n                        },\r\n                        {\r\n                            id: \"flac\",\r\n                            label: \"Audio FLAC\"\r\n                        },\r\n                        {\r\n                            id: \"mp3\",\r\n                            label: \"Audio MP3\"\r\n                        },\r\n                        {\r\n                            id: \"audiobook\",\r\n                            label: \"Audiobook\"\r\n                        },\r\n                        {\r\n                            id: \"console\",\r\n                            label: \"Console\"\r\n                        },\r\n                        {\r\n                            id: \"pc\",\r\n                            label: \"PC\"\r\n                        },\r\n                        {\r\n                            id: \"xxx\",\r\n                            label: \"XXX\"\r\n                        },\r\n                        {\r\n                            id: \"ebook\",\r\n                            label: \"Ebook\"\r\n                        },\r\n                        {\r\n                            id: \"comic\",\r\n                            label: \"Comic\"\r\n                        }],\r\n                    getPlaceholder: function () {\r\n                        return \"All categories\";\r\n                    }\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    if (model.type == 'newznab') {\r\n        fieldset.push(\r\n            {\r\n                key: 'search_ids',\r\n                type: 'horizontalMultiselect',\r\n                templateOptions: {\r\n                    label: 'Search IDs',\r\n                    options: [\r\n                        {label: 'TVDB', id: 'tvdbid'},\r\n                        {label: 'TVRage', id: 'rid'},\r\n                        {label: 'IMDB', id: 'imdbid'},\r\n                        {label: 'Trakt', id: 'traktid'},\r\n                        {label: 'TVMaze', id: 'tvmazeid'},\r\n                        {label: 'TMDB', id: 'tmdbid'}\r\n                    ],\r\n                    getPlaceholder: function (model) {\r\n                        if (angular.isUndefined(model)) {\r\n                            return \"Unknown\";\r\n                        }\r\n                        return \"None\";\r\n                    }\r\n                }\r\n            }\r\n        );\r\n    }\r\n    if (model.type == 'newznab' || model.type == 'jackett') {\r\n        fieldset.push(\r\n            {\r\n                key: 'searchTypes',\r\n                type: 'horizontalMultiselect',\r\n                templateOptions: {\r\n                    label: 'Search types',\r\n                    options: [\r\n                        {label: 'Movies', id: 'movie'},\r\n                        {label: 'TV', id: 'tvsearch'},\r\n                        {label: 'Ebooks', id: 'book'},\r\n                        {label: 'Audio', id: 'audio'}\r\n                    ],\r\n                    getPlaceholder: function (model) {\r\n                        if (angular.isUndefined(model)) {\r\n                            return \"Unknown\";\r\n                        }\r\n                        return \"None\";\r\n                    }\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    if (model.type == 'newznab' || model.type == 'jackett') {\r\n        fieldset.push(\r\n            {\r\n                type: 'horizontalCheckCaps',\r\n                hideExpression: '!model.host || !model.apikey || !model.name',\r\n                templateOptions: {\r\n                    label: 'Check capabilities',\r\n                    help: 'Find out what search types the indexer supports. Done automatically for new indexers.'\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    if (model.type == 'nzbindex') {\r\n        fieldset.push(\r\n            {\r\n                key: 'generalMinSize',\r\n                type: 'horizontalInput',\r\n                templateOptions: {\r\n                    type: 'number',\r\n                    label: 'Min size',\r\n                    help: 'NZBIndex returns a lot of crap with small file sizes. Set this value and all smaller results will be filtered out no matter the category'\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    return fieldset;\r\n}\r\n\r\n\r\nfunction getDownloaderBoxFields(model, parentModel, isInitial) {\r\n    var fieldset = [];\r\n\r\n    fieldset = _.union(fieldset, [\r\n        {\r\n            key: 'enabled',\r\n            type: 'horizontalSwitch',\r\n            templateOptions: {\r\n                type: 'switch',\r\n                label: 'Enabled'\r\n            }\r\n        },\r\n        {\r\n            key: 'name',\r\n            type: 'horizontalInput',\r\n            templateOptions: {\r\n                type: 'text',\r\n                label: 'Name',\r\n                required: true\r\n            },\r\n            validators: {\r\n                uniqueName: {\r\n                    expression: function (viewValue) {\r\n                        if (isInitial || viewValue != model.name) {\r\n                            return _.pluck(parentModel, \"name\").indexOf(viewValue) == -1;\r\n                        }\r\n                        return true;\r\n                    },\r\n                    message: '\"Downloader \\\\\"\" + $viewValue + \"\\\\\" already exists\"'\r\n                }\r\n            }\r\n\r\n        }]);\r\n\r\n    if (model.type == \"nzbget\") {\r\n        fieldset = _.union(fieldset, [{\r\n            key: 'host',\r\n            type: 'horizontalInput',\r\n            templateOptions: {\r\n                type: 'text',\r\n                label: 'Host',\r\n                required: true\r\n            },\r\n            watcher: {\r\n                listener: function (field, newValue, oldValue, scope) {\r\n                    if (newValue != oldValue) {\r\n                        scope.$parent.needsConnectionTest = true;\r\n                    }\r\n                }\r\n            }\r\n\r\n        },\r\n            {\r\n                key: 'port',\r\n                type: 'horizontalInput',\r\n                templateOptions: {\r\n                    type: 'number',\r\n                    label: 'Port',\r\n                    placeholder: '5050',\r\n                    required: true\r\n                },\r\n                watcher: {\r\n                    listener: function (field, newValue, oldValue, scope) {\r\n                        if (newValue != oldValue) {\r\n                            scope.$parent.needsConnectionTest = true;\r\n                        }\r\n                    }\r\n                }\r\n            }, {\r\n                key: 'ssl',\r\n                type: 'horizontalSwitch',\r\n                templateOptions: {\r\n                    type: 'switch',\r\n                    label: 'Use SSL'\r\n                }\r\n            }]);\r\n    } else if (model.type == \"sabnzbd\") {\r\n        fieldset.push({\r\n            key: 'url',\r\n            type: 'horizontalInput',\r\n            templateOptions: {\r\n                type: 'text',\r\n                label: 'URL',\r\n                required: true\r\n            },\r\n            watcher: {\r\n                listener: function (field, newValue, oldValue, scope) {\r\n                    if (newValue != oldValue) {\r\n                        scope.$parent.needsConnectionTest = true;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    fieldset = _.union(fieldset, [\r\n        {\r\n            key: 'username',\r\n            type: 'horizontalInput',\r\n            templateOptions: {\r\n                type: 'text',\r\n                label: 'Username',\r\n                help: model.type == \"nzbget\" ? 'Only alphanumeric usernames are guaranteed to work' : \"\"\r\n            },\r\n            watcher: {\r\n                listener: function (field, newValue, oldValue, scope) {\r\n                    if (newValue != oldValue) {\r\n                        scope.$parent.needsConnectionTest = true;\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        {\r\n            key: 'password',\r\n            type: 'horizontalInput',\r\n            templateOptions: {\r\n                type: 'password',\r\n                label: 'Password',\r\n                help: model.type == \"nzbget\" ? 'See username' : \"\"\r\n            },\r\n            watcher: {\r\n                listener: function (field, newValue, oldValue, scope) {\r\n                    if (newValue != oldValue) {\r\n                        scope.$parent.needsConnectionTest = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    ]);\r\n\r\n\r\n    if (model.type == \"sabnzbd\") {\r\n        fieldset.push({\r\n            key: 'apikey',\r\n            type: 'horizontalInput',\r\n            templateOptions: {\r\n                type: 'text',\r\n                label: 'API Key'\r\n            },\r\n            watcher: {\r\n                listener: function (field, newValue, oldValue, scope) {\r\n                    if (newValue != oldValue) {\r\n                        scope.$parent.needsConnectionTest = true;\r\n                    }\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    fieldset = _.union(fieldset, [\r\n        {\r\n            key: 'defaultCategory',\r\n            type: 'horizontalInput',\r\n            templateOptions: {\r\n                type: 'text',\r\n                label: 'Default category',\r\n                help: 'When adding NZBs this category will be used instead of asking for the category. Write \"No category\" to let the downloader decide.',\r\n                placeholder: 'Ask when downloading'\r\n            }\r\n        },\r\n        {\r\n            key: 'nzbaccesstype',\r\n            type: 'horizontalSelect',\r\n            templateOptions: {\r\n                type: 'select',\r\n                label: 'NZB access type',\r\n                options: [\r\n                    {name: 'Proxy NZBs from indexer', value: 'serve'},\r\n                    {name: 'Redirect to the indexer', value: 'redirect'}\r\n                ],\r\n                help: \"How external access to NZBs is provided. Redirecting is recommended.\"\r\n            }\r\n        },\r\n        {\r\n            key: 'nzbAddingType',\r\n            type: 'horizontalSelect',\r\n            templateOptions: {\r\n                type: 'select',\r\n                label: 'NZB adding type',\r\n                options: [\r\n                    {name: 'Send link', value: 'link'},\r\n                    {name: 'Upload NZB', value: 'nzb'}\r\n                ],\r\n                help: \"How NZBs are added to the downloader, either by sending a link to the NZB or by uploading the NZB data\"\r\n            }\r\n        },\r\n        {\r\n            key: 'iconCssClass',\r\n            type: 'horizontalInput',\r\n            templateOptions: {\r\n                type: 'text',\r\n                label: 'Icon CSS class',\r\n                help: 'Copy an icon name from http://fontawesome.io/examples/ (e.g. \"film\")',\r\n                placeholder: 'Default'\r\n            }\r\n        }\r\n    ]);\r\n\r\n    return fieldset;\r\n}\r\n\r\nfunction getDownloaderPresets() {\r\n    return [[\r\n        {\r\n            host: \"127.0.0.1\",\r\n            name: \"NZBGet\",\r\n            password: \"tegbzn6789x\",\r\n            port: 6789,\r\n            ssl: false,\r\n            type: \"nzbget\",\r\n            username: \"nzbgetx\",\r\n            nzbAddingType: \"link\",\r\n            nzbaccesstype: \"redirect\",\r\n            iconCssClass: \"\",\r\n            downloadType: \"nzb\"\r\n        },\r\n        {\r\n            url: \"http://localhost:8086\",\r\n            type: \"sabnzbd\",\r\n            name: \"SABnzbd\",\r\n            nzbAddingType: \"link\",\r\n            nzbaccesstype: \"redirect\",\r\n            iconCssClass: \"\",\r\n            downloadType: \"nzb\",\r\n            username: null,\r\n            password: null\r\n        }\r\n    ]];\r\n}\r\n\r\n\r\nfunction handleConnectionCheckFail(ModalService, data, model, whatFailed, deferred) {\r\n    var message;\r\n    var yesText;\r\n    if (data.checked) {\r\n        message = \"The connection to the \" + whatFailed + \" failed: \" + data.message + \"<br>Do you want to add it anyway?\";\r\n        yesText = \"I know what I'm doing\";\r\n    } else {\r\n        message = \"The connection to the \" + whatFailed + \" could not be tested, sorry\";\r\n        yesText = \"I'll risk it\";\r\n    }\r\n    ModalService.open(\"Connection check failed\", message, {\r\n        yes: {\r\n            onYes: function () {\r\n                deferred.resolve();\r\n            },\r\n            text: yesText\r\n        },\r\n        no: {\r\n            onNo: function () {\r\n                model.enabled = false;\r\n                deferred.resolve();\r\n            },\r\n            text: \"Add it, but disabled\"\r\n        },\r\n        cancel: {\r\n            onCancel: function () {\r\n                deferred.reject();\r\n            },\r\n            text: \"Aahh, let me try again\"\r\n        }\r\n    });\r\n\r\n}\r\n\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .factory('IndexerCheckBeforeCloseService', IndexerCheckBeforeCloseService);\r\n\r\nfunction IndexerCheckBeforeCloseService($q, ModalService, ConfigBoxService, blockUI, growl) {\r\n\r\n    return {\r\n        check: checkBeforeClose\r\n    };\r\n\r\n    function checkBeforeClose(scope, model) {\r\n        var deferred = $q.defer();\r\n        if (!scope.needsConnectionTest) {\r\n            checkCaps(scope, model).then(function () {\r\n                deferred.resolve();\r\n            }, function () {\r\n                deferred.reject();\r\n            });\r\n        } else {\r\n            blockUI.start(\"Testing connection...\");\r\n            scope.spinnerActive = true;\r\n            var url = \"internalapi/test_newznab\";\r\n            var settings = {host: model.host, apikey: model.apikey};\r\n            if (angular.isDefined(model.username)) {\r\n                settings[\"username\"] = model.username;\r\n                settings[\"password\"] = model.password;\r\n            }\r\n            ConfigBoxService.checkConnection(url, JSON.stringify(settings)).then(function () {\r\n                    checkCaps(scope, model).then(function () {\r\n                        blockUI.reset();\r\n                        scope.spinnerActive = false;\r\n                        growl.info(\"Connection to the indexer tested successfully\");\r\n                        deferred.resolve();\r\n                    }, function () {\r\n                        blockUI.reset();\r\n                        scope.spinnerActive = false;\r\n                        deferred.reject();\r\n                    });\r\n                },\r\n                function (data) {\r\n                    blockUI.reset();\r\n                    handleConnectionCheckFail(ModalService, data, model, \"indexer\", deferred);\r\n                }).finally(function () {\r\n                scope.spinnerActive = false;\r\n                blockUI.reset();\r\n            });\r\n        }\r\n        return deferred.promise;\r\n\r\n    }\r\n\r\n    function checkCaps(scope, model) {\r\n        var deferred = $q.defer();\r\n        var url = \"internalapi/test_caps\";\r\n        var settings = {indexer: model.name, apikey: model.apikey, host: model.host};\r\n        if (angular.isDefined(model.username)) {\r\n            settings[\"username\"] = model.username;\r\n            settings[\"password\"] = model.password;\r\n        }\r\n        if (angular.isUndefined(model.search_ids) || angular.isUndefined(model.searchTypes)) {\r\n\r\n            blockUI.start(\"New indexer found. Testing its capabilities. This may take a bit...\");\r\n            ConfigBoxService.checkCaps(url, JSON.stringify(settings), model).then(\r\n                function (data, model) {\r\n                    blockUI.reset();\r\n                    scope.spinnerActive = false;\r\n                    growl.info(\"Successfully tested capabilites of indexer\");\r\n                    deferred.resolve();\r\n                },\r\n                function () {\r\n                    blockUI.reset();\r\n                    scope.spinnerActive = false;\r\n                    model.search_ids = [];\r\n                    model.searchTypes = [];\r\n                    ModalService.open(\"Error testing capabilities\", \"The capabilities of the indexer could not be checked. The indexer won't be used for ID based searches (IMDB, TVDB, etc.). You may repeat the check manually at any time.\");\r\n                    deferred.resolve();\r\n                }).finally(\r\n                function () {\r\n                    scope.spinnerActive = false;\r\n                })\r\n        } else {\r\n            deferred.resolve();\r\n        }\r\n        return deferred.promise;\r\n\r\n    }\r\n}\r\nIndexerCheckBeforeCloseService.$inject = [\"$q\", \"ModalService\", \"ConfigBoxService\", \"blockUI\", \"growl\"];\r\n\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .factory('DownloaderCheckBeforeCloseService', DownloaderCheckBeforeCloseService);\r\n\r\nfunction DownloaderCheckBeforeCloseService($q, ConfigBoxService, growl, ModalService, blockUI) {\r\n\r\n    return {\r\n        check: checkBeforeClose\r\n    };\r\n\r\n    function checkBeforeClose(scope, model) {\r\n        var deferred = $q.defer();\r\n        if (!scope.isInitial && !scope.needsConnectionTest) {\r\n            deferred.resolve();\r\n        } else {\r\n            scope.spinnerActive = true;\r\n            blockUI.start(\"Testing connection...\");\r\n            var url = \"internalapi/test_downloader\";\r\n            ConfigBoxService.checkConnection(url, JSON.stringify(model)).then(function () {\r\n                    blockUI.reset();\r\n                    scope.spinnerActive = false;\r\n                    growl.info(\"Connection to the downloader tested successfully\");\r\n                    deferred.resolve();\r\n                },\r\n                function (data) {\r\n                    blockUI.reset();\r\n                    scope.spinnerActive = false;\r\n                    handleConnectionCheckFail(ModalService, data, model, \"downloader\", deferred);\r\n                }).finally(function () {\r\n                scope.spinnerActive = false;\r\n                blockUI.reset();\r\n            });\r\n        }\r\n        return deferred.promise;\r\n    }\r\n\r\n}\r\nDownloaderCheckBeforeCloseService.$inject = [\"$q\", \"ConfigBoxService\", \"growl\", \"ModalService\", \"blockUI\"];\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .factory('ConfigModel', function () {\r\n        return {};\r\n    });\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .factory('ConfigWatcher', function () {\r\n        var $scope;\r\n\r\n        return {\r\n            watch: watch\r\n        };\r\n\r\n        function watch(scope) {\r\n            $scope = scope;\r\n            $scope.$watchGroup([\"config.main.host\"], function () {\r\n            }, true);\r\n        }\r\n    });\r\n\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .controller('ConfigController', ConfigController);\r\n\r\nfunction ConfigController($scope, $http, activeTab, ConfigService, config, DownloaderCategoriesService, ConfigFields, ConfigModel, ModalService, RestartService, $state, growl) {\r\n    $scope.config = config;\r\n    $scope.submit = submit;\r\n    $scope.activeTab = activeTab;\r\n\r\n    $scope.restartRequired = false;\r\n    $scope.ignoreSaveNeeded = false;\r\n\r\n    ConfigFields.setRestartWatcher(function () {\r\n        $scope.restartRequired = true;\r\n    });\r\n\r\n\r\n    function submit() {\r\n        if ($scope.form.$valid) {\r\n\r\n            ConfigService.set($scope.config);\r\n            $scope.form.$setPristine();\r\n            DownloaderCategoriesService.invalidate();\r\n            if ($scope.restartRequired) {\r\n                ModalService.open(\"Restart required\", \"The changes you have made may require a restart to be effective.<br>Do you want to restart now?\", {\r\n                    yes: {\r\n                        onYes: function () {\r\n                            RestartService.restart();\r\n                        }\r\n                    },\r\n                    no: {\r\n                        onNo: function () {\r\n                            $scope.restartRequired = false;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        } else {\r\n            growl.error(\"Config invalid. Please check your settings.\");\r\n\r\n            //Ridiculously hacky way to make the error messages appear\r\n            try {\r\n                if (angular.isDefined(form.$error.required)) {\r\n                    _.each(form.$error.required, function (item) {\r\n                        if (angular.isDefined(item.$error.required)) {\r\n                            _.each(item.$error.required, function (item2) {\r\n                                item2.$setTouched();\r\n                            });\r\n                        }\r\n                    });\r\n                }\r\n                angular.forEach($scope.form.$error.required, function (field) {\r\n                    field.$setTouched();\r\n                });\r\n            } catch (err) {\r\n                //\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    ConfigModel = config;\r\n\r\n    $scope.fields = ConfigFields.getFields($scope.config);\r\n\r\n    $scope.allTabs = [\r\n        {\r\n            active: false,\r\n            state: 'root.config.main',\r\n            name: 'Main',\r\n            model: ConfigModel.main,\r\n            fields: $scope.fields.main,\r\n            options: {}\r\n        },\r\n        {\r\n            active: false,\r\n            state: 'root.config.auth',\r\n            name: 'Authorization',\r\n            model: ConfigModel.auth,\r\n            fields: $scope.fields.auth,\r\n            options: {}\r\n        },\r\n        {\r\n            active: false,\r\n            state: 'root.config.searching',\r\n            name: 'Searching',\r\n            model: ConfigModel.searching,\r\n            fields: $scope.fields.searching,\r\n            options: {}\r\n        },\r\n        {\r\n            active: false,\r\n            state: 'root.config.categories',\r\n            name: 'Categories',\r\n            model: ConfigModel.categories,\r\n            fields: $scope.fields.categories,\r\n            options: {}\r\n        },\r\n        {\r\n            active: false,\r\n            state: 'root.config.downloader',\r\n            name: 'Downloaders',\r\n            model: ConfigModel.downloaders,\r\n            fields: $scope.fields.downloaders,\r\n            options: {}\r\n        },\r\n        {\r\n            active: false,\r\n            state: 'root.config.indexers',\r\n            name: 'Indexers',\r\n            model: ConfigModel.indexers,\r\n            fields: $scope.fields.indexers,\r\n            options: {}\r\n        }\r\n    ];\r\n\r\n    $scope.isSavingNeeded = function () {\r\n        return $scope.form.$dirty && $scope.form.$valid && !$scope.ignoreSaveNeeded;\r\n    };\r\n\r\n    $scope.goToConfigState = function (index) {\r\n        $state.go($scope.allTabs[index].state, {activeTab: index}, {inherit: false, notify: true, reload: true});\r\n    };\r\n\r\n    $scope.help = function () {\r\n        var tabName = $scope.allTabs[$scope.activeTab].name;\r\n        $http.get(\"internalapi/gethelp\", {params: {id: tabName}}).then(function (result) {\r\n                var html = '<span style=\"text-align: left;\">' + result.data + \"</span>\";\r\n                ModalService.open(tabName + \" - Help\", html, {}, \"lg\");\r\n            },\r\n            function () {\r\n                growl.error(\"Error while loading help\")\r\n            })\r\n    };\r\n\r\n    $scope.$on('$stateChangeStart',\r\n        function (event, toState, toParams, fromState, fromParams) {\r\n            if ($scope.isSavingNeeded()) {\r\n                event.preventDefault();\r\n                ModalService.open(\"Unsaved changed\", \"Do you want to save before leaving?\", {\r\n                    yes: {\r\n                        onYes: function () {\r\n                            $scope.submit();\r\n                            $state.go(toState);\r\n                        },\r\n                        text: \"Yes\"\r\n                    },\r\n                    no: {\r\n                        onNo: function () {\r\n                            $scope.ignoreSaveNeeded = true;\r\n                            $scope.allTabs[$scope.activeTab].options.resetModel();\r\n                            $state.go(toState);\r\n                        },\r\n                        text: \"No\"\r\n                    },\r\n                    cancel: {\r\n                        onCancel: function () {\r\n                            event.preventDefault();\r\n                        },\r\n                        text: \"Cancel\"\r\n                    }\r\n                });\r\n            }\r\n        })\r\n}\r\nConfigController.$inject = [\"$scope\", \"$http\", \"activeTab\", \"ConfigService\", \"config\", \"DownloaderCategoriesService\", \"ConfigFields\", \"ConfigModel\", \"ModalService\", \"RestartService\", \"$state\", \"growl\"];\r\n\r\n\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .factory('CategoriesService', CategoriesService);\r\n\r\nfunction CategoriesService(ConfigService) {\r\n\r\n    return {\r\n        getByName: getByName,\r\n        getAll: getAll,\r\n        getDefault: getDefault\r\n    };\r\n\r\n\r\n    function getByName(name) {\r\n        for (var category in ConfigService.getSafe().categories) {\r\n            category = ConfigService.getSafe().categories[category];\r\n            if (category.name == name || category.pretty == name) {\r\n                return category;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function getAll() {\r\n        return ConfigService.getSafe().categories;\r\n    }\r\n    \r\n    function getDefault() {\r\n        return getAll()[1];\r\n    }\r\n\r\n}\r\nCategoriesService.$inject = [\"ConfigService\"];","angular\r\n    .module('nzbhydraApp')\r\n    .factory('BackupService', BackupService);\r\n\r\nfunction BackupService($http) {\r\n\r\n    return {\r\n        getBackupsList: getBackupsList,\r\n        restoreFromFile: restoreFromFile\r\n    };\r\n    \r\n\r\n    function getBackupsList() {\r\n        return $http.get('internalapi/getbackups').then(function (data) {\r\n            return data.data.backups;\r\n        });\r\n    }\r\n\r\n    function restoreFromFile(filename) {\r\n        return $http.get('internalapi/restorefrombackupfile', {params:{filename: filename}}).then(function (response) {\r\n            return response;\r\n        });\r\n    }\r\n\r\n}\r\nBackupService.$inject = [\"$http\"];","var nzbhydraapp = angular.module('nzbhydraApp', ['angular-loading-bar', 'cgBusy', 'ui.bootstrap', 'ipCookie', 'angular-growl', 'angular.filter', 'filters', 'ui.router', 'blockUI', 'mgcrea.ngStrap', 'angularUtils.directives.dirPagination', 'nvd3', 'formly', 'formlyBootstrap', 'frapontillo.bootstrap-switch', 'ui.select', 'ngSanitize', 'checklist-model', 'ngAria', 'ngMessages', 'ui.router.title', 'LocalStorageModule', 'angular.filter', 'ngFileUpload', 'ngCookies']);\r\n\r\nangular.module('nzbhydraApp').config([\"$stateProvider\", \"$urlRouterProvider\", \"$locationProvider\", \"blockUIConfig\", \"$urlMatcherFactoryProvider\", \"localStorageServiceProvider\", \"bootstrapped\", function ($stateProvider, $urlRouterProvider, $locationProvider, blockUIConfig, $urlMatcherFactoryProvider, localStorageServiceProvider, bootstrapped) {\r\n\r\n    blockUIConfig.autoBlock = false;\r\n    $urlMatcherFactoryProvider.strictMode(false);\r\n\r\n    $urlRouterProvider.otherwise(\"/\");\r\n\r\n\r\n    $stateProvider\r\n        .state('root', {\r\n            url: '',\r\n            abstract: true,\r\n            resolve: {\r\n                //loginRequired: loginRequired\r\n            },\r\n            views: {\r\n                'header': {\r\n                    templateUrl: 'static/html/states/header.html',\r\n                    controller: 'HeaderController'\r\n                },\r\n                'footer': {\r\n                    templateUrl: 'footer.html'\r\n                }\r\n            }\r\n        })\r\n        .state(\"root.config\", {\r\n            url: \"/config\",\r\n            views: {},\r\n            abstract: true\r\n        })\r\n        .state(\"root.config.main\", {\r\n            url: \"/main\",\r\n            views: {\r\n                'container@': {\r\n                    templateUrl: \"static/html/states/config.html\",\r\n                    controller: \"ConfigController\",\r\n                    controllerAs: 'ctrl',\r\n                    resolve: {\r\n                        loginRequired: ['$q', '$timeout', '$state', 'HydraAuthService', function ($q, $timeout, $state, HydraAuthService) {\r\n                            return loginRequired($q, $timeout, $state, HydraAuthService, \"admin\")\r\n                        }],\r\n                        config: ['loginRequired', 'ConfigService', function (loginRequired, ConfigService) {\r\n                            return ConfigService.get();\r\n                        }],\r\n                        safeConfig: ['loginRequired', 'ConfigService', function (loginRequired, ConfigService) {\r\n                            return ConfigService.getSafe();\r\n                        }],\r\n                        activeTab: [function () {\r\n                            return 0;\r\n                        }],\r\n                        $title: [\"$stateParams\", function ($stateParams) {\r\n                            return \"Config (Main)\"\r\n                        }]\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        .state(\"root.config.auth\", {\r\n            url: \"/auth\",\r\n            views: {\r\n                'container@': {\r\n                    templateUrl: \"static/html/states/config.html\",\r\n                    controller: \"ConfigController\",\r\n                    resolve: {\r\n                        loginRequired: ['$q', '$timeout', '$state', 'HydraAuthService', function ($q, $timeout, $state, HydraAuthService) {\r\n                            return loginRequired($q, $timeout, $state, HydraAuthService, \"admin\")\r\n                        }],\r\n                        config: ['loginRequired', 'ConfigService', function (loginRequired, ConfigService) {\r\n                            return ConfigService.get();\r\n                        }],\r\n                        safeConfig: ['loginRequired', 'ConfigService', function (loginRequired, ConfigService) {\r\n                            return ConfigService.getSafe();\r\n                        }],\r\n                        activeTab: [function () {\r\n                            return 1;\r\n                        }],\r\n                        $title: [\"$stateParams\", function ($stateParams) {\r\n                            return \"Config (Auth)\"\r\n                        }]\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        .state(\"root.config.searching\", {\r\n            url: \"/searching\",\r\n            views: {\r\n                'container@': {\r\n                    templateUrl: \"static/html/states/config.html\",\r\n                    controller: \"ConfigController\",\r\n                    resolve: {\r\n                        loginRequired: ['$q', '$timeout', '$state', 'HydraAuthService', function ($q, $timeout, $state, HydraAuthService) {\r\n                            return loginRequired($q, $timeout, $state, HydraAuthService, \"admin\")\r\n                        }],\r\n                        config: ['loginRequired', 'ConfigService', function (loginRequired, ConfigService) {\r\n                            return ConfigService.get();\r\n                        }],\r\n                        safeConfig: ['loginRequired', 'ConfigService', function (loginRequired, ConfigService) {\r\n                            return ConfigService.getSafe();\r\n                        }],\r\n                        activeTab: [function () {\r\n                            return 2;\r\n                        }],\r\n                        $title: [\"$stateParams\", function ($stateParams) {\r\n                            return \"Config (Searching)\"\r\n                        }]\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        .state(\"root.config.categories\", {\r\n            url: \"/categories\",\r\n            views: {\r\n                'container@': {\r\n                    templateUrl: \"static/html/states/config.html\",\r\n                    controller: \"ConfigController\",\r\n                    resolve: {\r\n                        loginRequired: ['$q', '$timeout', '$state', 'HydraAuthService', function ($q, $timeout, $state, HydraAuthService) {\r\n                            return loginRequired($q, $timeout, $state, HydraAuthService, \"admin\")\r\n                        }],\r\n                        config: ['loginRequired', 'ConfigService', function (loginRequired, ConfigService) {\r\n                            return ConfigService.get();\r\n                        }],\r\n                        safeConfig: ['loginRequired', 'ConfigService', function (loginRequired, ConfigService) {\r\n                            return ConfigService.getSafe();\r\n                        }],\r\n                        activeTab: [function () {\r\n                            return 3;\r\n                        }],\r\n                        $title: [\"$stateParams\", function ($stateParams) {\r\n                            return \"Config (Categories)\"\r\n                        }]\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        .state(\"root.config.downloader\", {\r\n            url: \"/downloader\",\r\n            views: {\r\n                'container@': {\r\n                    templateUrl: \"static/html/states/config.html\",\r\n                    controller: \"ConfigController\",\r\n                    resolve: {\r\n                        loginRequired: ['$q', '$timeout', '$state', 'HydraAuthService', function ($q, $timeout, $state, HydraAuthService) {\r\n                            return loginRequired($q, $timeout, $state, HydraAuthService, \"admin\")\r\n                        }],\r\n                        config: ['loginRequired', 'ConfigService', function (loginRequired, ConfigService) {\r\n                            return ConfigService.get();\r\n                        }],\r\n                        safeConfig: ['loginRequired', 'ConfigService', function (loginRequired, ConfigService) {\r\n                            return ConfigService.getSafe();\r\n                        }],\r\n                        activeTab: [function () {\r\n                            return 4;\r\n                        }],\r\n                        $title: [\"$stateParams\", function ($stateParams) {\r\n                            return \"Config (Downloader)\"\r\n                        }]\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        .state(\"root.config.indexers\", {\r\n            url: \"/indexers\",\r\n            views: {\r\n                'container@': {\r\n                    templateUrl: \"static/html/states/config.html\",\r\n                    controller: \"ConfigController\",\r\n                    resolve: {\r\n                        loginRequired: ['$q', '$timeout', '$state', 'HydraAuthService', function ($q, $timeout, $state, HydraAuthService) {\r\n                            return loginRequired($q, $timeout, $state, HydraAuthService, \"admin\")\r\n                        }],\r\n                        config: ['loginRequired', 'ConfigService', function (loginRequired, ConfigService) {\r\n                            return ConfigService.get();\r\n                        }],\r\n                        safeConfig: ['loginRequired', 'ConfigService', function (loginRequired, ConfigService) {\r\n                            return ConfigService.getSafe();\r\n                        }],\r\n                        activeTab: [function () {\r\n                            return 5;\r\n                        }],\r\n                        $title: [\"$stateParams\", function ($stateParams) {\r\n                            return \"Config (Indexers)\"\r\n                        }]\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        .state(\"root.stats\", {\r\n            url: \"/stats\",\r\n            abstract: true,\r\n            views: {\r\n                'container@': {\r\n                    templateUrl: \"static/html/states/stats.html\",\r\n                    controller: [\"$scope\", \"$state\", function ($scope, $state) {\r\n                        $scope.$state = $state;\r\n                    }],\r\n                    resolve: {\r\n                        loginRequired: ['$q', '$timeout', '$state', 'HydraAuthService', function ($q, $timeout, $state, HydraAuthService) {\r\n                            return loginRequired($q, $timeout, $state, HydraAuthService, \"stats\")\r\n                        }],\r\n                        $title: [\"$stateParams\", function ($stateParams) {\r\n                            return \"Stats\"\r\n                        }]\r\n                    }\r\n\r\n                }\r\n            }\r\n        })\r\n        .state(\"root.stats.main\", {\r\n            url: \"/stats\",\r\n            views: {\r\n                'stats@root.stats': {\r\n                    templateUrl: \"static/html/states/main-stats.html\",\r\n                    controller: \"StatsController\",\r\n                    resolve: {\r\n                        loginRequired: ['$q', '$timeout', '$state', 'HydraAuthService', function ($q, $timeout, $state, HydraAuthService) {\r\n                            return loginRequired($q, $timeout, $state, HydraAuthService, \"stats\")\r\n                        }],\r\n                        $title: [\"$stateParams\", function ($stateParams) {\r\n                            return \"Stats\"\r\n                        }]\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        .state(\"root.stats.indexers\", {\r\n            url: \"/indexers\",\r\n            views: {\r\n                'stats@root.stats': {\r\n                    templateUrl: \"static/html/states/indexer-statuses.html\",\r\n                    controller: IndexerStatusesController,\r\n                    resolve: {\r\n                        loginRequired: ['$q', '$timeout', '$state', 'HydraAuthService', function ($q, $timeout, $state, HydraAuthService) {\r\n                            return loginRequired($q, $timeout, $state, HydraAuthService, \"stats\")\r\n                        }],\r\n                        statuses: [\"$http\", function ($http) {\r\n                            return $http.get(\"internalapi/getindexerstatuses\").success(function (response) {\r\n                                return response.indexerStatuses;\r\n                            });\r\n                        }],\r\n                        $title: [\"$stateParams\", function ($stateParams) {\r\n                            return \"Stats (Indexers)\"\r\n                        }]\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        .state(\"root.stats.searches\", {\r\n            url: \"/searches\",\r\n            views: {\r\n                'stats@root.stats': {\r\n                    templateUrl: \"static/html/states/search-history.html\",\r\n                    controller: SearchHistoryController,\r\n                    resolve: {\r\n                        loginRequired: ['$q', '$timeout', '$state', 'HydraAuthService', function ($q, $timeout, $state, HydraAuthService) {\r\n                            return loginRequired($q, $timeout, $state, HydraAuthService, \"stats\")\r\n                        }],\r\n                        history: ['loginRequired', 'SearchHistoryService', function (loginRequired, SearchHistoryService) {\r\n                            return SearchHistoryService.getSearchHistory();\r\n                        }],\r\n                        $title: [\"$stateParams\", function ($stateParams) {\r\n                            return \"Stats (Searches)\"\r\n                        }]\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        .state(\"root.stats.downloads\", {\r\n            url: \"/downloads\",\r\n            views: {\r\n                'stats@root.stats': {\r\n                    templateUrl: 'static/html/states/download-history.html',\r\n                    controller: DownloadHistoryController,\r\n                    resolve: {\r\n                        loginRequired: ['$q', '$timeout', '$state', 'HydraAuthService', function ($q, $timeout, $state, HydraAuthService) {\r\n                            return loginRequired($q, $timeout, $state, HydraAuthService, \"stats\")\r\n                        }],\r\n                        downloads: [\"StatsService\", function (StatsService) {\r\n                            return StatsService.getDownloadHistory();\r\n                        }],\r\n                        $title: [\"$stateParams\", function ($stateParams) {\r\n                            return \"Stats (Downloads)\"\r\n                        }]\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        .state(\"root.system\", {\r\n            url: \"/system\",\r\n            views: {},\r\n            abstract: true\r\n        })\r\n        .state(\"root.system.control\", {\r\n            url: \"/control\",\r\n            views: {\r\n                'container@': {\r\n                    templateUrl: \"static/html/states/system.html\",\r\n                    controller: \"SystemController\",\r\n                    resolve: {\r\n                        loginRequired: ['$q', '$timeout', '$state', 'HydraAuthService', function ($q, $timeout, $state, HydraAuthService) {\r\n                            return loginRequired($q, $timeout, $state, HydraAuthService, \"admin\")\r\n                        }],\r\n                        safeConfig: ['loginRequired', 'ConfigService', function (loginRequired, ConfigService) {\r\n                            return ConfigService.getSafe();\r\n                        }],\r\n                        askAdmin: ['loginRequired', '$http', function (loginRequired, $http) {\r\n                            return $http.get(\"internalapi/askadmin\");\r\n                        }],\r\n                        activeTab: [function () {\r\n                            return 0;\r\n                        }],\r\n                        $title: [\"$stateParams\", function ($stateParams) {\r\n                            return \"System\"\r\n                        }]\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        .state(\"root.system.updates\", {\r\n            url: \"/updates\",\r\n            views: {\r\n                'container@': {\r\n                    templateUrl: \"static/html/states/system.html\",\r\n                    controller: \"SystemController\",\r\n                    resolve: {\r\n                        loginRequired: ['$q', '$timeout', '$state', 'HydraAuthService', function ($q, $timeout, $state, HydraAuthService) {\r\n                            return loginRequired($q, $timeout, $state, HydraAuthService, \"admin\")\r\n                        }],\r\n                        safeConfig: ['loginRequired', 'ConfigService', function (loginRequired, ConfigService) {\r\n                            return ConfigService.getSafe();\r\n                        }],\r\n                        activeTab: [function () {\r\n                            return 1;\r\n                        }],\r\n                        $title: [\"$stateParams\", function ($stateParams) {\r\n                            return \"System (Updates)\"\r\n                        }]\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        .state(\"root.system.log\", {\r\n            url: \"/log\",\r\n            views: {\r\n                'container@': {\r\n                    templateUrl: \"static/html/states/system.html\",\r\n                    controller: \"SystemController\",\r\n                    resolve: {\r\n                        loginRequired: ['$q', '$timeout', '$state', 'HydraAuthService', function ($q, $timeout, $state, HydraAuthService) {\r\n                            return loginRequired($q, $timeout, $state, HydraAuthService, \"admin\")\r\n                        }],\r\n                        safeConfig: ['loginRequired', 'ConfigService', function (loginRequired, ConfigService) {\r\n                            return ConfigService.getSafe();\r\n                        }],\r\n                        activeTab: [function () {\r\n                            return 2;\r\n                        }],\r\n                        $title: [\"$stateParams\", function ($stateParams) {\r\n                            return \"System (Log)\"\r\n                        }]\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        .state(\"root.system.backup\", {\r\n            url: \"/backup\",\r\n            views: {\r\n                'container@': {\r\n                    templateUrl: \"static/html/states/system.html\",\r\n                    controller: \"SystemController\",\r\n                    resolve: {\r\n                        loginRequired: ['$q', '$timeout', '$state', 'HydraAuthService', function ($q, $timeout, $state, HydraAuthService) {\r\n                            return loginRequired($q, $timeout, $state, HydraAuthService, \"admin\")\r\n                        }],\r\n                        safeConfig: ['loginRequired', 'ConfigService', function (loginRequired, ConfigService) {\r\n                            return ConfigService.getSafe();\r\n                        }],\r\n                        activeTab: [function () {\r\n                            return 3;\r\n                        }],\r\n                        $title: [\"$stateParams\", function ($stateParams) {\r\n                            return \"System (Backup)\"\r\n                        }]\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        .state(\"root.system.bugreport\", {\r\n            url: \"/bugreport\",\r\n            views: {\r\n                'container@': {\r\n                    templateUrl: \"static/html/states/system.html\",\r\n                    controller: \"SystemController\",\r\n                    resolve: {\r\n                        loginRequired: ['$q', '$timeout', '$state', 'HydraAuthService', function ($q, $timeout, $state, HydraAuthService) {\r\n                            return loginRequired($q, $timeout, $state, HydraAuthService, \"admin\")\r\n                        }],\r\n                        safeConfig: ['loginRequired', 'ConfigService', function (loginRequired, ConfigService) {\r\n                            return ConfigService.getSafe();\r\n                        }],\r\n                        activeTab: [function () {\r\n                            return 4;\r\n                        }],\r\n                        $title: [\"$stateParams\", function ($stateParams) {\r\n                            return \"System (Bug report)\"\r\n                        }]\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        .state(\"root.system.about\", {\r\n            url: \"/about\",\r\n            views: {\r\n                'container@': {\r\n                    templateUrl: \"static/html/states/system.html\",\r\n                    controller: \"SystemController\",\r\n                    resolve: {\r\n                        loginRequired: ['$q', '$timeout', '$state', 'HydraAuthService', function ($q, $timeout, $state, HydraAuthService) {\r\n                            return loginRequired($q, $timeout, $state, HydraAuthService, \"admin\")\r\n                        }],\r\n                        safeConfig: ['loginRequired', 'ConfigService', function (loginRequired, ConfigService) {\r\n                            return ConfigService.getSafe();\r\n                        }],\r\n                        activeTab: [function () {\r\n                            return 5;\r\n                        }],\r\n                        $title: [\"$stateParams\", function ($stateParams) {\r\n                            return \"System (About)\"\r\n                        }]\r\n                    }\r\n                }\r\n            }\r\n        })\r\n\r\n        .state(\"root.search\", {\r\n            url: \"/?category&query&imdbid&tvdbid&title&season&episode&minsize&maxsize&minage&maxage&offsets&rid&mode&tmdbid&indexers\",\r\n            views: {\r\n                'container@': {\r\n                    templateUrl: \"static/html/states/search.html\",\r\n                    controller: \"SearchController\",\r\n                    resolve: {\r\n                        loginRequired: ['$q', '$timeout', '$state', 'HydraAuthService', function ($q, $timeout, $state, HydraAuthService) {\r\n                            return loginRequired($q, $timeout, $state, HydraAuthService, \"search\")\r\n                        }],\r\n                        safeConfig: ['loginRequired', 'ConfigService', function (loginRequired, ConfigService) {\r\n                            return ConfigService.getSafe();\r\n                        }],\r\n                        $title: [\"$stateParams\", function ($stateParams) {\r\n                            return \"Search\";\r\n                        }]\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        .state(\"root.search.results\", {\r\n            views: {\r\n                'results@root.search': {\r\n                    templateUrl: \"static/html/states/search-results.html\",\r\n                    controller: \"SearchResultsController\",\r\n                    controllerAs: \"srController\",\r\n                    options: {\r\n                        inherit: true\r\n                    },\r\n                    resolve: {\r\n                        loginRequired: ['$q', '$timeout', '$state', 'HydraAuthService', function ($q, $timeout, $state, HydraAuthService) {\r\n                            return loginRequired($q, $timeout, $state, HydraAuthService, \"search\")\r\n                        }],\r\n                        $title: [\"$stateParams\", function ($stateParams) {\r\n                            var title = \"Search results\";\r\n                            var details;\r\n                            if ($stateParams.title) {\r\n                                details = $stateParams.title;\r\n                            } else if ($stateParams.query) {\r\n                                details = $stateParams.query;\r\n                            }\r\n                            if (details) {\r\n                                title += \" (\" + details + \")\";\r\n                            }\r\n                            return title;\r\n                        }]\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        // .state(\"root.login\", {\r\n        //     url: \"/login\",\r\n        //     views: {\r\n        //         'container@': {\r\n        //             templateUrl: \"static/html/states/login.html\",\r\n        //             controller: \"LoginController\",\r\n        //             resolve: {\r\n        //                 loginRequired: function () {\r\n        //                     return null;\r\n        //                 },\r\n        //                 $title: function ($stateParams) {\r\n        //                     return \"Login\"\r\n        //                 }\r\n        //             }\r\n        //         }\r\n        //     }\r\n        // })\r\n    ;\r\n\r\n\r\n    $locationProvider.html5Mode(true);\r\n\r\n\r\n    function loginRequired($q, $timeout, $state, HydraAuthService, type) {\r\n        var deferred = $q.defer();\r\n        var userInfos = HydraAuthService.getUserInfos();\r\n        var allowed = false;\r\n        if (type == \"search\") {\r\n            allowed = !userInfos.searchRestricted || userInfos.maySeeSearch;\r\n        } else if (type == \"stats\") {\r\n            allowed = !userInfos.statsRestricted || userInfos.maySeeStats;\r\n        } else if (type == \"admin\") {\r\n            allowed = !userInfos.adminRestricted || userInfos.maySeeAdmin;\r\n        } else {\r\n            allowed = true;\r\n        }\r\n        if (allowed || userInfos.authType != \"form\") {\r\n            deferred.resolve();\r\n        } else {\r\n            $timeout(function () {\r\n                // This code runs after the authentication promise has been rejected.\r\n                // Go to the log-in page\r\n                $state.go(\"root.login\");\r\n            })\r\n        }\r\n        return deferred.promise;\r\n    }\r\n\r\n\r\n    //Because I don't know for what state the login is required / asked I have a function for each\r\n\r\n    function loginRequiredSearch($q, $timeout, $state, HydraAuthService) {\r\n        var deferred = $q.defer();\r\n        var userInfos = HydraAuthService.getUserInfos();\r\n        if (!userInfos.searchRestricted || userInfos.maySeeSearch || userInfos.authType != \"form\") {\r\n            deferred.resolve();\r\n        } else {\r\n            $timeout(function () {\r\n                // This code runs after the authentication promise has been rejected.\r\n                // Go to the log-in page\r\n                $state.go(\"root.login\");\r\n            })\r\n        }\r\n        return deferred.promise;\r\n    }\r\n\r\n    function loginRequiredStats($q, $timeout, $state, HydraAuthService) {\r\n        var deferred = $q.defer();\r\n\r\n        var userInfos = HydraAuthService.getUserInfos();\r\n        if (!userInfos.statsRestricted || userInfos.maySeeStats || userInfos.authType != \"form\") {\r\n            deferred.resolve();\r\n        } else {\r\n            $timeout(function () {\r\n                // This code runs after the authentication promise has been rejected.\r\n                // Go to the log-in page\r\n                $state.go(\"root.login\");\r\n            })\r\n        }\r\n        return deferred.promise;\r\n    }\r\n\r\n    function loginRequiredAdmin($q, $timeout, $state, HydraAuthService) {\r\n        var deferred = $q.defer();\r\n\r\n        var userInfos = HydraAuthService.getUserInfos();\r\n        if (!userInfos.statsRestricted || userInfos.maySeeAdmin || userInfos.authType != \"form\") {\r\n            deferred.resolve();\r\n        } else {\r\n            $timeout(function () {\r\n                // This code runs after the authentication promise has been rejected.\r\n                // Go to the log-in page\r\n                $state.go(\"root.login\");\r\n            })\r\n        }\r\n        return deferred.promise;\r\n    }\r\n\r\n    localStorageServiceProvider\r\n        .setPrefix('nzbhydra');\r\n    localStorageServiceProvider\r\n        .setNotify(true, false);\r\n}]);\r\n\r\n\r\nnzbhydraapp.config([\"paginationTemplateProvider\", function (paginationTemplateProvider) {\r\n    paginationTemplateProvider.setPath('static/html/dirPagination.tpl.html');\r\n}]);\r\n\r\nnzbhydraapp.config(['cfpLoadingBarProvider', function (cfpLoadingBarProvider) {\r\n    cfpLoadingBarProvider.latencyThreshold = 100;\r\n}]);\r\n\r\nnzbhydraapp.config(['growlProvider', function (growlProvider) {\r\n    growlProvider.globalTimeToLive(5000);\r\n    growlProvider.globalPosition('bottom-right');\r\n}]);\r\n\r\nnzbhydraapp.directive('ngEnter', function () {\r\n    return function (scope, element, attr) {\r\n        element.bind(\"keydown keypress\", function (event) {\r\n            if (event.which === 13) {\r\n                scope.$apply(function () {\r\n                    scope.$evalAsync(attr.ngEnter);\r\n                });\r\n\r\n                event.preventDefault();\r\n            }\r\n        });\r\n    };\r\n});\r\n\r\nnzbhydraapp.filter('nzblink', function () {\r\n    return function (resultItem) {\r\n        var uri = new URI(\"internalapi/getnzb\");\r\n        uri.addQuery(\"searchResultId\", resultItem.searchResultId);\r\n        return uri.toString();\r\n    }\r\n});\r\n\r\nnzbhydraapp.factory('focus', [\"$rootScope\", \"$timeout\", function ($rootScope, $timeout) {\r\n    return function (name) {\r\n        $timeout(function () {\r\n            $rootScope.$broadcast('focusOn', name);\r\n        });\r\n    }\r\n}]);\r\n\r\nnzbhydraapp.run([\"$rootScope\", function ($rootScope) {\r\n    $rootScope.$on('$stateChangeSuccess',\r\n        function (event, toState, toParams, fromState, fromParams) {\r\n            try {\r\n                $rootScope.title = toState.views[Object.keys(toState.views)[0]].resolve.$title[1](toParams);\r\n            } catch (e) {\r\n\r\n            }\r\n\r\n        });\r\n}]);\r\n\r\n\r\nnzbhydraapp.filter('unsafe', [\"$sce\", function ($sce) {\r\n    return $sce.trustAsHtml;\r\n}]);\r\n\r\nnzbhydraapp.filter('dereferer', [\"ConfigService\", function (ConfigService) {\r\n    return function (url) {\r\n        if (ConfigService.getSafe().dereferer) {\r\n            return ConfigService.getSafe().dereferer.replace(\"$s\", escape(url));\r\n        }\r\n        return url;\r\n    }\r\n}]);\r\n\r\nnzbhydraapp.config([\"$provide\", function ($provide) {\r\n    $provide.decorator(\"$exceptionHandler\", ['$delegate', '$injector', function ($delegate, $injector) {\r\n        return function (exception, cause) {\r\n            $delegate(exception, cause);\r\n            try {\r\n                console.log(exception);\r\n                var stack = exception.stack.split('\\n').map(function (line) {\r\n                    return line.trim();\r\n                });\r\n                stack = stack.join(\"\\n\");\r\n                //$injector.get(\"$http\").put(\"internalapi/logerror\", {error: stack, cause: angular.isDefined(cause) ? cause.toString() : \"No known cause\"});\r\n\r\n\r\n            } catch (e) {\r\n                console.error(\"Unable to log JS exception to server\", e);\r\n            }\r\n        };\r\n    }]);\r\n}]);\r\n\r\n_.mixin({\r\n    isNullOrEmpty: function (string) {\r\n        return (_.isUndefined(string) || _.isNull(string) || (_.isString(string) && string.length === 0))\r\n    }\r\n});\r\n\r\nnzbhydraapp.factory('sessionInjector', [\"$injector\", function ($injector) {\r\n    var sessionInjector = {\r\n        response: function (response) {\r\n            if (response.headers(\"Hydra-MaySeeAdmin\") != null) {\r\n                $injector.get(\"HydraAuthService\").setLoggedInByBasic(response.headers(\"Hydra-MaySeeStats\") == \"True\", response.headers(\"Hydra-MaySeeAdmin\") == \"True\", response.headers(\"Hydra-Username\"))\r\n            }\r\n\r\n            return response;\r\n        }\r\n    };\r\n    return sessionInjector;\r\n}]);\r\n\r\nnzbhydraapp.config(['$httpProvider', function ($httpProvider) {\r\n    $httpProvider.interceptors.push('sessionInjector');\r\n}]);\r\n\r\nnzbhydraapp.directive('autoFocus', [\"$timeout\", function ($timeout) {\r\n    return {\r\n        restrict: 'AC',\r\n        link: function (_scope, _element) {\r\n            $timeout(function () {\r\n                _element[0].focus();\r\n            }, 0);\r\n        }\r\n    };\r\n}]);\r\n\r\n\r\nnzbhydraapp.factory('focus', [\"$timeout\", \"$window\", function ($timeout, $window) {\r\n    return function (id) {\r\n        // timeout makes sure that it is invoked after any other event has been triggered.\r\n        // e.g. click events that need to run before the focus or\r\n        // inputs elements that are in a disabled state but are enabled when those events\r\n        // are triggered.\r\n        $timeout(function () {\r\n            var element = $window.document.getElementById(id);\r\n            if (element)\r\n                element.focus();\r\n        });\r\n    };\r\n}]);\r\n\r\nnzbhydraapp.directive('eventFocus', [\"focus\", function (focus) {\r\n    return function (scope, elem, attr) {\r\n        elem.on(attr.eventFocus, function () {\r\n            focus(attr.eventFocusId);\r\n        });\r\n\r\n        // Removes bound events in the element itself\r\n        // when the scope is destroyed\r\n        scope.$on('$destroy', function () {\r\n            elem.off(attr.eventFocus);\r\n        });\r\n    };\r\n}]);","angular\r\n    .module('nzbhydraApp').directive(\"keepFocus\", ['$timeout', function ($timeout) {\r\n    /*\r\n     Intended use:\r\n     <input keep-focus ng-model='someModel.value'></input>\r\n     */\r\n    return {\r\n        restrict: 'A',\r\n        require: 'ngModel',\r\n        link: function ($scope, $element, attrs, ngModel) {\r\n\r\n            ngModel.$parsers.unshift(function (value) {\r\n                $timeout(function () {\r\n                    $element[0].focus();\r\n                });\r\n                return value;\r\n            });\r\n\r\n        }\r\n    };\r\n}])","var HEADER_NAME = 'MyApp-Handle-Errors-Generically';\nvar specificallyHandleInProgress = false;\n\nnzbhydraapp.factory('RequestsErrorHandler',  [\"$q\", \"growl\", \"blockUI\", \"GeneralModalService\", function ($q, growl, blockUI, GeneralModalService) {\n    return {\n        // --- The user's API for claiming responsiblity for requests ---\n        specificallyHandled: function (specificallyHandledBlock) {\n            specificallyHandleInProgress = true;\n            try {\n                return specificallyHandledBlock();\n            } finally {\n                specificallyHandleInProgress = false;\n            }\n        },\n\n        // --- Response interceptor for handling errors generically ---\n        responseError: function (rejection) {\n            blockUI.reset();\n            var shouldHandle = (rejection && rejection.config && rejection.config.headers && rejection.config.headers[HEADER_NAME] && !rejection.config.url.contains(\"logerror\"));\n            if (shouldHandle) {\n                var message = \"An error occured :<br>\" + rejection.status + \": \" + rejection.statusText;\n\n                if (rejection.data) {\n                    message += \"<br><br>\" + rejection.data;\n                }\n                GeneralModalService.open(message);\n\n            } else if (rejection && rejection.config && rejection.config.headers && rejection.config.headers[HEADER_NAME] && rejection.config.url.contains(\"logerror\")) {\n                console.log(\"Not handling connection error while sending exception to server\");\n            }\n\n            return $q.reject(rejection);\n        }\n    };\n}]);\n\n\nnzbhydraapp.config(['$provide', '$httpProvider', function ($provide, $httpProvider) {\n    $httpProvider.interceptors.push('RequestsErrorHandler');\n\n    // --- Decorate $http to add a special header by default ---\n\n    function addHeaderToConfig(config) {\n        config = config || {};\n        config.headers = config.headers || {};\n\n        // Add the header unless user asked to handle errors himself\n        if (!specificallyHandleInProgress) {\n            config.headers[HEADER_NAME] = true;\n        }\n\n        return config;\n    }\n\n    // The rest here is mostly boilerplate needed to decorate $http safely\n    $provide.decorator('$http', ['$delegate', function ($delegate) {\n        function decorateRegularCall(method) {\n            return function (url, config) {\n                return $delegate[method](url, addHeaderToConfig(config));\n            };\n        }\n\n        function decorateDataCall(method) {\n            return function (url, data, config) {\n                return $delegate[method](url, data, addHeaderToConfig(config));\n            };\n        }\n\n        function copyNotOverriddenAttributes(newHttp) {\n            for (var attr in $delegate) {\n                if (!newHttp.hasOwnProperty(attr)) {\n                    if (typeof($delegate[attr]) === 'function') {\n                        newHttp[attr] = function () {\n                            return $delegate.apply($delegate, arguments);\n                        };\n                    } else {\n                        newHttp[attr] = $delegate[attr];\n                    }\n                }\n            }\n        }\n\n        var newHttp = function (config) {\n            return $delegate(addHeaderToConfig(config));\n        };\n\n        newHttp.get = decorateRegularCall('get');\n        newHttp.delete = decorateRegularCall('delete');\n        newHttp.head = decorateRegularCall('head');\n        newHttp.jsonp = decorateRegularCall('jsonp');\n        newHttp.post = decorateDataCall('post');\n        newHttp.put = decorateDataCall('put');\n\n        copyNotOverriddenAttributes(newHttp);\n\n        return newHttp;\n    }]);\n}]);","var filters = angular.module('filters', []);\r\n\r\nfilters.filter('bytes', function() {\r\n\treturn function(bytes) {\r\n\t\treturn filesize(bytes);\r\n\t}\r\n});\r\n\r\nfilters.filter('unsafe', \r\n\t[\"$sce\", function ($sce) {\r\n\t\treturn function (value, type) {\r\n\t\t\treturn $sce.trustAs(type || 'html', text);\r\n\t\t};\r\n\t}]\r\n);\r\n\r\n"],"sourceRoot":"/source/"}