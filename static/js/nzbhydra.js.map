{"version":3,"sources":["directives/updates.js","directives/search-result.js","directives/search-result-non-title-columns.js","directives/search-history.js","directives/on-finish-render.js","directives/log.js","directives/indexer-statuses.js","directives/focus-on.js","directives/download-history.js","directives/cfg-form-entry.js","directives/addable-nzb.js","update-service.js","update-footer-controller.js","system-controller.js","stats-service.js","stats-controller.js","search-service.js","search-results-controller.js","search-controller.js","restart-service.js","nzbhydra-control-service.js","nzb-download-service.js","modal.js","modal-service.js","config-service.js","config-fields-service.js","config-controller.js","categories-service.js","nzbhydra.js","generic-error-handler.js","formly-config.js","filters.js"],"names":["hydraupdates","controller","$scope","UpdateService","$sce","loadingPromise","getVersions","then","data","currentVersion","repVersion","updateAvailable","getChangelog","changelog","getVersionHistory","versionHistory","trustAsHtml","update","showChangelog","showChanges","$inject","templateUrl","searchResult","$element","$attrs","groupingRowDuplicatesToShow","showDuplicates","titleGroup","length","hashGroupExpanded","hash","slice","otherTitleRowsToShow","titleGroupExpanded","hashGroupDuplicatesToShow","hashGroup","toggleTitleGroup","require","scope","selected","rowIndex","multiElement","otherColumns","$http","$templateCache","$compile","$window","$uibModal","growl","showNfo","resultItem","has_nfo","uri","URI","addQuery","indexer","indexerguid","get","toString","response","openModal","nfo","angular","isUndefined","message","info","error","size","modalInstance","open","template","resolve","result","downloadNzb","location","href","link","element","attrs","cache","success","templateContent","replaceWith","NfoModalInstanceCtrl","$modalInstance","ok","close","item","cancel","dismiss","searchHistory","$state","getSearchRequestsPage","pageNumber","params","page","limit","type","searchRequests","totalRequests","pagination","current","pageChanged","newPage","changeType","openSearch","request","stateParams","identifier_key","imdbid","identifier_value","rid","tvdbid","season","episode","query","mode","category","go","inherit","onFinishRender","$timeout","linkFunction","attr","$last","$evalAsync","hydralog","logPromise","log","indexerStatuses","getIndexerStatuses","isInPast","timestamp","Date","getTime","enable","indexerName","name","formatDate","dateFilter","hidePast","t","focusOn","directive","elem","$on","e","focus","downloadHistory","getDownloadsPage","nzbDownloads","totalDownloads","cfgFormEntry","title","cfg","help","options","isDefined","$eval","addableNzb","ConfigService","NzbDownloadService","classname","getSafe","settings","downloader","enabled","add","download","dbsearchid","blockUI","RestartService","myInjector","injector","$uibModalInstance","console","start","countdownAndReload","reset","UpdateFooterController","SystemController","NzbHydraControlService","shutdown","restart","tabs","active","state","i","is","goToState","index","StatsService","getStats","StatsController","stats","avgResponseTimes","avgIndexerSearchResultsShares","avgIndexerAccessSuccesses","SearchService","search","tmdbid","minsize","maxsize","minage","maxage","indexers","indexOf","_","isNumber","decodeURIComponent","lastExecutedQuery","processData","loadMore","offset","removeQuery","results","indexersearches","total","resultsCount","each","ps","did_search","averageResponseTime","reduce","api_accesses","memo","rp","response_time","service","SearchResultsController","$stateParams","$q","firstResultPredicate","sortPredicate","groupId","guid","startBlocking","deferred","defer","promise","setSorting","predicate","reversedDefault","sortReversed","filteredResults","sortAndFilter","filterByAgeAndSize","filterOut","age_days","countFilteredOut","getItemIndexerDisplayState","indexerDisplayState","toLowerCase","getCleanedTitle","replace","createSortedHashgroups","createHashGroup","sortedHashGroup","sortBy","sortPredicateValue","indexerscore","getHashGroupFirstElementSortPredicate","chain","groupBy","map","value","getTitleGroupFirstElementsSortPredicate","filtered","filter","stopBlocking","concat","toggleIndexerDisplay","countResults","downloadSelected","values","added","of","limitTo","indexerResultsInfo","groupExpanded","doShowDuplicates","forEach","loadedResults","loaded_results","toggleTitlegroupExpand","invertSelection","difference","SearchController","getNumberOrUndefined","number","isNaN","undefined","parseInt","getSelectedIndexers","activatedIndexers","availableIndexers","activated","pluck","join","isIndexerPreselected","preselect","contains","split","showIndexers","safeConfig","typeAheadWait","selectedItem","autocompleteLoading","isAskById","isById","autocompleteClass","toggle","searchCategory","searching","categorysizes","enable_category_sizes","min","max","getAutocomplete","val","input","startSearch","goToSearchUrl","encodeURIComponent","notify","reload","selectAutocompleteItem","$item","startQuerySearch","autocompleteActive","seriesSelected","toggleIndexer","showOnSearch","CategoriesService","sendNzbAddCommand","items","put","toJson","nzbget","defaultCategory","sabnzbd","openCategorySelection","ModalService","headline","ModalInstanceCtrl","GeneralModalService","this","msg","$cacheFactory","set","newConfig","successresponse","errorresponse","config","safeconfig","invalidateSafe","remove","maySeeAdminArea","loadAll","configResponse","ConfigFields","setRestartWatcher","restartWatcherFunction","restartWatcher","restartListener","field","newValue","oldValue","getBasicIndexerFieldset","showName","host","apikey","username","searchIds","testConnection","testtype","showpreselect","showCheckCaps","fieldset","push","key","templateOptions","label","hideExpression","required","placeholder","id","testType","ipValidator","expression","$viewValue","$modelValue","test","authValidatorDontLockYourselfOut","rootModel","auth","users","any","user","model","maySeeAdmin","regexValidator","regex","prefixViewValue","getFields","main","wrapper","fieldGroup","validators","ipAddress","watcher","listener","port","urlBase","addonRight","text","btnText","altLegendText","fields","defaultModel","timeout","score","accessType","search_ids","lines","dontLockYourselfOut","password","maySeeStats","ConfigController","ConfigModel","submit","form","$valid","$setPristine","invalidate","restartRequired","formTabs","allTabs","isSavingNeeded","$dirty","$submitted","goToConfigState","downloadLog","getCategories","categories","categoriesResponse","select","selectedCategory","nzbhydraapp","module","$stateProvider","$urlRouterProvider","$locationProvider","blockUIConfig","$urlMatcherFactoryProvider","autoBlock","strictMode","controllerAs","url","foobar","html5Mode","paginationTemplateProvider","setPath","cfpLoadingBarProvider","latencyThreshold","growlProvider","globalTimeToLive","globalPosition","bind","event","which","$apply","ngEnter","preventDefault","provider","factory","$rootScope","$broadcast","mixin","isNullOrEmpty","string","isNull","isString","HEADER_NAME","specificallyHandleInProgress","specificallyHandled","specificallyHandledBlock","responseError","rejection","shouldHandle","headers","status","statusText","reject","$provide","$httpProvider","addHeaderToConfig","interceptors","decorator","$delegate","decorateRegularCall","method","decorateDataCall","copyNotOverriddenAttributes","newHttp","hasOwnProperty","apply","arguments","head","jsonp","post","hashCode","s","a","b","charCodeAt","formlyConfigProvider","extras","removeChromeAutoComplete","explicitAsync","disableWarnings","window","onProd","setWrapper","getValidationMessage","validation","messages","fc","setType","extends","generate","Math","random","showSuccess","testButton","removeClass","addClass","showError","uniqueId","testMessage","to","ssl","checkCaps","display","selectedpreset","presets","selectPreset","$watch","defaultOptions","className","noRow","optionsAttr","ngOptions","valueProp","labelProp","copyFields","copy","addNew","repeatsection","newsection","$index","splice","formOptions","formState","clear","mapObject","run","formlyConfig","formlyValidationMessages","errorExistsAndShouldBeVisibleExpression","filters","bytes","precision","parseFloat","isFinite","units","floor","pow","toFixed","trustAs","watch","$watchGroup"],"mappings":"AAIA,QAAAA,gBAOA,QAAAC,GAAAC,EAAAC,EAAAC,GAEAF,EAAAG,eAAAF,EAAAG,cAAAC,KAAA,SAAAC,GACAN,EAAAO,eAAAD,EAAAA,KAAAC,eACAP,EAAAQ,WAAAF,EAAAA,KAAAE,WACAR,EAAAS,gBAAAH,EAAAA,KAAAG,gBACAT,EAAAQ,WAAAR,EAAAO,gBACAN,EAAAS,eAAAL,KAAA,SAAAC,GACAN,EAAAW,UAAAL,EAAAA,KAAAK,cAKAV,EAAAW,oBAAAP,KAAA,SAAAC,GACAN,EAAAa,eAAAX,EAAAY,YAAAR,EAAAA,KAAAO,kBAGAb,EAAAe,OAAA,WACAd,EAAAc,UAGAf,EAAAgB,cAAA,WACAf,EAAAgB,YAAAjB,EAAAW,YA3BA,MADAZ,GAAAmB,SAAA,SAAA,gBAAA,SAEAC,YAAA,sCACApB,WAAAA,GCJA,QAAAqB,gBAcA,QAAArB,GAAAC,EAAAqB,EAAAC,GAYA,QAAAC,KACA,MAAAvB,GAAAwB,gBAAAxB,EAAAyB,WAAA,GAAAC,OAAA,GAAA1B,EAAA2B,kBAAA3B,EAAAyB,WAAA,GAAA,GAAAG,MACA5B,EAAAyB,WAAA,GAAAI,MAAA,MAQA,QAAAC,KACA,MAAA9B,GAAAyB,WAAAC,OAAA,GAAA1B,EAAA+B,mBACA/B,EAAAyB,WAAAI,MAAA,MAOA,QAAAG,GAAAC,GACA,MAAAjC,GAAAwB,gBAAAxB,EAAA2B,kBAAAM,EAAA,GAAAL,MACAK,EAAAJ,MAAA,MAhCA7B,EAAA+B,oBAAA,EACA/B,EAAA2B,qBAEA3B,EAAAkC,iBAAA,WACAlC,EAAA+B,oBAAA/B,EAAA+B,mBACA/B,EAAA+B,qBACA/B,EAAA2B,kBAAA3B,EAAAyB,WAAA,GAAA,GAAAG,OAAA,IAIA5B,EAAAuB,4BAAAA,EAUAvB,EAAA8B,qBAAAA,EASA9B,EAAAgC,0BAAAA,EA3CA,OACAb,YAAA,4CACAgB,QAAA,cACAC,OACAX,WAAA,IACAD,eAAA,IACAa,SAAA,IACAC,SAAA,KAEAvC,YAAA,SAAA,WAAA,SAAAA,GACAwC,cAAA,GCXA,QAAAC,cAAAC,EAAAC,EAAAC,EAAAC,GAiBA,QAAA7C,GAAAC,EAAAyC,EAAAI,EAAAC,GAGA,QAAAC,GAAAC,GACA,GAAA,GAAAA,EAAAC,QAAA,CAGA,GAAAC,GAAA,GAAAC,KAAA,qBAGA,OAFAD,GAAAE,SAAA,UAAAJ,EAAAK,SACAH,EAAAE,SAAA,OAAAJ,EAAAM,aACAb,EAAAc,IAAAL,EAAAM,YAAAnD,KAAA,SAAAoD,GACAA,EAAAnD,KAAA2C,QACAjD,EAAA0D,UAAA,KAAAD,EAAAnD,KAAAqD,KAEAC,QAAAC,YAAAb,EAAAc,SAGAhB,EAAAiB,KAAA,oBAFAjB,EAAAkB,MAAAhB,EAAAc,YAUA,QAAAJ,GAAAO,EAAAN,GACA,GAAAO,GAAArB,EAAAsB,MACAC,SAAA,0DACArE,WAAA,uBACAkE,KAAAA,EACAI,SACAV,IAAA,WACA,MAAAA,MAKAO,GAAAI,OAAAjE,OAKA,QAAAkE,GAAAvB,GAEAJ,EAAA4B,SAAAC,KAAAzB,EAAA0B,KA1CA1E,EAAA+C,QAAAA,EAqBA/C,EAAA0D,UAAAA,EAiBA1D,EAAAuE,YAAAA,EAvDA,MADAxE,GAAAmB,SAAA,SAAA,QAAA,YAAA,UAEAkB,OACAkC,OAAA,KAEA/B,cAAA,EAEAmC,KAAA,SAAAtC,EAAAuC,EAAAC,GACAnC,EAAAc,IAAA,+DAAAsB,MAAAnC,IAAAoC,QAAA,SAAAC,GACAJ,EAAAK,YAAArC,EAAAoC,GAAA3C,OAIArC,WAAAA,GA0DA,QAAAkF,sBAAAjF,EAAAkF,EAAAvB,GAEA3D,EAAA2D,IAAAA,EAEA3D,EAAAmF,GAAA,WACAD,EAAAE,MAAApF,EAAAqC,SAAAgD,OAGArF,EAAAsF,OAAA,WACAJ,EAAAK,WChFA,QAAAC,iBAOA,QAAAzF,GAAAC,EAAAyC,EAAAgD,GAkBA,QAAAC,GAAAC,GACAlD,EAAAc,IAAA,iCAAAqC,QAAAC,KAAAF,EAAAG,MAAA9F,EAAA8F,MAAAC,KAAA/F,EAAA+F,QAAAjB,QAAA,SAAArB,GACAzD,EAAAgG,eAAAvC,EAAAuC,eACAhG,EAAAiG,cAAAxC,EAAAwC,gBApBAjG,EAAA+F,KAAA,MACA/F,EAAA8F,MAAA,IACA9F,EAAAkG,YACAC,QAAA,GAGAT,EAAA,GAEA1F,EAAAoG,YAAA,SAAAC,GACAX,EAAAW,IAGArG,EAAAsG,WAAA,SAAAP,GACA/F,EAAA+F,KAAAA,EACAL,EAAA1F,EAAAkG,WAAAC,UAUAnG,EAAAuG,WAAA,SAAAC,GACA,GAAAC,KACA,WAAAD,EAAAE,eACAD,EAAAE,OAAAH,EAAAI,kBACA,UAAAJ,EAAAE,gBAAA,OAAAF,EAAAE,kBACA,OAAAF,EAAAE,eACAD,EAAAI,IAAAL,EAAAI,iBAEAH,EAAAK,OAAAN,EAAAI,iBAGA,IAAAJ,EAAAO,SACAN,EAAAM,OAAAP,EAAAO,QAEA,IAAAP,EAAAQ,UACAP,EAAAO,QAAAR,EAAAQ,UAGA,IAAAR,EAAAS,QACAR,EAAAQ,MAAAT,EAAAS,OAEA,MAAAT,EAAAT,KACAU,EAAAS,KAAA,WACA,MAAAV,EAAAT,KACAU,EAAAS,KAAA,cAEAT,EAAAS,KAAA,SAGA,IAAAV,EAAAW,WACAV,EAAAU,SAAAX,EAAAW,UAGAV,EAAAU,SAAAX,EAAAW,SAEA1B,EAAA2B,GAAA,SAAAX,GAAAY,SAAA,KAlEA,OACAlG,YAAA,6CACApB,YAAA,SAAA,QAAA,SAAAA,GACAqC,UCFA,QAAAkF,gBAAAC,GACA,QAAAC,GAAApF,EAAAuC,EAAA8C,GAEArF,EAAAsF,SAAA,GACAH,EAAA,WACAnF,EAAAuF,WAAAF,EAAAH,kBAKA,OACA5C,KAAA8C,GCdA,QAAAI,YAOA,QAAA7H,GAAAC,EAAAyC,EAAAvC,GACAF,EAAA6H,WAAApF,EAAAc,IAAA,uBAAAuB,QAAA,SAAAxE,GACAN,EAAA8H,IAAA5H,EAAAY,YAAAR,EAAAwH,OAPA,MADA/H,GAAAmB,SAAA,SAAA,QAAA,SAEAkD,SAAA,iIACArE,WAAAA,GCJA,QAAAgI,mBAMA,QAAAhI,GAAAC,EAAAyC,GAIA,QAAAuF,KACAvF,EAAAc,IAAA,kCAAAuB,QAAA,SAAArB,GACAzD,EAAA+H,gBAAAtE,EAAAsE,kBAJAC,IAQAhI,EAAAiI,SAAA,SAAAC,GACA,MAAA,KAAAA,GAAA,GAAAC,OAAAC,WAGApI,EAAAqI,OAAA,SAAAC,GACA7F,EAAAc,IAAA,6BAAAqC,QAAA2C,KAAAD,KAAAjI,KAAA,SAAAoD,GACAzD,EAAA+H,gBAAAtE,EAAAnD,KAAAyH,mBArBA,OACA5G,YAAA,+CACApB,YAAA,SAAA,QAAAA,IA8BA,QAAAyI,YAAAC,GACA,MAAA,UAAAP,EAAAQ,GACA,GAAAR,EAAA,CACA,GAAA,IAAAA,GAAA,GAAAC,OAAAC,WAAAM,EACA,MAAA,EAGA,IAAAC,GAAA,IAAAT,CAEA,OADAS,GAAAF,EAAAE,EAAA,yBAGA,MAAA,IC7CA,QAAAC,WAEA,QAAAC,GAAAzG,EAAA0G,EAAArB,GACArF,EAAA2G,IAAA,UAAA,SAAAC,EAAAT,GACAA,IAAAd,EAAAmB,SACAE,EAAA,GAAAG,UAJA,MAAAJ,GCAA,QAAAK,mBAOA,QAAAnJ,GAAAC,EAAAyC,GAkBA,QAAA0G,GAAAxD,GACAlD,EAAAc,IAAA,+BAAAqC,QAAAC,KAAAF,EAAAG,MAAA9F,EAAA8F,MAAAC,KAAA/F,EAAA+F,QAAAjB,QAAA,SAAArB,GACAzD,EAAAoJ,aAAA3F,EAAA2F,aACApJ,EAAAqJ,eAAA5F,EAAA4F,iBApBArJ,EAAA+F,KAAA,MACA/F,EAAA8F,MAAA,IACA9F,EAAAkG,YACAC,QAAA,GAGAnG,EAAAsG,WAAA,SAAAP,GACA/F,EAAA+F,KAAAA,EACAoD,EAAAnJ,EAAAkG,WAAAC,UAGAgD,EAAA,GAEAnJ,EAAAoG,YAAA,SAAAC,GACA8C,EAAA9C,IArBA,OACAlF,YAAA,+CACApB,YAAA,SAAA,QAAAA,GACAqC,UCJA,QAAAkH,gBACA,OACAnI,YAAA,6CACAgB,SAAA,SAAA,QACAC,OACAmH,MAAA,IACAC,IAAA,IACAC,KAAA,IACA1D,KAAA,KACA2D,QAAA,MAEA3J,YAAA,SAAA,WAAA,SAAA,SAAAC,EAAAqB,EAAAC,GACAtB,EAAA+F,KAAAnC,QAAA+F,UAAA3J,EAAA+F,MAAA/F,EAAA+F,KAAA,OACA/F,EAAA0J,QAAA9F,QAAA+F,UAAA3J,EAAA+F,MAAA/F,EAAA4J,MAAAtI,EAAAoI,eCbA,QAAAG,cAcA,QAAA9J,GAAAC,EAAA8J,EAAAC,EAAAjH,GACA9C,EAAAgK,UAAA,GAEAF,EAAAG,UAAA5J,KAAA,SAAA6J,GACAlK,EAAAmK,WAAAD,EAAAC,WAAAA,WACA,QAAAnK,EAAAmK,YACAnK,EAAAoK,SAAA,EACApK,EAAAgK,UAAA,WAAAhK,EAAAmK,WAAA,UAAA,UAEAnK,EAAAoK,SAAA,IAKApK,EAAAqK,IAAA,WACArK,EAAAgK,UAAA,eACAD,EAAAO,WAAAhH,YAAAtD,EAAAsD,YAAAiG,MAAAvJ,EAAAuJ,MAAAlG,QAAArD,EAAAqD,QAAAkH,WAAAvK,EAAAuK,cAAAlK,KAAA,SAAAoD,GACAA,EAAAnD,KAAAwE,QACA9E,EAAAgK,UAAA,WAAAhK,EAAAmK,WAAA,kBAAA,kBAEAnK,EAAAgK,UAAA,WAAAhK,EAAAmK,WAAA,gBAAA,eACArH,EAAAkB,MAAA,qFAEA,WACAhE,EAAAgK,UAAA,WAAAhK,EAAAmK,WAAA,gBAAA,eACArH,EAAAkB,MAAA,qFArCA,MADAjE,GAAAmB,SAAA,SAAA,gBAAA,qBAAA,UAEAC,YAAA,0CACAgB,SAAA,eAAA,SAAA,WAAA,eACAC,OACAkB,YAAA,IACAiG,MAAA,IACAlG,QAAA,IACAkH,WAAA,KAEAxK,WAAAA,GCXA,QAAAE,eAAAwC,EAAAK,EAAA0H,EAAAC,GAkBA,QAAArK,KACA,MAAAqC,GAAAc,IAAA,4BAAAlD,KAAA,SAAAC,GAIA,MAHAC,GAAAD,EAAAA,KAAAC,eACAC,EAAAF,EAAAA,KAAAE,WACAC,EAAAH,EAAAA,KAAAG,gBACAH,IAIA,QAAAI,KACA,MAAA+B,GAAAc,IAAA,6BAAAlD,KAAA,SAAAC,GAEA,MADAK,GAAAL,EAAAA,KAAAK,UACAL,IAIA,QAAAM,KACA,MAAA6B,GAAAc,IAAA,mCAAAlD,KAAA,SAAAC,GAEA,MADAO,GAAAP,EAAAA,KAAAO,eACAP,IAIA,QAAAW,KAEA,GAAAyJ,GAAA9G,QAAA+G,UAAA,KAAA,iBACA9H,EAAA6H,EAAAnH,IAAA,aACAqC,GACA3B,KAAA,KACA9C,YAAA,6BACAkD,SACA1D,UAAA,WACA,MAAAA,KAGAZ,WAAA,SAAAC,EAAAE,EAAA0K,EAAAjK,GAEAA,EAAAT,EAAAY,YAAAH,GACAX,EAAAW,UAAAA,EACAkK,QAAA/C,IAAAnH,GACAX,EAAAmF,GAAA,WACAyF,EAAArF,aAKArB,EAAArB,EAAAsB,KAAAyB,EAEA1B,GAAAI,OAAAjE,OAIA,QAAAU,KACAyJ,EAAAM,MAAA,gCACArI,EAAAc,IAAA,sBAAAlD,KAAA,SAAAC,GACAA,EAAAA,KAAAwE,QACA2F,EAAAM,mBAAA,qBAEAP,EAAAQ,QACAlI,EAAAiB,KAAA,8DAGA,WACAyG,EAAAQ,QACAlI,EAAAiB,KAAA,8DAhFA,GAAAxD,GACAC,EACAC,EACAE,EACAE,CAEA,QACAE,OAAAA,EACAE,YAAAA,EACAb,YAAAA,EACAM,aAAAA,EACAE,kBAAAA,GCbA,QAAAqK,wBAAAjL,EAAAC,GAEAD,EAAAS,iBAAA,EAEAR,EAAAG,cAAAC,KAAA,SAAAC,GACAN,EAAAO,eAAAD,EAAAA,KAAAC,eACAP,EAAAQ,WAAAF,EAAAA,KAAAE,WACAR,EAAAS,gBAAAH,EAAAA,KAAAG,gBACAT,EAAAQ,WAAAR,EAAAO,gBACAN,EAAAS,eAAAL,KAAA,SAAAC,GACAN,EAAAW,UAAAL,EAAAA,KAAAK,cAMAX,EAAAe,OAAA,WACAd,EAAAc,UAGAf,EAAAgB,cAAA,WACAf,EAAAgB,YAAAjB,EAAAW,YCrBA,QAAAuK,kBAAAlL,EAAAyF,EAAA3C,EAAA2H,EAAAU,GAGAnL,EAAAoL,SAAA,WACAD,EAAAC,WAAA/K,KAAA,WACAyC,EAAAiB,KAAA,6BAEA,WACAjB,EAAAiB,KAAA,uCAIA/D,EAAAqL,QAAA,WACAZ,EAAAY,WAIArL,EAAAsL,OAEAC,QAAA,EACAC,MAAA,WAGAD,QAAA,EACAC,MAAA,mBAGAD,QAAA,EACAC,MAAA,eAGAD,QAAA,EACAC,MAAA,gBAKA,KAAA,GAAAC,GAAA,EAAAA,EAAAzL,EAAAsL,KAAA5J,OAAA+J,IACAhG,EAAAiG,GAAA1L,EAAAsL,KAAAG,GAAAD,SACAxL,EAAAsL,KAAAG,GAAAF,QAAA,EAKAvL,GAAA2L,UAAA,SAAAC,GACAnG,EAAA2B,GAAApH,EAAAsL,KAAAM,GAAAJ,QC7CA,QAAAK,cAAApJ,GAMA,QAAAqJ,KACA,MAAArJ,GAAAc,IAAA,wBAAAuB,QAAA,SAAArB,GACA,MAAAA,GAAAnD,OANA,OACAiD,IAAAuI,GCHA,QAAAC,iBAAA/L,EAAAgM,EAAAvG,GAEAuG,EAAAA,EAAA1L,KACAN,EAAAoJ,aAAA,KACApJ,EAAAiM,iBAAAD,EAAAC,iBACAjM,EAAAkM,8BAAAF,EAAAE,8BACAlM,EAAAmM,0BAAAH,EAAAG,0BAGAnM,EAAAsL,OAEAC,QAAA,EACAC,MAAA,UAGAD,QAAA,EACAC,MAAA,mBAGAD,QAAA,EACAC,MAAA,mBAGAD,QAAA,EACAC,MAAA,mBAKA,KAAA,GAAAC,GAAA,EAAAA,EAAAzL,EAAAsL,KAAA5J,OAAA+J,IACAhG,EAAAiG,GAAA1L,EAAAsL,KAAAG,GAAAD,SACAxL,EAAAsL,KAAAG,GAAAF,QAAA,EAKAvL,GAAA2L,UAAA,SAAAC,GACAnG,EAAA2B,GAAApH,EAAAsL,KAAAM,GAAAJ,QCpCA,QAAAY,eAAA3J,GAQA,QAAA4J,GAAAlF,EAAAF,EAAAqF,EAAA/C,EAAAzC,EAAAC,EAAAC,EAAAuF,EAAAC,EAAAC,EAAAC,EAAAC,GACA9B,QAAA/C,IAAA,aAAAX,EACA,IAAAjE,EAyDA,OAxDAiE,GAAAyF,QAAA,UAAA,IAAA,GAAAzF,EAAAyF,QAAA,OACA/B,QAAA/C,IAAA,qBACA5E,EAAA,GAAAC,KAAA,2BACA0J,EAAAhJ,YAAAyI,IAKAzB,QAAA/C,IAAA,yBACA5E,EAAAE,SAAA,QAAA6D,KALA4D,QAAA/C,IAAA,0BACA5E,EAAAE,SAAA,SAAAkJ,GACApJ,EAAAE,SAAA,QAAAmG,KAMApC,EAAAyF,QAAA,MAAA,IAAA,GAAAzF,EAAAyF,QAAA,OACA/B,QAAA/C,IAAA,oBACA5E,EAAA,GAAAC,KAAA,wBACA0J,EAAAhJ,YAAAiD,IAIA+D,QAAA/C,IAAA,sBACA5E,EAAAE,SAAA,QAAA6D,KAJA/D,EAAAE,SAAA,SAAA0D,GACA5D,EAAAE,SAAA,QAAAmG,IAMAsD,EAAAhJ,YAAAkD,IACA7D,EAAAE,SAAA,SAAA2D,GAEA8F,EAAAhJ,YAAAmD,IACA9D,EAAAE,SAAA,UAAA4D,KAGA6D,QAAA/C,IAAA,kBACA5E,EAAA,GAAAC,KAAA,sBACAD,EAAAE,SAAA,QAAA6D,IAGA4F,EAAAC,SAAAP,IACArJ,EAAAE,SAAA,UAAAmJ,GAEAM,EAAAC,SAAAN,IACAtJ,EAAAE,SAAA,UAAAoJ,GAEAK,EAAAC,SAAAL,IACAvJ,EAAAE,SAAA,SAAAqJ,GAEAI,EAAAC,SAAAJ,IACAxJ,EAAAE,SAAA,SAAAsJ,GAEA9I,QAAAC,YAAA8I,IACAzJ,EAAAE,SAAA,WAAA2J,mBAAAJ,IAIAzJ,EAAAE,SAAA,WAAA+D,GACAjE,EAAAA,EAAAM,WACAqH,QAAA/C,IAAA,WAAA5E,GACA8J,EAAA9J,EACAT,EAAAc,IAAAL,GAAA7C,KAAA4M,GAIA,QAAAC,GAAAC,GAKA,MAJAH,GAAAI,YAAA,UACAJ,EAAA5J,SAAA,SAAA+J,GAEAtC,QAAA/C,IAAA,WAAAkF,GACAvK,EAAAc,IAAAyJ,GAAA3M,KAAA4M,GAGA,QAAAA,GAAAxJ,GACA,GAAA4J,GAAA5J,EAAAnD,KAAA+M,QACAC,EAAA7J,EAAAnD,KAAAgN,gBACAC,EAAA9J,EAAAnD,KAAAiN,MACAC,EAAAH,EAAA3L,MAeA,OAVAmL,GAAAY,KAAAH,EAAA,SAAAI,GACAA,EAAAC,aACAD,EAAAE,oBAAAf,EAAAgB,OAAAH,EAAAI,aAAA,SAAAC,EAAAC,GACA,MAAAD,GAAAC,EAAAC,eACA,GACAP,EAAAE,oBAAAF,EAAAE,oBAAAF,EAAAI,aAAApM,WAKA2L,QAAAA,EAAAC,gBAAAA,EAAAC,MAAAA,EAAAC,aAAAA,GA/FA,GAAAR,GAEAkB,GAAA7B,OAAAA,EAAAa,SAAAA,EACA,OAAAgB,GCNA,QAAAC,yBAAAC,EAAApO,EAAAqO,EAAA9G,EAAAiD,EAAA4B,EAAAtJ,EAAAiH,GAoCA,QAAAuE,GAAAjJ,GACA,MAAAA,GAAA,GAAArF,EAAAuO,eAKA,QAAAC,GAAAnJ,GACA,MAAAA,GAAA,GAAA,GAAAoJ,KAIA,QAAAC,GAAA5K,GACA,GAAA6K,GAAAN,EAAAO,OAKA,OAJApE,GAAAM,MAAAhH,GACAyD,EAAA,WACAoH,EAAAtK,WACA,KACAsK,EAAAE,QAMA,QAAAC,GAAAC,EAAAC,GACAN,EAAA,0BAAArO,KAAA,WAEA0O,GAAA/O,EAAAuO,cACAvO,EAAAiP,cAAAjP,EAAAiP,aAEAjP,EAAAiP,aAAAD,EAEAhP,EAAAuO,cAAAQ,EACA/O,EAAAkP,gBAAAC,EAAAnP,EAAAqN,SACA7C,EAAAQ,UAMA,QAAAmE,GAAA9B,GAEA,QAAA+B,GAAA/J,GACA,GAAAgK,KAAAxC,EAAAC,SAAAsB,EAAA7B,UAAAlH,EAAApB,KAAA,KAAA,KAAAmK,EAAA7B,SACAM,EAAAC,SAAAsB,EAAA5B,UAAAnH,EAAApB,KAAA,KAAA,KAAAmK,EAAA5B,SACAK,EAAAC,SAAAsB,EAAA3B,SAAApH,EAAAiK,SAAAlB,EAAA3B,QACAI,EAAAC,SAAAsB,EAAA1B,SAAArH,EAAAiK,SAAAlB,EAAA1B,OAIA,OAHA2C,IACArP,EAAAuP,mBAEAF,EAIA,QAAAG,GAAAnK,GACA,MAAArF,GAAAyP,oBAAApK,EAAAhC,QAAAqM,eAGA,QAAAC,GAAAhL,GACA,MAAAA,GAAA4E,MAAAmG,cAAAE,QAAA,cAAA,IAGA,QAAAC,GAAApO,GAEA,QAAAqO,GAAA7N,GAEA,GAAA8N,GAAAlD,EAAAmD,OAAA/N,EAAA,SAAAoD,GACA,GAAA4K,GAAA5K,EAAArF,EAAAuO,cACA,OAAAvO,GAAAiP,cAAAgB,EAAAA,GAMA,OAHAF,GAAAlD,EAAAmD,OAAAD,EAAA,SAAA1K,GACA,MAAA,GAAAA,EAAA6K,eAKA,QAAAC,GAAAlO,GACA,GAAAgO,GAAAhO,EAAA,GAAAjC,EAAAuO,cACA,OAAAvO,GAAAiP,cAAAgB,EAAAA,EAGA,MAAApD,GAAAuD,MAAA3O,GAAA4O,QAAA,QAAAC,IAAAR,GAAAE,OAAAG,GAAAI,QAGA,QAAAC,GAAA/O,GACA,GAAAwO,GAAAxO,EAAA,GAAA,GAAAzB,EAAAuO,cACA,OAAAvO,GAAAiP,cAAAgB,EAAAA,EA9CAjQ,EAAAuP,iBAAA,CAiDA,IAAAkB,GAAA5D,EAAAuD,MAAA/C,GAEAqD,OAAAlB,GAEAkB,OAAAtB,GAEAiB,QAAAV,GAEAW,IAAAT,GAEAG,OAAAQ,GACAD,OAIA,OAHAvQ,GAAAuP,iBAAA,GACAzM,EAAAiB,KAAA,YAAA/D,EAAAuP,iBAAA,6BAEAkB,EAYA,QAAAE,KACAnG,EAAAQ,QAIA,QAAAkC,KACArC,QAAA/C,IAAA,oCAAA9H,EAAAwN,cAEAkB,EAAA,2BAAArO,KAAA,WACA+L,EAAAc,SAAAlN,EAAAwN,cAAAnN,KAAA,SAAAC,GACAuK,QAAA/C,IAAA,0BACA+C,QAAA/C,IAAAxH,EAAA+M,SACAxC,QAAA/C,IAAA9H,EAAAqN,SACAxC,QAAA/C,IAAA,UAAAxH,EAAAiN,OACAvN,EAAAqN,QAAArN,EAAAqN,QAAAuD,OAAAtQ,EAAA+M,SACArN,EAAAkP,gBAAAC,EAAAnP,EAAAqN,SACArN,EAAAuN,MAAAjN,EAAAiN,MACAvN,EAAAwN,cAAAlN,EAAAkN,aACA3C,QAAA/C,IAAA,kBAAA9H,EAAAwN,cACA3C,QAAA/C,IAAA,oCAAA9H,EAAAqN,QAAA3L,QAEAiP,QAQA,QAAAE,GAAAxN,GACArD,EAAAyP,oBAAApM,EAAAqM,eAAA1P,EAAAyP,oBAAApM,EAAAqM,eACAhB,EAAA,uBAAArO,KAAA,WACAL,EAAAkP,gBAAAC,EAAAnP,EAAAqN,WACAhN,KAAA,WACAsQ,MAKA,QAAAG,KACA,MAAA9Q,GAAAqN,QAAA3L,OAIA,QAAAqP,KAEA,GAAAnN,QAAAC,YAAA7D,EAAAqC,WAAA,GAAArC,EAAAqC,SAAAX,OACAoB,EAAAiB,KAAA,gDACA,CAEA,GAAAiN,GAAAnE,EAAAyD,IAAAtQ,EAAAqC,SAAA,SAAAkO,GACA,OAAAjN,YAAAiN,EAAAjN,YAAAiG,MAAAgH,EAAAhH,MAAAlG,QAAAkN,EAAAlN,QAAAkH,WAAAgG,EAAAhG,aAGAM,SAAA/C,IAAAkJ,GACAjH,EAAAO,SAAA0G,GAAA3Q,KAAA,SAAAoD,GACAA,EAAAnD,KAAAwE,QACAhC,EAAAiB,KAAA,sBAAAN,EAAAnD,KAAA2Q,MAAA,OAAAxN,EAAAnD,KAAA4Q,GAAA,SAEApO,EAAAkB,MAAA,4BAEA,WACAlB,EAAAkB,MAAA,8BApNAhE,EAAAuO,cAAA,QACAvO,EAAAiP,cAAA,EACAjP,EAAAmR,QAAA,IACAnR,EAAAmN,OAAA,EAEAnN,EAAAsN,gBAAAc,EAAAd,gBACAtN,EAAAyP,uBACAzP,EAAAoR,sBACApR,EAAAqR,iBACArR,EAAAsR,kBAAA,EACAtR,EAAAqC,YAEArC,EAAAuP,iBAAA,EAGA1C,EAAA0E,QAAAvR,EAAAsN,gBAAA,SAAAI,GACA1N,EAAAyP,oBAAA/B,EAAArK,QAAAqM,gBAAA,IAGA7C,EAAA0E,QAAAvR,EAAAsN,gBAAA,SAAAI,GACA1N,EAAAoR,mBAAA1D,EAAArK,QAAAqM,gBAAA8B,cAAA9D,EAAA+D,kBAKAzR,EAAAqN,QAAAe,EAAAf,QACArN,EAAAuN,MAAAa,EAAAb,MACAvN,EAAAwN,aAAAY,EAAAZ,aACAxN,EAAAkP,gBAAAC,EAAAnP,EAAAqN,SACAsD,IAIA3Q,EAAAsO,qBAAAA,EAMAtO,EAAAwO,QAAAA,EAiBAxO,EAAA8O,WAAAA,EAsFA9O,EAAA0R,uBAAA,SAAAjQ,GACAzB,EAAAqR,cAAA5P,EAAA,GAAA,GAAA8H,QAAAvJ,EAAAqR,cAAA5P,EAAA,GAAA,GAAA8H,OACAvJ,EAAAqR,cAAA5P,EAAA,GAAA,GAAAG,OAAA5B,EAAAqR,cAAA5P,EAAA,GAAA,GAAAG,OAKA5B,EAAA2Q,aAAAA,EAKA3Q,EAAAkN,SAAAA,EAwBAlN,EAAA6Q,qBAAAA,EAUA7Q,EAAA8Q,aAAAA,EAKA9Q,EAAA+Q,iBAAAA,EAwBA/Q,EAAA2R,gBAAA,WACA3R,EAAAqC,SAAAwK,EAAA+E,WAAA5R,EAAAqN,QAAArN,EAAAqC,WC7NA,QAAAwP,kBAAA7R,EAAAyC,EAAA2L,EAAA3I,EAAA2G,EAAAnD,EAAAa,EAAAU,GAEA,QAAAsH,GAAAC,GACA,MAAAlF,GAAAhJ,YAAAkO,IAAAlF,EAAAmF,MAAAD,IAAA,IAAAA,EACAE,QAEAF,EAAAG,SAAAH,GACAlF,EAAAC,SAAAiF,GACAA,EAEAE,QA6HA,QAAAE,KACA,GAAAC,GAAAvF,EAAA6D,OAAA1Q,EAAAqS,mBAAA3B,OAAA,SAAArN,GACA,MAAAA,GAAAiP,WAEA,OAAAzF,GAAA0F,MAAAH,EAAA,QAAAI,KAAA,KAsEA,QAAAC,GAAApP,GACA,MAAAO,SAAAC,YAAA7D,EAAA2M,UACAtJ,EAAAqP,UAEA7F,EAAA8F,SAAA3S,EAAA2M,SAAAtJ,EAAAkF,MAtMAvI,EAAAkH,KAAAkH,EAAAlH,KAEAlH,EAAAmH,SAAA0F,EAAAhJ,YAAAuK,EAAAjH,WAAA,IAAAiH,EAAAjH,SAAA,MAAAiH,EAAAjH,SACAnH,EAAAsM,OAAA8B,EAAA9B,OACAtM,EAAA8G,OAAAsH,EAAAtH,OACA9G,EAAA6G,IAAAuH,EAAAvH,IACA7G,EAAAuJ,MAAA6E,EAAA7E,MACAvJ,EAAA+G,OAAAqH,EAAArH,OACA/G,EAAAgH,QAAAoH,EAAApH,QACAhH,EAAAiH,MAAAmH,EAAAnH,MACAjH,EAAAuM,QAAAuF,EAAA1D,EAAA7B,SACAvM,EAAAwM,QAAAsF,EAAA1D,EAAA5B,SACAxM,EAAAyM,OAAAqF,EAAA1D,EAAA3B,QACAzM,EAAA0M,OAAAoF,EAAA1D,EAAA1B,SACAG,EAAAhJ,YAAA7D,EAAAuJ,QAAAsD,EAAAhJ,YAAA7D,EAAAiH,SACAjH,EAAAiH,MAAAjH,EAAAuJ,OAEA3F,QAAAC,YAAAuK,EAAAzB,YACA3M,EAAA2M,SAAAI,mBAAAqB,EAAAzB,UAAAiG,MAAA,MAGA5S,EAAA6S,eAEA,IAAAC,EAGA9S,GAAA+S,cAAA,IACA/S,EAAAgT,aAAA,GACAhT,EAAAiT,qBAAA,EACAjT,EAAAkT,UAAAlT,EAAAmH,SAAAyF,QAAA,MAAA,IAAA5M,EAAAmH,SAAAyF,QAAA,UAAA,GACA5M,EAAAmT,QAAA5C,OAAA,GACAvQ,EAAAqS,qBACArS,EAAAoT,kBAAA,2BAEApT,EAAAqT,OAAA,SAAAC,GASA,GARAtT,EAAAmH,SAAAmM,EAGAtT,EAAAkT,UAAAlT,EAAAmH,SAAAyF,QAAA,MAAA,IAAA5M,EAAAmH,SAAAyF,QAAA,UAAA,GAEA3D,EAAA,mBACAjJ,EAAAiH,MAAA,GAEA6L,EAAAS,UAAAC,cAAAC,sBAAA,CACA,GAAAC,GAAAZ,EAAAS,UAAAC,eAAAF,EAAA,QAAA5D,cAAAE,QAAA,IAAA,KACA+D,EAAAb,EAAAS,UAAAC,eAAAF,EAAA,QAAA5D,cAAAE,QAAA,IAAA,IACA/C,GAAAC,SAAA4G,GACA1T,EAAAuM,QAAAmH,EAEA1T,EAAAuM,QAAA,GAEAM,EAAAC,SAAA6G,GACA3T,EAAAwM,QAAAmH,EAEA3T,EAAAwM,QAAA,KAOAxM,EAAA4T,gBAAA,SAAAC,GASA,MARA7T,GAAAiT,qBAAA,EAQAjT,EAAAmT,OAAA5C,MAIAvQ,EAAAmH,SAAAyF,QAAA,UAAA,GACAnK,EAAAc,IAAA,uCACAqC,QACAkO,MAAAD,KAEAxT,KAAA,SAAAoD,GAEA,MADAzD,GAAAiT,qBAAA,EACAxP,EAAAnD,KAAA+M,UAEArN,EAAAmH,SAAAyF,QAAA,MAAA,GAEAnK,EAAAc,IAAA,oCACAqC,QACAkO,MAAAD,KAEAxT,KAAA,SAAAoD,GAEA,MADAzD,GAAAiT,qBAAA,EACAxP,EAAAnD,KAAA+M,iBAQArN,EAAA+T,YAAA,WACAvJ,EAAAM,MAAA,eACA,IAAA6B,GAAA/I,QAAAC,YAAA7D,EAAA2M,UAAAsF,OAAAjS,EAAA2M,SAAA6F,KAAA,IACApG,GAAAC,OAAArM,EAAAmH,SAAAnH,EAAAiH,MAAAmH,EAAA9B,OAAAtM,EAAAuJ,MAAAvJ,EAAA8G,OAAA9G,EAAA+G,OAAA/G,EAAAgH,QAAAhH,EAAAuM,QAAAvM,EAAAwM,QAAAxM,EAAAyM,OAAAzM,EAAA0M,OAAAC,GAAAtM,KAAA,SAAAe,GACAqE,EAAA2B,GAAA,kBACAiG,QAAAjM,EAAAiM,QACAC,gBAAAlM,EAAAkM,gBACAC,MAAAnM,EAAAmM,MACAC,aAAApM,EAAAoM,aACAjB,QAAAvM,EAAAuM,QACAC,QAAAxM,EAAAwM,QACAC,OAAAzM,EAAAyM,OACAC,OAAA1M,EAAA0M,SAEArF,SAAA,IAEArH,EAAAsM,OAAA2F,OACAjS,EAAA8G,OAAAmL,UAYAjS,EAAAgU,cAAA,WACA,GAAAvN,KACAzG,GAAAmH,SAAAyF,QAAA,UAAA,IACAnG,EAAAS,KAAA,cACAT,EAAA8C,MAAAvJ,EAAAuJ,MACA9C,EAAAS,KAAA,eACAlH,EAAAmH,SAAAyF,QAAA,MAAA,IACAnG,EAAAS,KAAA,WACAT,EAAA8C,MAAAvJ,EAAAuJ,OACA,SAAAvJ,EAAAmH,SACAV,EAAAS,KAAA,QAEAT,EAAAS,KAAA,SAGAT,EAAA6F,OAAAtM,EAAAsM,OACA7F,EAAAK,OAAA9G,EAAA8G,OACAL,EAAA8C,MAAAvJ,EAAAuJ,MACA9C,EAAAM,OAAA/G,EAAA+G,OACAN,EAAAO,QAAAhH,EAAAgH,QACAP,EAAAQ,MAAAjH,EAAAiH,MACAR,EAAA8F,QAAAvM,EAAAuM,QACA9F,EAAA+F,QAAAxM,EAAAwM,QACA/F,EAAAgG,OAAAzM,EAAAyM,OACAhG,EAAAiG,OAAA1M,EAAA0M,OACAjG,EAAAU,SAAAnH,EAAAmH,SACAV,EAAAkG,SAAAsH,mBAAA9B,KAEA1M,EAAA2B,GAAA,SAAAX,GAAAY,SAAA,EAAA6M,QAAA,EAAAC,QAAA,KAIAnU,EAAAoU,uBAAA,SAAAC,GACArU,EAAAgT,aAAAqB,EACArU,EAAAuJ,MAAA8K,EAAA9K,MACAvJ,EAAAmH,SAAAyF,QAAA,UAAA,GACA5M,EAAAsM,OAAA+H,EAAA9D,MACAvQ,EAAAmH,SAAAyF,QAAA,MAAA,KACA5M,EAAA8G,OAAAuN,EAAA9D,OAEAvQ,EAAAiH,MAAA,GACAjH,EAAAgU,iBAGAhU,EAAAsU,iBAAA,WAEAtU,EAAAuJ,MAAA0I,OACAjS,EAAAsM,OAAA2F,OACAjS,EAAA8G,OAAAmL,OACAjS,EAAAgU,iBAIAhU,EAAAuU,mBAAA,WACA,MAAAvU,GAAAmH,SAAAyF,QAAA,MAAA,IAAA5M,EAAAmH,SAAAyF,QAAA,UAAA,IAGA5M,EAAAwU,eAAA,WACA,MAAAxU,GAAAmH,SAAAyF,QAAA,MAAA,IAGA5M,EAAAyU,cAAA,SAAApR,GACArD,EAAA2M,SAAAtJ,IAAArD,EAAA2M,SAAAtJ,IAaAyG,EAAAG,UAAA5J,KAAA,SAAAmJ,GACAsJ,EAAAtJ,EACAxJ,EAAAqS,kBAAAxF,EAAAuD,MAAA5G,EAAAmD,UAAA+D,OAAA,SAAArN,GACA,MAAAA,GAAA+G,SAAA/G,EAAAqR,eACA1E,OAAA,QACAM,IAAA,SAAAjN,GACA,OAAAkF,KAAAlF,EAAAkF,KAAA+J,UAAAG,EAAApP,MACAkN,UAIAvQ,EAAAkH,OACA2D,QAAA/C,IAAA,qDACA9H,EAAA+T,eCvOA,QAAAtJ,gBAAAD,EAAAjD,EAAA3E,EAAAuI,GAOA,QAAAJ,GAAAjH,GACAA,EAAAF,QAAAC,YAAA,GAAA,IAEA2G,EAAAM,MAAAhH,EAAA,gDACAyD,EAAA,WACAiD,EAAAM,MAAAhH,EAAA,gDACAyD,EAAA,WACAiD,EAAAM,MAAAhH,EAAA,gDACAyD,EAAA,WACAiD,EAAAM,MAAAhH,EAAA,gDACAyD,EAAA,WACAiD,EAAAM,MAAAhH,EAAA,+CACAyD,EAAA,WACAiD,EAAAM,MAAA,qBACAlI,EAAA4B,SAAA2P,UACA,MACA,MACA,MACA,MACA,KAGA,QAAA9I,GAAAvH,GACAqH,EAAAE,UAAAhL,KAAA0K,EAAAjH,GACA,WACAhB,MAAAiB,KAAA,qCA9BA,OACAsH,QAAAA,EACAN,mBAAAA,GCJA,QAAAI,wBAAA1I,GAOA,QAAA4I,KACA,MAAA5I,GAAAc,IAAA,uBAGA,QAAA6H,KACA,MAAA3I,GAAAc,IAAA,wBAVA,OACA8H,QAAAA,EACAD,SAAAA,GCJA,QAAArB,oBAAAtH,EAAAqH,EAAA6K,GAUA,QAAAC,GAAAC,EAAA1N,GAEA,MADA0D,SAAA/C,IAAA,6BAAAX,GACA1E,EAAAqS,IAAA,uBAAAD,MAAAjR,QAAAmR,OAAAF,GAAA1N,SAAAA,IAGA,QAAAmD,GAAAuK,GACA,MAAA/K,GAAAG,UAAA5J,KAAA,SAAA6J,GAEA,GAAA/C,EAOA,OALAA,GADA,UAAA+C,EAAAC,WAAAA,WACAD,EAAAC,WAAA6K,OAAAC,gBAEA/K,EAAAC,WAAA+K,QAAAD,gBAGApI,EAAAhJ,YAAAsD,IAAA,IAAAA,GAAA,MAAAA,EACAwN,EAAAQ,wBAAA9U,KAAA,SAAA8G,GACA,MAAAyN,GAAAC,EAAA1N,IACA,SAAAnD,GACA,KAAAA,KAGA4Q,EAAAC,EAAA1N,KA9BA,GAAA+G,IACA5D,SAAAA,EAGA,OAAA4D,GCNA,QAAAkH,cAAAvS,GAMA,QAAAa,GAAA2R,EAAAvR,EAAAqB,EAAAG,GACA,GAAApB,GAAArB,EAAAsB,MACAhD,YAAA,yBACApB,WAAA,oBACAkE,KAAA,KACAI,SACAgR,SAAA,WACA,MAAAA,IAEAvR,QAAA,WAAA,MAAAA,IACAqB,GAAA,WACA,MAAAA,IAEAG,OAAA,WACA,MAAAA,MAKApB,GAAAI,OAAAjE,KAAA,aAEA,WACAiF,MA1BA,OACAnB,KAAAT,GAoCA,QAAA4R,mBAAAtV,EAAA4K,EAAAyK,EAAAvR,EAAAqB,EAAAG,GAEAtF,EAAA8D,QAAAA,EACA9D,EAAAqV,SAAAA,EAEArV,EAAAmF,GAAA,WACAyF,EAAAxF,QACAxB,QAAAC,YAAAsB,IACAA,KAIAnF,EAAAsF,OAAA,WACAsF,EAAArF,UACA3B,QAAAC,YAAAyB,IACAA,KCtDA,QAAAiQ,uBAGAC,KAAArR,KAAA,SAAAsR,EAAArR,EAAAjD,EAAA8C,EAAA3D,GAGA,GAAAoK,GAAA9G,QAAA+G,UAAA,KAAA,iBACA9H,EAAA6H,EAAAnH,IAAA,aACAqC,IAEAhC,SAAAC,YAAAI,KACA2B,EAAA,KAAA3B,GAEAL,QAAAC,YAAAO,GACAR,QAAAC,YAAA1C,GACAyE,EAAA,SAAA,QAAA6P,EAAA,SAEA7P,EAAA,YAAAzE,EAGAyE,EAAA,SAAAxB,EAEAwB,EAAA,SAEAtF,KAAA,WAEA,MADAuK,SAAA/C,IAAAxH,GACAA,IAGAuK,QAAA/C,IAAAlC,EAEA,IAAA1B,GAAArB,EAAAsB,KAAAyB,EAEA1B,GAAAI,OAAAjE,QCjCA,QAAAyJ,eAAArH,EAAA4L,EAAAqH,GAaA,QAAAC,GAAAC,GACAnT,EAAAqS,IAAA,0BAAAc,GACAvV,KAAA,SAAAwV,GACAhL,QAAA/C,IAAA,kCACAjD,EAAAiQ,IAAA,SAAAc,IACA,SAAAE,GACAjL,QAAA/C,IAAA,0BAAAgO,KAIA,QAAAvS,KACA,GAAAwS,GAAAlR,EAAAtB,IAAA,SAQA,OAPAK,SAAAC,YAAAkS,KACAA,EAAAtT,EAAAc,IAAA,yBAAAlD,KAAA,SAAAC,GACA,MAAAA,GAAAA,OAEAuE,EAAAiQ,IAAA,SAAAiB,IAGAA,EAGA,QAAA9L,KACA,GAAA+L,GAAAnR,EAAAtB,IAAA,aAQA,OAPAK,SAAAC,YAAAmS,KACAA,EAAAvT,EAAAc,IAAA,6BAAAlD,KAAA,SAAAC,GACA,MAAAA,GAAAA,OAEAuE,EAAAiQ,IAAA,aAAAkB,IAGAA,EAGA,QAAAC,KACApR,EAAAqR,OAAA,cAGA,QAAAC,KACA,QAAAC,KACA,GAAAD,GAAAtR,EAAAtB,IAAA,kBACA,KAAAK,QAAAC,YAAAsS,GAAA,CACA,GAAAxH,GAAAN,EAAAO,OAEA,OADAD,GAAAtK,QAAA8R,GACAxH,EAAAE,QAGA,MAAApM,GAAAc,IAAA,+BACAlD,KAAA,SAAAgW,GACA,GAAAN,GAAAM,EAAA/V,IAEA,OADAuE,GAAAiQ,IAAA,kBAAAiB,GACAM,EAAA/V,OAIA,MAAA8V,KAAA/V,KAAA,SAAA8V,GACA,MAAAA,KAnEA,GAAAtR,GAAA6Q,EAAA,WAEA,QACAC,IAAAA,EACApS,IAAAA,EACA0G,QAAAA,EACAgM,eAAAA,EACAE,gBAAAA,GCTA,QAAAG,gBASA,QAAAC,GAAAC,GACAC,EAAAD,EAIA,QAAAE,GAAAC,EAAAC,EAAAC,GACAD,GAAAC,GACAJ,IAIA,QAAAK,GAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,GAAAC,KA0LA,OAxLAA,GAAAC,MACAC,IAAA,UACA3R,KAAA,mBACA4R,iBACA5R,KAAA,SACA6R,MAAA,aAIA,WAAAP,GACAG,EAAAC,MAEAC,IAAA,OACA3R,KAAA,0BACA8R,eAAA,iBACAF,iBACAC,MAAA,aAMAb,GACAS,EAAAC,MAEAC,IAAA,OACA3R,KAAA,kBACA8R,eAAA,iBACAF,iBACA5R,KAAA,OACA6R,MAAA,OACAE,UAAA,EACArO,KAAA,iFAIAuN,GACAQ,EAAAC,MAEAC,IAAA,OACA3R,KAAA,kBACA8R,eAAA,iBACAF,iBACA5R,KAAA,OACA6R,MAAA,OACAE,UAAA,EACAC,YAAA,gCAMAd,GACAO,EAAAC,MAEAC,IAAA,SACA3R,KAAA,kBACA8R,eAAA,iBACAF,iBACA5R,KAAA,OACA+R,UAAA,EACAF,MAAA,aAMAV,GACAM,EAAAC,MAEAC,IAAA,WACA3R,KAAA,kBACA8R,eAAA,iBACAF,iBACA5R,KAAA,OACA+R,UAAA,EACAF,MAAA,cAMAJ,EAAAA,EAAA5G,SAEA8G,IAAA,QACA3R,KAAA,kBACA8R,eAAA,iBACAF,iBACA5R,KAAA,SACA6R,MAAA,QACAE,UAAA,EACArO,KAAA,8GAIAiO,IAAA,UACA3R,KAAA,kBACA8R,eAAA,iBACAF,iBACA5R,KAAA,SACA6R,MAAA,UACAnO,KAAA,oDAMA6N,IACAE,EAAAC,MAEAC,IAAA,YACA3R,KAAA,mBACA8R,eAAA,mDACAF,iBACA5R,KAAA,SACA6R,MAAA,YACAnO,KAAA,+CAIA+N,EAAAC,MAEAC,IAAA,aACA3R,KAAA,mBACA8R,eAAA,iBACAF,iBACAC,MAAA,gBACAlO,UACAnB,KAAA,yBAAAgI,MAAA,aACAhI,KAAA,oBAAAgI,MAAA,aACAhI,KAAA,4BAAAgI,MAAA,aAOA4G,GACAK,EAAAC,MAEAC,IAAA,aACA3R,KAAA,wBACA8R,eAAA,iBACAF,iBACAC,MAAA,eACAlO,UACAkO,MAAA,OAAAI,GAAA,WACAJ,MAAA,SAAAI,GAAA,QACAJ,MAAA,OAAAI,GAAA,WACAJ,MAAA,QAAAI,GAAA,YACAJ,MAAA,SAAAI,GAAA,aACAJ,MAAA,OAAAI,GAAA,cAOAZ,GACAI,EAAAC,MAEA1R,KAAA,2BACA8R,eAAA,gEACAF,iBACAC,MAAA,kBACAK,SAAAZ,KAMAE,GACAC,EAAAC,MAEA1R,KAAA,sBACA8R,eAAA,gEACAF,iBACAC,MAAA,qBACAnO,KAAA,yGAMA+N,EAGA,QAAAU,KACA,OACAC,WAAA,SAAAC,EAAAC,GACA,GAAA9H,GAAA8H,GAAAD,CACA,OAAA7H,GACA,wpBAAA+H,KAAA/H,IACA,kCAAA+H,KAAA/H,IAEA,GAEAzM,QAAA,6CAIA,QAAAyU,GAAAC,GACA,OACAL,WAAA,SAAAC,EAAAC,EAAAjW,GACA,GAAAmO,GAAA6H,GAAAC,CACA,OAAA9H,IACA,EAEAiI,EAAAC,KAAAC,MAAAhX,OAAA,EACAmL,EAAA8L,IAAAH,EAAAC,KAAAC,MAAA,SAAAE,GACA,MAAAxW,GAAAyW,MAAAtQ,MAAAqQ,EAAArQ,MAAAqQ,EAAAE,eAGA,GAEAhV,QAAA,sFAIA,QAAAiV,GAAAC,EAAAlV,EAAAmV,GACA,OACAd,WAAA,SAAAC,EAAAC,GACA,GAAA9H,GAAA8H,GAAAD,CACA,OAAA7H,GACAyI,EAAAV,KAAA/H,IAEA,GAGAzM,SAAAmV,EAAA,kBAAA,MAAAnV,EAAA,KAIA,QAAAoV,GAAAV,GACA,OACAW,OAEAC,QAAA,WACAzB,iBAAAC,MAAA,WACAyB,aAEA3B,IAAA,OACA3R,KAAA,kBACA4R,iBACA5R,KAAA,OACA6R,MAAA,OACAE,UAAA,EACAC,YAAA,0BACAtO,KAAA,oBAEA6P,YACAC,UAAArB,KAEAsB,SACAC,SAAA/C,KAIAgB,IAAA,OACA3R,KAAA,kBACA4R,iBACA5R,KAAA,SACA6R,MAAA,OACAE,UAAA,EACAC,YAAA,OACAtO,KAAA,oBAEA6P,YACAI,KAAAX,EAAA,YAAA,oBAAA,IAEAS,SACAC,SAAA/C,KAIAgB,IAAA,UACA3R,KAAA,kBACA4R,iBACA5R,KAAA,OACA6R,MAAA,WACAG,YAAA,YACAtO,KAAA,oCAEA6P,YACAK,QAAAZ,EAAA,cAAA,qEAIArB,IAAA,cACA3R,KAAA,kBACA4R,iBACA5R,KAAA,OACA6R,MAAA,eACAG,YAAA,uCACAtO,KAAA,uFAIAiO,IAAA,0BACA3R,KAAA,mBACA8R,eAAA,qBACAF,iBACA5R,KAAA,SACA6R,MAAA,mCACAnO,KAAA,oEAIAiO,IAAA,MACA3R,KAAA,mBACA4R,iBACA5R,KAAA,SACA6R,MAAA,UACAnO,KAAA,oBAEA+P,SACAC,SAAA/C,KAIAgB,IAAA,UACAG,eAAA,aACA9R,KAAA,kBACA4R,iBACA5R,KAAA,OACA6R,MAAA,uBACAE,UAAA,EACArO,KAAA,oBAEA+P,SACAC,SAAA/C,KAIAgB,IAAA,SACAG,eAAA,aACA9R,KAAA,kBACA4R,iBACA5R,KAAA,OACA6R,MAAA,eACAE,UAAA,EACArO,KAAA,oBAEA+P,SACAC,SAAA/C,OAOA0C,QAAA,WACAzB,iBAAAC,MAAA,YACAyB,aAGA3B,IAAA,SACA3R,KAAA,wBACA4R,iBACAC,MAAA,UACAnO,KAAA,wCAEA6P,YACArC,OAAA8B,EAAA,iBAAA,gDAAA,QAOAK,QAAA,WACA1B,IAAA,UACAC,iBAAAC,MAAA,WACAyB,aAEA3B,IAAA,eACA3R,KAAA,mBACA4R,iBACA5R,KAAA,SACA6R,MAAA,gBACAlO,UACAnB,KAAA,WAAAgI,MAAA,aACAhI,KAAA,QAAAgI,MAAA,UACAhI,KAAA,UAAAgI,MAAA,YACAhI,KAAA,QAAAgI,MAAA,UACAhI,KAAA,OAAAgI,MAAA,UAGAiJ,SACAC,SAAA/C,KAIAgB,IAAA,cACA3R,KAAA,kBACA4R,iBACA5R,KAAA,OACA6R,MAAA,WACAE,UAAA,GAEA0B,SACAC,SAAA/C,KAIAgB,IAAA,eACA3R,KAAA,mBACA4R,iBACA5R,KAAA,SACA6R,MAAA,oBACAlO,UACAnB,KAAA,WAAAgI,MAAA,aACAhI,KAAA,QAAAgI,MAAA,UACAhI,KAAA,UAAAgI,MAAA,YACAhI,KAAA,OAAAgI,MAAA,SACAhI,KAAA,QAAAgI,MAAA,WAGAiJ,SACAC,SAAA/C,OAQA0C,QAAA,WACAzB,iBAAAC,MAAA,SACAyB,aAEA3B,IAAA,QACA3R,KAAA,mBACA4R,iBACA5R,KAAA,SACA6R,MAAA,mBACAnO,KAAA,2DAIAiO,IAAA,cACA3R,KAAA,mBACA4R,iBACA5R,KAAA,SACA6R,MAAA,sBACAnO,KAAA,mEAEA+P,SACAC,SAAA/C,KAIAgB,IAAA,iBACA3R,KAAA,mBACA4R,iBACA5R,KAAA,SACA6R,MAAA,6BAIAF,IAAA,SACA3R,KAAA,kBACA4R,iBACA5R,KAAA,OACA6R,MAAA,oBACAE,UAAA,EACArO,KAAA,oCAOA8J,YAEA6F,QAAA,WACAzB,iBACAC,MAAA,kBAEAyB,aAEA3B,IAAA,UACA3R,KAAA,kBACA4R,iBACA5R,KAAA,SACA6R,MAAA,kCACAgC,YACAC,KAAA,cAKAnC,IAAA,4BACA3R,KAAA,mBACA4R,iBACA5R,KAAA,SACA6R,MAAA,8BACAnO,KAAA,gFAIAiO,IAAA,mBACA3R,KAAA,mBACA4R,iBACA5R,KAAA,SACA6R,MAAA,6BACAnO,KAAA,+CAKAiO,IAAA,cACA3R,KAAA,kBACA4R,iBACA5R,KAAA,OACA6R,MAAA,0BACAG,YAAA,qCACAtO,KAAA,kEAMAiO,IAAA,mBACA3R,KAAA,wBACA4R,iBACAC,MAAA,mBACAlO,UACAkO,MAAA,oBAAAI,GAAA,aACAJ,MAAA,eAAAI,GAAA,aAEAvO,KAAA,0EAIAiO,IAAA,YACA3R,KAAA,kBACA4R,iBACA5R,KAAA,OACA6R,MAAA,aACAE,UAAA,OAMAsB,QAAA,WACAzB,iBACAC,MAAA,qBAEAyB,aAEA3B,IAAA,aACA3R,KAAA,mBACA4R,iBACA5R,KAAA,SACA6R,MAAA,OACAlO,UACAnB,KAAA,oBAAAgI,MAAA,gBACAhI,KAAA,kDAAAgI,MAAA,YAKAmH,IAAA,kCACA3R,KAAA,yBACA4R,iBACA5R,KAAA,OACA6R,MAAA,2BACAE,UAAA,EACA8B,YACAC,KAAA,QAMAnC,IAAA,wBACA3R,KAAA,kBACA4R,iBACA5R,KAAA,SACA6R,MAAA,0BACAE,UAAA,EACA8B,YACAC,KAAA,cAKAnC,IAAA,2BACA3R,KAAA,mBACA4R,iBACA5R,KAAA,SACA6R,MAAA,wBACAnO,KAAA,gDAOA2P,QAAA,WACA1B,IAAA,gBACAC,iBAAAC,MAAA,kBACAyB,aAGA3B,IAAA,wBACA3R,KAAA,mBACA4R,iBACA5R,KAAA,SACA6R,MAAA,iBACAnO,KAAA,iEAIA2P,QAAA,eACAvB,eAAA,+BACAwB,aAEAD,QAAA,iBACAzB,iBACAC,MAAA,UAEAyB,aAEA3B,IAAA,YACA3R,KAAA,aACA4R,iBACAiC,YACAC,KAAA,SAKA9T,KAAA,aAGA2R,IAAA,YACA3R,KAAA,aAAA4R,iBAAAiC,YAAAC,KAAA,WAKAT,QAAA,iBACAzB,iBACAC,MAAA,aAEAyB,aAEA3B,IAAA,cACA3R,KAAA,aAAA4R,iBAAAiC,YAAAC,KAAA,SAGA9T,KAAA,aAGA2R,IAAA,cACA3R,KAAA,aAAA4R,iBAAAiC,YAAAC,KAAA,WAKAT,QAAA,iBACAzB,iBACAC,MAAA,aAEAyB,aAEA3B,IAAA,cACA3R,KAAA,aAAA4R,iBAAAiC,YAAAC,KAAA,SAGA9T,KAAA,aAGA2R,IAAA,cACA3R,KAAA,aAAA4R,iBAAAiC,YAAAC,KAAA,WAMAT,QAAA,iBACAzB,iBACAC,MAAA,MAEAyB,aAEA3B,IAAA,QACA3R,KAAA,aAAA4R,iBAAAiC,YAAAC,KAAA,SAGA9T,KAAA,aAGA2R,IAAA,QACA3R,KAAA,aAAA4R,iBAAAiC,YAAAC,KAAA,WAMAT,QAAA,iBACAzB,iBACAC,MAAA,SAEAyB,aAEA3B,IAAA,UACA3R,KAAA,aAAA4R,iBAAAiC,YAAAC,KAAA,SAGA9T,KAAA,aAGA2R,IAAA,UACA3R,KAAA,aAAA4R,iBAAAiC,YAAAC,KAAA,WAMAT,QAAA,iBACAzB,iBACAC,MAAA,SAEAyB,aAEA3B,IAAA,UACA3R,KAAA,aAAA4R,iBAAAiC;AAAAC,KAAA,SAGA9T,KAAA,aAGA2R,IAAA,UACA3R,KAAA,aAAA4R,iBAAAiC,YAAAC,KAAA,WAMAT,QAAA,iBACAzB,iBACAC,MAAA,SAEAyB,aAEA3B,IAAA,WACA3R,KAAA,aAAA4R,iBAAAiC,YAAAC,KAAA,SAGA9T,KAAA,aAGA2R,IAAA,WACA3R,KAAA,aAAA4R,iBAAAiC,YAAAC,KAAA,WAMAT,QAAA,iBACAzB,iBACAC,MAAA,cAEAyB,aAEA3B,IAAA,UACA3R,KAAA,aAAA4R,iBAAAiC,YAAAC,KAAA,SAGA9T,KAAA,aAGA2R,IAAA,UACA3R,KAAA,aAAA4R,iBAAAiC,YAAAC,KAAA,WAMAT,QAAA,iBACAzB,iBACAC,MAAA,aAEAyB,aAEA3B,IAAA,SACA3R,KAAA,aAAA4R,iBAAAiC,YAAAC,KAAA,SAGA9T,KAAA,aAGA2R,IAAA,SACA3R,KAAA,aAAA4R,iBAAAiC,YAAAC,KAAA,WAMAT,QAAA,iBACAzB,iBACAC,MAAA,aAEAyB,aAEA3B,IAAA,eACA3R,KAAA,aAAA4R,iBAAAiC,YAAAC,KAAA,SAGA9T,KAAA,aAGA2R,IAAA,eACA3R,KAAA,aAAA4R,iBAAAiC,YAAAC,KAAA,WAMAT,QAAA,iBACAzB,iBACAC,MAAA,WAEAyB,aAEA3B,IAAA,aACA3R,KAAA,aAAA4R,iBAAAiC,YAAAC,KAAA,SAGA9T,KAAA,aAGA2R,IAAA,aACA3R,KAAA,aAAA4R,iBAAAiC,YAAAC,KAAA,WAMAT,QAAA,iBACAzB,iBACAC,MAAA,MAEAyB,aAEA3B,IAAA,QACA3R,KAAA,aAAA4R,iBAAAiC,YAAAC,KAAA,SAGA9T,KAAA,aAGA2R,IAAA,QACA3R,KAAA,aAAA4R,iBAAAiC,YAAAC,KAAA,WAMAT,QAAA,iBACAzB,iBACAC,MAAA,OAEAyB,aAEA3B,IAAA,SACA3R,KAAA,aAAA4R,iBAAAiC,YAAAC,KAAA,SAGA9T,KAAA,aAGA2R,IAAA,SACA3R,KAAA,aAAA4R,iBAAAiC,YAAAC,KAAA,eAYA1P,aAEAuN,IAAA,aACA3R,KAAA,mBACA4R,iBACA5R,KAAA,SACA6R,MAAA,aACAlO,UACAnB,KAAA,OAAAgI,MAAA,SACAhI,KAAA,SAAAgI,MAAA,WACAhI,KAAA,UAAAgI,MAAA,eAKAmH,IAAA,gBACA3R,KAAA,mBACA4R,iBACA5R,KAAA,SACA6R,MAAA,kBACAlO,UACAnB,KAAA,0BAAAgI,MAAA,UACAhI,KAAA,0BAAAgI,MAAA,aAEA9G,KAAA,0EAIAiO,IAAA,gBACA3R,KAAA,mBACA4R,iBACA5R,KAAA,SACA6R,MAAA,kBACAlO,UACAnB,KAAA,YAAAgI,MAAA,SACAhI,KAAA,aAAAgI,MAAA,QAEA9G,KAAA,4GAIA2P,QAAA,WACA1B,IAAA,SACAG,eAAA,6BACAF,iBAAAC,MAAA,UACAyB,aAEA3B,IAAA,OACA3R,KAAA,kBACA4R,iBACA5R,KAAA,OACA6R,MAAA,OACAE,UAAA,KAIAJ,IAAA,OACA3R,KAAA,kBACA4R,iBACA5R,KAAA,SACA6R,MAAA,OACAG,YAAA,OACAD,UAAA,KAIAJ,IAAA,MACA3R,KAAA,mBACA4R,iBACA5R,KAAA,SACA6R,MAAA,aAIAF,IAAA,WACA3R,KAAA,kBACA4R,iBACA5R,KAAA,OACA6R,MAAA,cAIAF,IAAA,WACA3R,KAAA,kBACA4R,iBACA5R,KAAA,WACA6R,MAAA,cAIAF,IAAA,kBACA3R,KAAA,kBACA4R,iBACA5R,KAAA,OACA6R,MAAA,mBACAnO,KAAA,oFAIA1D,KAAA,2BACA4R,iBACAC,MAAA,kBACAK,SAAA,aACA9N,WAAA,cAQAiP,QAAA,WACA1B,IAAA,UACAG,eAAA,8BACAF,iBAAAC,MAAA,WACAyB,aAEA3B,IAAA,MACA3R,KAAA,kBACA4R,iBACA5R,KAAA,OACA6R,MAAA,MACAE,UAAA,KAIAJ,IAAA,WACA3R,KAAA,kBACA4R,iBACA5R,KAAA,OACA6R,MAAA,WACAnO,KAAA,gDAIAiO,IAAA,WACA3R,KAAA,kBACA4R,iBACA5R,KAAA,WACA6R,MAAA,WACAnO,KAAA,gDAIAiO,IAAA,SACA3R,KAAA,kBACA4R,iBACA5R,KAAA,OACA6R,MAAA,aAIAF,IAAA,kBACA3R,KAAA,kBACA4R,iBACA5R,KAAA,OACA6R,MAAA,mBACAnO,KAAA,oFAIA1D,KAAA,2BACA4R,iBACAC,MAAA,kBACAK,SAAA,aACA9N,WAAA,eASAwC,WAEAyM,QAAA,WACA1B,IAAA,YACAC,iBAAAC,MAAA,aACAyB,WAAAvC,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,aAAA,KAGAsC,QAAA,WACA1B,IAAA,UACAC,iBAAAC,MAAA,WACAyB,WAAAvC,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,WAAA,KAGAsC,QAAA,WACA1B,IAAA,WACAC,iBAAAC,MAAA,YACAyB,WAAAvC,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,YAAA,GAAAlG,SACA8G,IAAA,iBACA3R,KAAA,kBACA8R,eAAA,iBACAF,iBACA5R,KAAA,SACA6R,MAAA,WACAnO,KAAA,iJAKA2P,QAAA,WACA1B,IAAA,aACAC,iBAAAC,MAAA,kBACAyB,WAAAvC,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,UAAA,KAGAsC,QAAA,WACA1B,IAAA,SACAC,iBAAAC,MAAA,UACAyB,WAAAvC,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,UAAA,KAGA/Q,KAAA,gBACA2R,IAAA,UACAC,iBACAmC,QAAA,0BACAC,cAAA,cACAC,OAAAlD,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,WAAA,GAAA,GACAmD,cACA7P,SAAA,EACA4M,KAAA,KACAC,OAAA,KACAiD,QAAA,KACA3R,KAAA,KACAmM,cAAA,EACAyF,MAAA,EACAzH,WAAA,EACA0H,WAAA,OACAC,YAAA,SAAA,MAAA,cAUA5B,OAEA1S,KAAA,OACA4R,iBACA2C,OACA,oJACA,2HACA,4CAKAvU,KAAA,gBACA2R,IAAA,QACAmB,MAAAL,EAAAC,KACAd,iBACAmC,QAAA,eACAC,cAAA,WACAC,SAEAtC,IAAA,OACA3R,KAAA,kBACA4R,iBACA5R,KAAA,OACA6R,MAAA,cAIAF,IAAA,WACA3R,KAAA,kBACA4R,iBACA5R,KAAA,OACA6R,MAAA,cAIAF,IAAA,cACA3R,KAAA,mBACA4R,iBACA5R,KAAA,SACA6R,MAAA,mBAIAF,IAAA,cACA3R,KAAA,mBACA4R,iBACA5R,KAAA,SACA6R,MAAA,sBAEA0B,YACAiB,oBAAAhC,EAAAC,IAEAlY,MACAkY,UAAAA,KAKAyB,cACA1R,KAAA,KACAiS,SAAA,KACAC,aAAA,EACA3B,aAAA,OA9rCA,GAAArC,EAEA,QACAyC,UAAAA,EACA3C,kBAAAA,GCkBA,QAAAmE,kBAAA1a,EAAA8J,EAAAiM,EAAApB,EAAA2B,EAAAqE,EAAAvF,EAAA3K,EAAAhF,GAUA,QAAAmV,GAAAC,GACAA,EAAAC,SACAhR,EAAA6L,IAAA3V,EAAA+V,QACAjM,EAAAmM,iBACA4E,EAAAE,eACApG,EAAAqG,aACAhb,EAAAib,iBACA7F,EAAAjR,KAAA,mBAAA,kGAAA,WACAsG,EAAAY,WACA,WACArL,EAAAib,iBAAA,KAnBAjb,EAAA+V,OAAAA,EACA/V,EAAA4a,OAAAA,EAEA5a,EAAAib,iBAAA,EAEA3E,EAAAC,kBAAA,WACAvW,EAAAib,iBAAA,IAmBAN,EAAA5E,EAEA/V,EAAAga,OAAA1D,EAAA4C,UAAAlZ,EAAA+V,QAEA/V,EAAAkb,WAEA3S,KAAA,OACAsQ,MAAA8B,EAAAxB,KACAa,OAAAha,EAAAga,OAAAb,OAGA5Q,KAAA,gBACAsQ,MAAA8B,EAAAlC,KACAuB,OAAAha,EAAAga,OAAAvB,OAGAlQ,KAAA,YACAsQ,MAAA8B,EAAApH,UACAyG,OAAAha,EAAAga,OAAAzG,YAGAhL,KAAA,aACAsQ,MAAA8B,EAAAxQ,WACA6P,OAAAha,EAAAga,OAAA7P,aAGA5B,KAAA,WACAsQ,MAAA8B,EAAAhO,SACAqN,OAAAha,EAAAga,OAAArN,WAIA3M,EAAAmb,UAEA5P,QAAA,EACAC,MAAA,WAGAD,QAAA,EACAC,MAAA,gBAGAD,QAAA,EACAC,MAAA,qBAGAD,QAAA,EACAC,MAAA,sBAGAD,QAAA,EACAC,MAAA,mBAIA,KAAA,GAAAC,GAAA,EAAAA,EAAAzL,EAAAmb,QAAAzZ,OAAA+J,IACAhG,EAAAiG,GAAA1L,EAAAmb,QAAA1P,GAAAD,SACAxL,EAAAmb,QAAA1P,GAAAF,QAAA,EAIAvL,GAAAob,eAAA,SAAAP,GACA,MAAAA,GAAAQ,SAAAR,EAAAS,YAAAT,EAAAC,QAGA9a,EAAAub,gBAAA,SAAA3P,GACAnG,EAAA2B,GAAApH,EAAAmb,QAAAvP,GAAAJ,OACA,GAAAI,GACA5L,EAAAwb,eCtHA,QAAA7G,mBAAAlS,EAAA4L,EAAAxL,GAeA,QAAA4Y,KAEA,QAAArF,KACA,IAAAxS,QAAAC,YAAA6X,GAAA,CACA,GAAA/M,GAAAN,EAAAO,OAEA,OADAD,GAAAtK,QAAAqX,GACA/M,EAAAE,QAGA,MAAApM,GAAAc,IAAA,6BACAlD,KAAA,SAAAsb,GAIA,MAFA9Q,SAAA/C,IAAA,wCACA4T,EAAAC,EAAArb,KACAqb,EAAArb,MAEA,SAAA0D,GACA,KAAAA,KAIA,MAAAoS,KAAA/V,KAAA,SAAAqb,GACA,MAAAA,GAAAA,aAOA,QAAAvG,KAUA,MATAtS,GAAAsB,MACAhD,YAAA,gDACApB,WAAA,8BACAkE,KAAA,KACAI,SACAqX,WAAAD,KAGA9M,EAAAN,EAAAO,QACAD,EAAAE,QAGA,QAAA+M,GAAAzU,GACA0U,EAAA1U,EACA0D,QAAA/C,IAAA,qBAAAX,GACAwH,EAAAtK,QAAA8C,GAGA,QAAA6T,KACAnQ,QAAA/C,IAAA,2BACA4T,EAAAzJ,OA/DA,GAAAyJ,GACAG,EAEA3N,GACA3K,IAAAkY,EACAT,WAAAA,EACAY,OAAAA,EACAzG,sBAAAA,EAGA,OAAAjH,EA8BA,IAAAS,GC9CA,GAAAmN,aAAAlY,QAAAmY,OAAA,eAAA,sBAAA,SAAA,YAAA,eAAA,WAAA,gBAAA,iBAAA,UAAA,YAAA,UAAA,iBAAA,wCAAA,OAAA,SAAA,kBAAA,+BAAA,YAAA,aAAA,kBAAA,SAAA,cAEAnY,SAAAmY,OAAA,eAAAhG,QAAA,iBAAA,qBAAA,oBAAA,gBAAA,6BAAA,SAAAiG,EAAAC,EAAAC,EAAAC,EAAAC,GAEAD,EAAAE,WAAA,EACAD,EAAAE,YAAA,GAEAN,EACAxQ,MAAA,kBACArK,YAAA,yCACApB,WAAA,0BACAwc,aAAA,eACA7S,SACArC,SAAA,GAEAzB,QACAyH,WACAC,mBACAC,MAAA,EACAC,aAAA,EACAjB,QAAA0F,OACAzF,QAAAyF,OACAxF,OAAAwF,OACAvF,OAAAuF,UAGAzG,MAAA,UACAgR,IAAA,UACArb,YAAA,iCACApB,WAAA,mBACAsE,SACA0R,QAAA,gBAAA,SAAAjM,GACA,MAAAA,GAAAvG,QAEAuP,YAAA,gBAAA,SAAAhJ,GACA,MAAAA,GAAAG,eAIAuB,MAAA,eACAgR,IAAA,QACArb,YAAA,iCACApB,WAAA,mBACAsE,SACA0R,QAAA,gBAAA,SAAAjM,GACA,MAAAA,GAAAvG,WAIAiI,MAAA,oBACAgR,IAAA,aACArb,YAAA,iCACApB,WAAA,mBACAsE,SACA0R,QAAA,gBAAA,SAAAjM,GACA,MAAAA,GAAAvG,WAIAiI,MAAA,qBACAgR,IAAA,cACArb,YAAA,iCACApB,WAAA,mBACAsE,SACA0R,QAAA,gBAAA,SAAAjM,GACA,MAAAA,GAAAvG,WAIAiI,MAAA,mBACAgR,IAAA,YACArb,YAAA,iCACApB,WAAA,mBACAsE,SACA0R,QAAA,gBAAA,SAAAjM,GACA,MAAAA,GAAAvG,WAIAiI,MAAA,iBACAgR,IAAA,UACArb,YAAA,iCACApB,WAAA,mBACAsE,SACA0R,QAAA,gBAAA,SAAAjM,GACA,MAAAA,GAAAvG,WAIAiI,MAAA,cACAgR,IAAA,OACArb,YAAA,iCACApB,WAAA,mBACAsE,SACA0R,QAAA,gBAAA,SAAAjM,GACA,MAAAA,GAAAvG,WAIAiI,MAAA,SACAgR,IAAA,SACArb,YAAA,gCACApB,WAAA,kBACAsE,SACA2H,OAAA,eAAA,SAAAH,GACA,MAAAA,GAAAtI,WAIAiI,MAAA,kBACAgR,IAAA,YACArb,YAAA,gCACApB,WAAA,kBACAsE,SACA2H,OAAA,eAAA,SAAAH,GACA,MAAAA,GAAAtI,WAIAiI,MAAA,kBACAgR,IAAA,YACArb,YAAA,gCACApB,WAAA,kBACAsE,SACA2H,OAAA,eAAA,SAAAH,GACA,MAAAA,GAAAtI,WAIAiI,MAAA,mBACAgR,IAAA,aACArb,YAAA,gCACApB,WAAA,kBACAsE,SACA2H,OAAA,eAAA,SAAAH,GACA,MAAAA,GAAAtI,WAIAiI,MAAA,UACAgR,IAAA,UACArb,YAAA,iCACApB,WAAA,mBACAsE,SACAoY,QAAA,QAAA,SAAAha,GACA,MAAAA,GAAAc,IAAA,gCAIAiI,MAAA,kBACAgR,IAAA,WACArb,YAAA,iCACApB,WAAA,mBACAsE,SACAoY,QAAA,QAAA,SAAAha,GACA,MAAAA,GAAAc,IAAA,gCAIAiI,MAAA,cACAgR,IAAA,OACArb,YAAA,iCACApB,WAAA,mBACAsE,SACAoY,QAAA,QAAA,SAAAha,GACA,MAAAA,GAAAc,IAAA,gCAIAiI,MAAA,gBACAgR,IAAA,SACArb,YAAA,iCACApB,WAAA,mBACAsE,SACAoY,QAAA,QAAA,SAAAha,GACA,MAAAA,GAAAc,IAAA,gCAIAiI,MAAA,UACAgR,IAAA,4HACArb,YAAA,iCACApB,WAAA,mBACAsE,SACAyO,YAAA,gBAAA,SAAAhJ,GACA,MAAAA,GAAAG,eAMAiS,EAAAQ,WAAA,MAGAZ,YAAA/F,QAAA,6BAAA,SAAA4G,GACAA,EAAAC,QAAA,yCAGAd,YAAA/F,QAAA,wBAAA,SAAA8G,GACAA,EAAAC,iBAAA,OAGAhB,YAAA/F,QAAA,gBAAA,SAAAgH,GACAA,EAAAC,iBAAA,KACAD,EAAAE,eAAA,mBAGAnB,YAAAjT,UAAA,UAAA,WACA,MAAA,UAAAzG,EAAAuC,EAAA8C,GACA9C,EAAAuY,KAAA,mBAAA,SAAAC,GACA,KAAAA,EAAAC,QACAhb,EAAAib,OAAA,WACAjb,EAAAuF,WAAAF,EAAA6V,WAGAH,EAAAI,uBAMAzB,YAAApL,OAAA,UAAA,WACA,MAAA,UAAA1N,GACA,GAAAE,GAAA,GAAAC,KAAA,qBAKA,OAJAD,GAAAE,SAAA,OAAAJ,EAAAyL,MACAvL,EAAAE,SAAA,QAAAJ,EAAAuG,OACArG,EAAAE,SAAA,WAAAJ,EAAAwa,UAEAta,EAAAM,cAIAsY,YAAA2B,QAAA,SAAA,aAAA,WAAA,SAAAC,EAAAnW,GACA,MAAA,UAAAgB,GACAhB,EAAA,WACAmW,EAAAC,WAAA,UAAApV,SAKAuT,YAAApL,OAAA,UAAA,OAAA,SAAAxQ,GACA,MAAAA,GAAAY,eAGA+L,EAAA+Q,OACAC,cAAA,SAAAC,GACA,MAAAjR,GAAAhJ,YAAAia,IAAAjR,EAAAkR,OAAAD,IAAAjR,EAAAmR,SAAAF,IAAA,IAAAA,EAAApc,U5BtPAkC,QACAmY,OAAA,eACAlT,UAAA,eAAA/I,cCFA8D,QACAmY,OAAA,eACAlT,UAAA,eAAAzH,cCFAwC,QACAmY,OAAA,eACAlT,UAAA,eAAArG,cAoEAA,aAAAtB,SAAA,QAAA,iBAAA,WAAA,WAEA0C,QACAmY,OAAA,eACAhc,WAAA,uBAAAkF,sBAcAA,qBAAA/D,SAAA,SAAA,iBAAA,OCxFA0C,QACAmY,OAAA,eACAlT,UAAA,gBAAArD,eCCA5B,QACAmY,OAAA,eACAlT,UAAA,iBAAAvB,gBAgBAA,eAAApG,SAAA,YCrBA0C,QACAmY,OAAA,eACAlT,UAAA,WAAAjB,UCFAhE,QACAmY,OAAA,eACAlT,UAAA,kBAAAd,iBA+BAnE,QACAmY,OAAA,eACArL,OAAA,aAAAlI,YAiBAA,WAAAtH,SAAA,cCpDA0C,QACAmY,OAAA,eAAAlT,UAAA,UAAAD,SCDAhF,QACAmY,OAAA,eACAlT,UAAA,kBAAAK,iBCFAtF,QACAmY,OAAA,eACAlT,UAAA,eAAAS,cCFA1F,QACAmY,OAAA,eACAlT,UAAA,aAAAgB,YCFAjG,QACAmY,OAAA,eACA0B,QAAA,gBAAAxd,eAwFAA,cAAAiB,SAAA,QAAA,QAAA,UAAA,kBC1FA0C,QACAmY,OAAA,eACAhc,WAAA,yBAAAkL,wBA2BAA,uBAAA/J,SAAA,SAAA,iBC7BA0C,QACAmY,OAAA,eACAhc,WAAA,mBAAAmL,kBAoDAA,iBAAAhK,SAAA,SAAA,SAAA,QAAA,iBAAA,0BCtDA0C,QACAmY,OAAA,eACA0B,QAAA,eAAA5R,cAgBAA,aAAA3K,SAAA,SClBA0C,QACAmY,OAAA,eACAhc,WAAA,kBAAAgM,iBA4CAA,gBAAA7K,SAAA,SAAA,QAAA,UC7CA0C,QACAmY,OAAA,eACA0B,QAAA,gBAAArR,eAuGAA,cAAAlL,SAAA,SC1GA0C,QACAmY,OAAA,eACAhc,WAAA,0BAAAoO,yBAmOAA,wBAAAjN,SAAA,eAAA,SAAA,KAAA,WAAA,UAAA,gBAAA,QAAA,sBCrOA0C,QACAmY,OAAA,eACAhc,WAAA,mBAAA8R,kBAiPAA,iBAAA3Q,SAAA,SAAA,QAAA,eAAA,SAAA,gBAAA,QAAA,gBAAA,WCnPA0C,QACAmY,OAAA,eACA0B,QAAA,iBAAAhT,gBAuCAA,eAAAvJ,SAAA,UAAA,WAAA,UAAA,0BCzCA0C,QACAmY,OAAA,eACA0B,QAAA,yBAAAtS,wBAiBAA,uBAAAjK,SAAA,SCnBA0C,QACAmY,OAAA,eACA0B,QAAA,qBAAA1T,oBA4CAA,mBAAA7I,SAAA,QAAA,gBAAA,qBC9CA0C,QACAmY,OAAA,eACA0B,QAAA,eAAArI,cAmCAA,aAAAlU,SAAA,aAEA0C,QACAmY,OAAA,eACAhc,WAAA,oBAAAuV,mBAqBAA,kBAAApU,SAAA,SAAA,oBAAA,WAAA,UAAA,KAAA,UC9DA0C,QACAmY,OAAA,eACA7N,QAAA,sBAAAqH,oBMFA,IAAA0I,aAAA,kCACAC,8BAAA,CAEApC,aAAA2B,QAAA,wBAAA,KAAA,QAAA,UAAA,sBAAA,SAAApP,EAAAvL,EAAA0H,EAAA+K,GACA,OAEA4I,oBAAA,SAAAC,GACAF,8BAAA,CACA,KACA,MAAAE,KACA,QACAF,8BAAA,IAKAG,cAAA,SAAAC,GACA9T,EAAAQ,OACA,IAAAuT,GAAAD,GAAAA,EAAAvI,QAAAuI,EAAAvI,OAAAyI,SAAAF,EAAAvI,OAAAyI,QAAAP,YAEA,IAAAM,EAAA,CACA,GAAAza,GAAA,yBAAAwa,EAAAG,OAAA,KAAAH,EAAAI,UAEAJ,GAAAhe,OACAwD,GAAA,WAAAwa,EAAAhe,MAEAiV,EAAApR,KAAAL,GAIA,MAAAuK,GAAAsQ,OAAAL,QAMAxC,YAAA/F,QAAA,WAAA,gBAAA,SAAA6I,EAAAC,GAKA,QAAAC,GAAA/I,GASA,MARAA,GAAAA,MACAA,EAAAyI,QAAAzI,EAAAyI,YAGAN,+BACAnI,EAAAyI,QAAAP,cAAA,GAGAlI,EAbA8I,EAAAE,aAAAtH,KAAA,wBAiBAmH,EAAAI,UAAA,SAAA,YAAA,SAAAC,GACA,QAAAC,GAAAC,GACA,MAAA,UAAA3C,EAAAzG,GACA,MAAAkJ,GAAAE,GAAA3C,EAAAsC,EAAA/I,KAIA,QAAAqJ,GAAAD,GACA,MAAA,UAAA3C,EAAAlc,EAAAyV,GACA,MAAAkJ,GAAAE,GAAA3C,EAAAlc,EAAAwe,EAAA/I,KAIA,QAAAsJ,GAAAC,GACA,IAAA,GAAA7X,KAAAwX,GACAK,EAAAC,eAAA9X,KACA,kBAAAwX,GAAAxX,GACA6X,EAAA7X,GAAA,WACA,MAAAwX,GAAAO,MAAAP,EAAAQ,YAGAH,EAAA7X,GAAAwX,EAAAxX,IAMA,GAAA6X,GAAA,SAAAvJ,GACA,MAAAkJ,GAAAH,EAAA/I,IAYA,OATAuJ,GAAA/b,IAAA2b,EAAA,OACAI,EAAAA,UAAAJ,EAAA,UACAI,EAAAI,KAAAR,EAAA,QACAI,EAAAK,MAAAT,EAAA,SACAI,EAAAM,KAAAR,EAAA,QACAE,EAAAxK,IAAAsK,EAAA,OAEAC,EAAAC,GAEAA,QC9FAO,SAAA,SAAAC,GACA,MAAAA,GAAAlN,MAAA,IAAA/E,OAAA,SAAAkS,EAAAC,GAEA,MADAD,IAAAA,GAAA,GAAAA,EAAAC,EAAAC,WAAA,GACAF,EAAAA,GACA,IAGAnc,QACAmY,OAAA,eACAhG,QAAA,uBAAA,SAAAmK,GACAA,EAAAC,OAAAC,0BAAA,EACAF,EAAAC,OAAAE,eAAA,EACAH,EAAAI,gBAAAC,OAAAC,OAGAN,EAAAO,YACAlY,KAAA,iBACApH,YAAA,uBACApB,YAAA,SAAA,SAAAC,GAGA,QAAA0gB,GAAAhJ,GACA,GAAA5T,GAAA9D,EAAA0J,QAAAiX,WAAAC,SAAAlJ,EACA,OAAA5T,GACAA,EAAA9D,EAAA6gB,GAAAzI,WAAApY,EAAA6gB,GAAAxI,YAAArY,GADA,OAJAA,EAAA0J,QAAApJ,KAAAogB,qBAAAA,MAYAR,EAAAO,YACAlY,KAAA,WACAnE,UACA,aACA,qDACA,0CACA,eACAoO,KAAA,OAGA0N,EAAAY,SACAvY,KAAA,OACAnE,UACA,oCACA,2BACA,0EACA,SACA,UACAoO,KAAA,OAKA0N,EAAAO,YACAlY,KAAA,eACAnE,UACA,2CACAoO,KAAA,OAGA0N,EAAAY,SACAvY,KAAA,kBACAwY,UAAA,QACA3H,SAAA,iBAAA,qBACArZ,YAAA,SAAA,SAAAC,GAGA,QAAA0gB,GAAAhJ,GACA,GAAA5T,GAAA9D,EAAA0J,QAAAiX,WAAAC,SAAAlJ,EACA,OAAA5T,GACAA,EAAA9D,EAAA6gB,GAAAzI,WAAApY,EAAA6gB,GAAAxI,YAAArY,GADA,OAJAA,EAAA0J,QAAApJ,KAAAogB,qBAAAA,MAWAR,EAAAY,SACAvY,KAAA,eACAnE,UACA,+JACAoO,KAAA,OAGA0N,EAAAY,SACAvY,KAAA,cACAnE,UACA,4BACA,0EACA,kDACA,iIACA,UACAoO,KAAA,KACAzS,WAAA,SAAAC,GACAA,EAAAghB,SAAA,WACAhhB,EAAA6Y,MAAA7Y,EAAA0J,QAAAgO,MAAA,KAAAuJ,KAAAC,UAAA1d,SAAA,QAKA0c,EAAAY,SACAvY,KAAA,iBACApH,YAAA,8BACApB,WAAA,SAAAC,GAQA,QAAAmhB,KACAvd,QAAAe,QAAAyc,GAAAC,YAAA,eACAzd,QAAAe,QAAAyc,GAAAC,YAAA,cACAzd,QAAAe,QAAAyc,GAAAE,SAAA,eAGA,QAAAC,KACA3d,QAAAe,QAAAyc,GAAAC,YAAA,eACAzd,QAAAe,QAAAyc,GAAAC,YAAA,eACAzd,QAAAe,QAAAyc,GAAAE,SAAA,cAhBAthB,EAAA8D,QAAA,GACA9D,EAAAwhB,SAAA3B,SAAA7f,EAAA6Y,MAAAtQ,MAAAsX,SAAA7f,EAAA6Y,MAAA7B,KAEA,IAAAoK,GAAA,2BAAAphB,EAAAwhB,SACAC,EAAA,4BAAAzhB,EAAAwhB,QACA3W,SAAA/C,IAAA9H,GAcAA,EAAAoX,eAAA,WACAxT,QAAAe,QAAAyc,GAAAE,SAAA,4BACA,IAEA9E,GACA5W,EAHA8E,EAAA9G,QAAA+G,UAAA,OACAlI,EAAAiI,EAAAnH,IAAA,QAGA,eAAAvD,EAAA0hB,GAAAzJ,UACAuE,EAAA,8BACA5W,GAAA2C,KAAAvI,EAAA0hB,GAAAvX,WAAA+M,SAAAlX,EAAA6Y,MAAA3B,SAAAsD,SAAAxa,EAAA6Y,MAAA2B,UACA,WAAAxa,EAAA0hB,GAAAvX,YACAvE,EAAAqR,OAAAjX,EAAA6Y,MAAA5B,OACArR,EAAA4W,IAAAxc,EAAA6Y,MAAA2D,MAEA5W,EAAAoR,KAAAhX,EAAA6Y,MAAA7B,KACApR,EAAA8T,KAAA1Z,EAAA6Y,MAAAa,KACA9T,EAAA+b,IAAA3hB,EAAA6Y,MAAA8I,MAEA,WAAA3hB,EAAA0hB,GAAAzJ,UACAuE,EAAA,2BACA5W,GAAAoR,KAAAhX,EAAA6Y,MAAA7B,KAAAC,OAAAjX,EAAA6Y,MAAA5B,SACA,UAAAjX,EAAA0hB,GAAAzJ,WACAuE,EAAA,0BACA5W,GAAAsR,SAAAlX,EAAA6Y,MAAA3B,SAAAD,OAAAjX,EAAA6Y,MAAA5B,SAEAxU,EAAAc,IAAAiZ,GAAA5W,OAAAA,IAAAd,QAAA,SAAAR,GAEAA,EAAAA,QACAV,QAAAe,QAAA8c,GAAA5H,KAAA,IACAsH,MAEAvd,QAAAe,QAAA8c,GAAA5H,KAAAvV,EAAAR,SACAyd,OAGAvd,MAAA,WACAJ,QAAAe,QAAA8c,GAAA5H,KAAAvV,OAAAR,SACAyd,MAZA9e,WAaA,WACAmB,QAAAe,QAAAyc,GAAAC,YAAA,mCAMAnB,EAAAY,SACAvY,KAAA,YACApH,YAAA,yBACApB,WAAA,SAAAC,GAOA,QAAAmhB,KACAvd,QAAAe,QAAAyc,GAAAC,YAAA,eACAzd,QAAAe,QAAAyc,GAAAC,YAAA,cACAzd,QAAAe,QAAAyc,GAAAE,SAAA,eAGA,QAAAC,KACA3d,QAAAe,QAAAyc,GAAAC,YAAA,eACAzd,QAAAe,QAAAyc,GAAAC,YAAA,eACAzd,QAAAe,QAAAyc,GAAAE,SAAA,cAfAthB,EAAA8D,QAAA,GACA9D,EAAAwhB,SAAA3B,SAAA7f,EAAA6Y,MAAAtQ,MAAAsX,SAAA7f,EAAA6Y,MAAA7B,KAEA,IAAAoK,GAAA,sBAAAphB,EAAAwhB,SACAC,EAAA,uBAAAzhB,EAAAwhB,QAcAxhB,GAAA4hB,UAAA,WACAhe,QAAAe,QAAAyc,GAAAE,SAAA,4BACA,IAEA9E,GACA5W,EAHA8E,EAAA9G,QAAA+G,UAAA,OACAlI,EAAAiI,EAAAnH,IAAA,QAIAiZ,GAAA,wBACA5W,GAAAvC,QAAArD,EAAA6Y,MAAAtQ,KAAA0O,OAAAjX,EAAA6Y,MAAA5B,OAAAD,KAAAhX,EAAA6Y,MAAA7B,MACAvU,EAAAc,IAAAiZ,GAAA5W,OAAAA,IAAAd,QAAA,SAAAR,GAEAA,EAAAQ,SACAlB,QAAAe,QAAA8c,GAAA5H,KAAA,aAAAvV,EAAAA,QACAtE,EAAAqd,OAAA,WACArd,EAAA6Y,MAAAwB,WAAA/V,EAAAA,SAEA6c,MAEAvd,QAAAe,QAAA8c,GAAA5H,KAAAvV,EAAAR,SACAyd,OAGAvd,MAAA,WACAJ,QAAAe,QAAA8c,GAAA5H,KAAAvV,OAAAR,SACAyd,MAfA9e,WAgBA,WACAmB,QAAAe,QAAAyc,GAAAC,YAAA,mCAMAnB,EAAAY,SACAvY,KAAA,0BACA6Q,SAAA,kBACAjY,YAAA,sBACApB,WAAA,SAAAC,GACAA,EAAA6hB,QAAA,GACA7hB,EAAA8hB,eAAA7P,OAEAjS,EAAA+hB,UAEAxZ,KAAA,SAGAA,KAAA,SACAyO,KAAA,wBACAG,WAAA,SAAA,MAAA,YAGA5O,KAAA,WACAyO,KAAA,mBACAG,WAAA,SAAA,MAAA,SAAA,cAGA5O,KAAA,SACAyO,KAAA,qBACAG,WAAA,MAAA,YAGA5O,KAAA,UACAyO,KAAA,2BACAG,WAAA,SAAA,MAAA,YAGA5O,KAAA,aACAyO,KAAA,wBACAG,WAAA,MAAA,YAGA5O,KAAA,cACAyO,KAAA,0BACAG,WAAA,SAAA,MAAA,YAGA5O,KAAA,OACAyO,KAAA,kBACAG,WAAA,YAGA5O,KAAA,eACAyO,KAAA,0BACAG,WAAA,SAAA,SAAA,WAAA,UAAA,YAKAnX,EAAAgiB,aAAA,SAAA3c,EAAAwT,GACA,QAAAxT,EAAAkD,MACAvI,EAAA6Y,MAAAtQ,KAAA,GACAvI,EAAA6Y,MAAA7B,KAAA,GACAhX,EAAA6Y,MAAA5B,OAAA,GACAjX,EAAA6Y,MAAAsB,MAAA,EACAna,EAAA6Y,MAAAqB,QAAA,KACAla,EAAA6Y,MAAAwB,YAAA,SAAA,MAAA,UACAra,EAAA6hB,QAAA,KAEA7hB,EAAA6Y,MAAAtQ,KAAAlD,EAAAkD,KACAvI,EAAA6Y,MAAA7B,KAAA3R,EAAA2R,KACAhX,EAAA6Y,MAAAwB,WAAAhV,EAAA8R,UACAtK,EAAA+B,MAAA,WACA5O,EAAA6hB,QAAAxc,EAAAkD,SAMAvI,EAAAiiB,OAAA,eAAA,WACAjiB,EAAA6hB,QAAA,KACA,MAIA3B,EAAAY,SACAvY,KAAA,2BACAwY,UAAA,iBACA3H,SAAA,iBAAA,uBAGA8G,EAAAY,SACAvY,KAAA,sBACAwY,UAAA,YACA3H,SAAA,iBAAA,uBAIA8G,EAAAY,SACAvY,KAAA,wBACAwY,UAAA,cACA3H,SAAA,iBAAA,uBAGA8G,EAAAY,SACAvY,KAAA,yBACAwY,UAAA,eACA3H,SAAA,iBAAA,uBAIA8G,EAAAY,SACAvY,KAAA,SACAnE,UACA,uGACAoO,KAAA,OAKA0N,EAAAY,SACAvY,KAAA,aACAwY,UAAA,QACAmB,gBACAC,UAAA,WACAxK,iBACA5R,KAAA,SACAqc,OAAA,EACAxK,MAAA,OAKAsI,EAAAY,SACAvY,KAAA,mBACAwY,UAAA,SACA3H,SAAA,iBAAA,uBAGA8G,EAAAY,SACAvY,KAAA,mBACAwY,UAAA,SACA3H,SAAA,iBAAA,uBAIA8G,EAAAY,SACAvY,KAAA,wBACA2Z,gBACAvK,iBACA0K,YAAA,aACAC,UAAA,wEACAC,UAAA,KACAC,UAAA,UAGArhB,YAAA,0BACAiY,SAAA,iBAAA,uBAIA8G,EAAAY,SACAvY,KAAA,QACAnE,SAAA,sDAGA8b,EAAAY,SACAvY,KAAA,WACAwY,UAAA,QACAmB,gBACAC,UAAA,WACAxK,iBACAC,MAAA,QAKAsI,EAAAY,SACAvY,KAAA,gBACApH,YAAA,qBACApB,WAAA,SAAAC,GAMA,QAAAyiB,GAAAzI,GAEA,MADAA,GAAApW,QAAA8e,KAAA1I,GAkBA,QAAA2I,KACA3iB,EAAA6Y,MAAA7Y,EAAA0J,QAAAgO,KAAA1X,EAAA6Y,MAAA7Y,EAAA0J,QAAAgO,QACA,IAAAkL,GAAA5iB,EAAA6Y,MAAA7Y,EAAA0J,QAAAgO,KACAmL,EAAAjf,QAAA8e,KAAA1iB,EAAA0J,QAAAiO,gBAAAsC,aACA2I,GAAAnL,KAAAoL,GAGA,QAAA3M,GAAA4M,GACA9iB,EAAA6Y,MAAA7Y,EAAA0J,QAAAgO,KAAAqL,OAAAD,EAAA,GAhCA9iB,EAAAgjB,aAAAC,UAAAjjB,EAAAijB,WACAjjB,EAAA2iB,OAAAA,EACA3iB,EAAAkW,OAAAA,EACAlW,EAAAyiB,WAAAA,EAOAziB,EAAAkjB,MAAA,SAAAvM,GACA,MAAA9J,GAAAsW,UAAAxM,EAAA,SAAAe,EAAA7D,GACA,MAAA,gBAAAA,IACAhJ,QAAA/C,IAAA,UAAA4P,GACA7M,QAAA/C,IAAA4P,GACA1X,EAAAkjB,MAAArP,QAEAhJ,SAAA/C,IAAA,SAAA4P,YAuBA9T,QACAmY,OAAA,eAAAqH,KAAA,eAAA,2BAAA,SAAAC,EAAAC,GAEAA,EAAA1C,SAAA9I,SAAA,4BACAuL,EAAAlD,OAAAoD,wCAAA,mCC1bA,IAAAC,SAAA5f,QAAAmY,OAAA,aAEAyH,SAAA9S,OAAA,QAAA,WACA,MAAA,UAAA+S,EAAAC,GACA,GAAA1R,MAAA2R,WAAAF,MAAAG,SAAAH,IAAA,GAAAA,EAAA,MAAA,GACA,oBAAAC,KAAAA,EAAA,EAEA,IAAAG,IAAA,IAAA,KAAA,KAAA,KAAA,KAAA,MACA9R,EAAAkP,KAAA6C,MAAA7C,KAAAnZ,IAAA2b,GAAAxC,KAAAnZ,IAAA,MACA,QAAA2b,EAAAxC,KAAA8C,IAAA,KAAA9C,KAAA6C,MAAA/R,KAAAiS,QAAAN,GAAAG,EAAA9R,MAIAyR,QAAA9S,OAAA,UACA,OAAA,SAAAxQ,GACA,MAAA,UAAAqQ,EAAAxK,GACA,MAAA7F,GAAA+jB,QAAAle,GAAA,OAAA8T,UPhBAjW,QACAmY,OAAA,eACA0B,QAAA,gBAAA3T,eA2EAA,cAAA5I,SAAA,QAAA,KAAA,iBC7EA0C,QACAmY,OAAA,eACA0B,QAAA,eAAAnH,cCFA1S,QACAmY,OAAA,eACA0B,QAAA,cAAA,WACA,WAGA7Z,QACAmY,OAAA,eACA0B,QAAA,gBAAA,WAOA,QAAAyG,GAAA9hB,GACApC,EAAAoC,EACApC,EAAAmkB,aAAA,oBAAA,WACAtZ,QAAA/C,IAAA,oBACA,GAVA,GAAA9H,EAEA,QACAkkB,MAAAA,KAYAtgB,QACAmY,OAAA,eACAhc,WAAA,mBAAA2a,kBAuGAA,iBAAAxZ,SAAA,SAAA,gBAAA,SAAA,oBAAA,eAAA,cAAA,eAAA,iBAAA,UCjIA0C,QACAmY,OAAA,eACA0B,QAAA,oBAAA9I,mBAsEAA,kBAAAzT,SAAA,QAAA,KAAA,aAEA0C,QACAmY,OAAA,eAAAhc,WAAA,+BAAA,SAAA,oBAAA,oBAAA,aAAA,SAAAC,EAAA4K,EAAA+J,EAAA+G,GACA7Q,QAAA/C,IAAA4T,GACA1b,EAAA0b,WAAAA,EACA1b,EAAA4b,OAAA,SAAAzU,GACAwN,EAAAiH,OAAAzU,GACAyD,EAAAxF,MAAApF","file":"nzbhydra.js","sourcesContent":["angular\r\n    .module('nzbhydraApp')\r\n    .directive('hydraupdates', hydraupdates);\r\n\r\nfunction hydraupdates() {\r\n    controller.$inject = [\"$scope\", \"UpdateService\", \"$sce\"];\r\n    return {\r\n        templateUrl: 'static/html/directives/updates.html',\r\n        controller: controller\r\n    };\r\n\r\n    function controller($scope, UpdateService, $sce) {\r\n\r\n        $scope.loadingPromise = UpdateService.getVersions().then(function (data) {\r\n            $scope.currentVersion = data.data.currentVersion;\r\n            $scope.repVersion = data.data.repVersion;\r\n            $scope.updateAvailable = data.data.updateAvailable;\r\n            if ($scope.repVersion > $scope.currentVersion) {\r\n                UpdateService.getChangelog().then(function(data) {\r\n                    $scope.changelog = data.data.changelog;\r\n                })\r\n            }\r\n        });\r\n        \r\n        UpdateService.getVersionHistory().then(function(data) {\r\n            $scope.versionHistory = $sce.trustAsHtml(data.data.versionHistory);\r\n        });\r\n\r\n        $scope.update = function () {\r\n            UpdateService.update();\r\n        };\r\n\r\n        $scope.showChangelog = function () {\r\n            UpdateService.showChanges($scope.changelog);\r\n        };\r\n        \r\n        \r\n\r\n    }\r\n}\r\n\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .directive('searchResult', searchResult);\r\n\r\nfunction searchResult() {\r\n    return {\r\n        templateUrl: 'static/html/directives/search-result.html',\r\n        require: '^titleGroup',\r\n        scope: {\r\n            titleGroup: \"=\",\r\n            showDuplicates: \"=\",\r\n            selected: \"=\",\r\n            rowIndex: \"=\"\r\n        },\r\n        controller: ['$scope', '$element', '$attrs', controller],\r\n        multiElement: true\r\n    };\r\n\r\n    function controller($scope, $element, $attrs) {\r\n        $scope.titleGroupExpanded = false;\r\n        $scope.hashGroupExpanded = {};\r\n\r\n        $scope.toggleTitleGroup = function () {\r\n            $scope.titleGroupExpanded = !$scope.titleGroupExpanded;\r\n            if (!$scope.titleGroupExpanded) {\r\n                $scope.hashGroupExpanded[$scope.titleGroup[0][0].hash] = false; //Also collapse the first title's duplicates\r\n            }\r\n        };\r\n\r\n        $scope.groupingRowDuplicatesToShow = groupingRowDuplicatesToShow;\r\n        function groupingRowDuplicatesToShow() {\r\n            if ($scope.showDuplicates &&  $scope.titleGroup[0].length > 1 && $scope.hashGroupExpanded[$scope.titleGroup[0][0].hash]) {\r\n                return $scope.titleGroup[0].slice(1);\r\n            } else {\r\n                return [];\r\n            }\r\n        }\r\n\r\n        //<div ng-repeat=\"hashGroup in titleGroup\" ng-if=\"titleGroup.length > 0 && titleGroupExpanded\"  class=\"search-results-row\">\r\n        $scope.otherTitleRowsToShow = otherTitleRowsToShow;\r\n        function otherTitleRowsToShow() {\r\n            if ($scope.titleGroup.length > 1 && $scope.titleGroupExpanded) {\r\n                return $scope.titleGroup.slice(1);\r\n            } else {\r\n                return [];\r\n            }\r\n        }\r\n        \r\n        $scope.hashGroupDuplicatesToShow = hashGroupDuplicatesToShow;\r\n        function hashGroupDuplicatesToShow(hashGroup) {\r\n            if ($scope.showDuplicates && $scope.hashGroupExpanded[hashGroup[0].hash]) {\r\n                return hashGroup.slice(1);\r\n            } else {\r\n                return [];\r\n            }\r\n        }\r\n    }\r\n}","angular\r\n    .module('nzbhydraApp')\r\n    .directive('otherColumns', otherColumns);\r\n\r\nfunction otherColumns($http, $templateCache, $compile, $window) {\r\n    controller.$inject = [\"$scope\", \"$http\", \"$uibModal\", \"growl\"];\r\n    return {\r\n        scope: {\r\n            result: \"=\"\r\n        },\r\n        multiElement: true,\r\n\r\n        link: function (scope, element, attrs) {\r\n            $http.get('static/html/directives/search-result-non-title-columns.html', {cache: $templateCache}).success(function (templateContent) {\r\n                element.replaceWith($compile(templateContent)(scope));\r\n            });\r\n\r\n        },\r\n        controller: controller\r\n    };\r\n\r\n    function controller($scope, $http, $uibModal, growl) {\r\n\r\n        $scope.showNfo = showNfo;\r\n        function showNfo(resultItem) {\r\n            if (resultItem.has_nfo == 0) {\r\n                return;\r\n            }\r\n            var uri = new URI(\"internalapi/getnfo\");\r\n            uri.addQuery(\"indexer\", resultItem.indexer);\r\n            uri.addQuery(\"guid\", resultItem.indexerguid);\r\n            return $http.get(uri.toString()).then(function (response) {\r\n                if (response.data.has_nfo) {\r\n                    $scope.openModal(\"lg\", response.data.nfo)\r\n                } else {\r\n                    if (!angular.isUndefined(resultItem.message)) {\r\n                        growl.error(resultItem.message);\r\n                    } else {\r\n                        growl.info(\"No NFO available\");\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        $scope.openModal = openModal;\r\n\r\n        function openModal(size, nfo) {\r\n            var modalInstance = $uibModal.open({\r\n                template: '<pre class=\"nfo\"><span ng-bind-html=\"nfo\"></span></pre>',\r\n                controller: 'NfoModalInstanceCtrl',\r\n                size: size,\r\n                resolve: {\r\n                    nfo: function () {\r\n                        return nfo;\r\n                    }\r\n                }\r\n            });\r\n\r\n            modalInstance.result.then();\r\n        }\r\n        \r\n        $scope.downloadNzb = downloadNzb;\r\n        \r\n        function downloadNzb(resultItem) {\r\n            //href = \"{{ result.link }}\"\r\n            $window.location.href = resultItem.link;\r\n        }\r\n\r\n    }\r\n}\r\notherColumns.$inject = [\"$http\", \"$templateCache\", \"$compile\", \"$window\"];\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .controller('NfoModalInstanceCtrl', NfoModalInstanceCtrl);\r\n\r\nfunction NfoModalInstanceCtrl($scope, $modalInstance, nfo) {\r\n\r\n    $scope.nfo = nfo;\r\n\r\n    $scope.ok = function () {\r\n        $modalInstance.close($scope.selected.item);\r\n    };\r\n\r\n    $scope.cancel = function () {\r\n        $modalInstance.dismiss();\r\n    };\r\n}\r\nNfoModalInstanceCtrl.$inject = [\"$scope\", \"$modalInstance\", \"nfo\"];","angular\r\n    .module('nzbhydraApp')\r\n    .directive('searchHistory', searchHistory);\r\n\r\n\r\nfunction searchHistory() {\r\n    return {\r\n        templateUrl: 'static/html/directives/search-history.html',\r\n        controller: ['$scope', '$http','$state', controller],\r\n        scope: {}\r\n    };\r\n    \r\n    function controller($scope, $http, $state) {\r\n        $scope.type = \"All\";\r\n        $scope.limit = 100;\r\n        $scope.pagination = {\r\n            current: 1\r\n        };\r\n\r\n        getSearchRequestsPage(1);\r\n\r\n        $scope.pageChanged = function (newPage) {\r\n            getSearchRequestsPage(newPage);\r\n        };\r\n        \r\n        $scope.changeType = function(type) {\r\n            $scope.type = type;\r\n            getSearchRequestsPage($scope.pagination.current);\r\n        };\r\n\r\n        function getSearchRequestsPage(pageNumber) {\r\n            $http.get(\"internalapi/getsearchrequests\", {params: {page: pageNumber, limit: $scope.limit, type: $scope.type}}).success(function (response) {\r\n                $scope.searchRequests = response.searchRequests;\r\n                $scope.totalRequests = response.totalRequests;\r\n            });\r\n        }\r\n        \r\n        $scope.openSearch = function (request) {\r\n            var stateParams = {};\r\n            if (request.identifier_key == \"imdbid\") {\r\n                stateParams.imdbid = request.identifier_value;\r\n            } else if (request.identifier_key == \"tvdbid\" || request.identifier_key == \"rid\") {\r\n                if (request.identifier_key == \"rid\" ) {\r\n                    stateParams.rid = request.identifier_value;\r\n                } else {\r\n                    stateParams.tvdbid = request.identifier_value;\r\n                } \r\n                \r\n                if (request.season != \"\") {\r\n                    stateParams.season = request.season;\r\n                }\r\n                if (request.episode != \"\") {\r\n                    stateParams.episode = request.episode;\r\n                }\r\n            }\r\n            if (request.query != \"\") {\r\n                stateParams.query = request.query;\r\n            }\r\n            if (request.type == \"tv\") {\r\n                stateParams.mode = \"tvsearch\"\r\n            } else if (request.type == \"tv\") {\r\n                stateParams.mode = \"moviesearch\"\r\n            } else {\r\n                stateParams.mode = \"search\"\r\n            }\r\n            \r\n            if (request.category != \"\") {\r\n                stateParams.category = request.category;\r\n            }\r\n\r\n            stateParams.category = request.category;\r\n            \r\n            $state.go(\"search\", stateParams, {inherit: false});\r\n        };\r\n\r\n\r\n    }\r\n}","//Can be used in an ng-repeat directive to call a function when the last element was rendered\r\n//We use it to mark the end of sorting / filtering so we can stop blocking the UI\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .directive('onFinishRender', onFinishRender);\r\n\r\nfunction onFinishRender($timeout) {\r\n    function linkFunction(scope, element, attr) {\r\n        \r\n        if (scope.$last === true) {\r\n                $timeout(function () {\r\n                    scope.$evalAsync(attr.onFinishRender);\r\n                });\r\n            }\r\n    }\r\n\r\n    return {\r\n        link: linkFunction\r\n    }\r\n}\r\nonFinishRender.$inject = [\"$timeout\"];","angular\r\n    .module('nzbhydraApp')\r\n    .directive('hydralog', hydralog);\r\n\r\nfunction hydralog() {\r\n    controller.$inject = [\"$scope\", \"$http\", \"$sce\"];\r\n    return {\r\n        template: '<div cg-busy=\"{promise:logPromise,message:\\'Loading log file\\'}\"><pre ng-bind-html=\"log\" style=\"text-align: left\"></pre></div>',\r\n        controller: controller\r\n    };\r\n\r\n    function controller($scope, $http, $sce) {\r\n        $scope.logPromise = $http.get(\"internalapi/getlogs\").success(function (data) {\r\n            $scope.log = $sce.trustAsHtml(data.log);\r\n        });\r\n\r\n    }\r\n}\r\n\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .directive('indexerStatuses', indexerStatuses);\r\n\r\nfunction indexerStatuses() {\r\n    return {\r\n        templateUrl: 'static/html/directives/indexer-statuses.html',\r\n        controller: ['$scope', '$http', controller]\r\n    };\r\n\r\n    function controller($scope, $http) {\r\n        \r\n        getIndexerStatuses();\r\n        \r\n        function getIndexerStatuses() {\r\n            $http.get(\"internalapi/getindexerstatuses\").success(function (response) {\r\n                $scope.indexerStatuses = response.indexerStatuses;\r\n            });\r\n        }\r\n        \r\n        $scope.isInPast = function (timestamp) {\r\n            return timestamp * 1000 < (new Date).getTime();\r\n        };\r\n        \r\n        $scope.enable = function(indexerName) {\r\n            $http.get(\"internalapi/enableindexer\", {params: {name: indexerName}}).then(function(response){\r\n                $scope.indexerStatuses = response.data.indexerStatuses;\r\n            });\r\n        }\r\n\r\n    }\r\n}\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .filter('formatDate', formatDate);\r\n\r\nfunction formatDate(dateFilter) {\r\n    return function(timestamp, hidePast) {\r\n        if (timestamp) {\r\n            if (timestamp * 1000 < (new Date).getTime() && hidePast) {\r\n                return \"\"; //\r\n            }\r\n            \r\n            var t = timestamp * 1000;\r\n            t = dateFilter(t, 'yyyy-MM-dd HH:mm:ss Z');\r\n            return t;\r\n        } else {\r\n            return \"\";\r\n        }\r\n    }\r\n}\r\nformatDate.$inject = [\"dateFilter\"];","angular\r\n    .module('nzbhydraApp').directive('focusOn', focusOn);\r\n\r\nfunction focusOn() {\r\n    return directive;\r\n    function directive(scope, elem, attr) {\r\n        scope.$on('focusOn', function (e, name) {\r\n            if (name === attr.focusOn) {\r\n                elem[0].focus();\r\n            }\r\n        });\r\n    }\r\n}\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .directive('downloadHistory', downloadHistory);\r\n\r\nfunction downloadHistory() {\r\n    return {\r\n        templateUrl: 'static/html/directives/download-history.html',\r\n        controller: ['$scope', '$http', controller],\r\n        scope: {}\r\n    };\r\n\r\n    function controller($scope, $http) {\r\n        $scope.type = \"All\";\r\n        $scope.limit = 100;\r\n        $scope.pagination = {\r\n            current: 1\r\n        };\r\n\r\n        $scope.changeType = function (type) {\r\n            $scope.type = type;\r\n            getDownloadsPage($scope.pagination.current);\r\n        };\r\n\r\n        getDownloadsPage(1);\r\n\r\n        $scope.pageChanged = function (newPage) {\r\n            getDownloadsPage(newPage);\r\n        };\r\n        \r\n        function getDownloadsPage(pageNumber) {\r\n            $http.get(\"internalapi/getnzbdownloads\", {params:{page: pageNumber, limit: $scope.limit, type: $scope.type}}).success(function (response) {\r\n                $scope.nzbDownloads = response.nzbDownloads;\r\n                $scope.totalDownloads = response.totalDownloads;\r\n            });\r\n        }\r\n\r\n\r\n    }\r\n}","angular\r\n    .module('nzbhydraApp')\r\n    .directive('cfgFormEntry', cfgFormEntry);\r\n\r\nfunction cfgFormEntry() {\r\n    return {\r\n        templateUrl: 'static/html/directives/cfg-form-entry.html',\r\n        require: [\"^title\", \"^cfg\"],\r\n        scope: {\r\n            title: \"@\",\r\n            cfg: \"=\",\r\n            help: \"@\",\r\n            type: \"@?\",\r\n            options: \"=?\"\r\n        },\r\n        controller: [\"$scope\", \"$element\", \"$attrs\", function ($scope, $element, $attrs) {\r\n            $scope.type = angular.isDefined($scope.type) ? $scope.type : 'text';\r\n            $scope.options = angular.isDefined($scope.type) ? $scope.$eval($attrs.options) : [];\r\n        }]\r\n    };\r\n}","angular\r\n    .module('nzbhydraApp')\r\n    .directive('addableNzb', addableNzb);\r\n\r\nfunction addableNzb() {\r\n    controller.$inject = [\"$scope\", \"ConfigService\", \"NzbDownloadService\", \"growl\"];\r\n    return {\r\n        templateUrl: 'static/html/directives/addable-nzb.html',\r\n        require: ['^indexerguid', '^title', '^indexer', '^dbsearchid'],\r\n        scope: {\r\n            indexerguid: \"=\",\r\n            title: \"=\",\r\n            indexer: \"=\",\r\n            dbsearchid: \"=\"\r\n        },\r\n        controller: controller\r\n    };\r\n\r\n    function controller($scope, ConfigService, NzbDownloadService, growl) {\r\n        $scope.classname = \"\";\r\n        \r\n        ConfigService.getSafe().then(function (settings) {\r\n            $scope.downloader = settings.downloader.downloader;\r\n            if ($scope.downloader != \"none\") {\r\n                $scope.enabled = true;\r\n                $scope.classname = $scope.downloader == \"sabnzbd\" ? \"sabnzbd\" : \"nzbget\";\r\n            } else {\r\n                $scope.enabled = false;\r\n            }\r\n            \r\n        });\r\n        \r\n        $scope.add = function() {\r\n            $scope.classname = \"nzb-spinning\";\r\n            NzbDownloadService.download([{\"indexerguid\": $scope.indexerguid, \"title\": $scope.title, \"indexer\": $scope.indexer, \"dbsearchid\": $scope.dbsearchid}]).then(function (response) {\r\n                if (response.data.success) {\r\n                    $scope.classname = $scope.downloader == \"sabnzbd\" ? \"sabnzbd-success\" : \"nzbget-success\";\r\n                } else {\r\n                    $scope.classname = $scope.downloader == \"sabnzbd\" ? \"sabnzbd-error\" : \"nzbget-error\";\r\n                    growl.error(\"Unable to add NZB. Make sure the downloader is running and properly configured.\");\r\n                }\r\n            }, function() {\r\n                $scope.classname = $scope.downloader == \"sabnzbd\" ? \"sabnzbd-error\" : \"nzbget-error\";\r\n                growl.error(\"An unexpected error occurred while trying to contact NZB Hydra or add the NZB.\");\r\n            })\r\n        };\r\n\r\n    }\r\n}\r\n\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .factory('UpdateService', UpdateService);\r\n\r\nfunction UpdateService($http, growl, blockUI, RestartService) {\r\n\r\n    var currentVersion;\r\n    var repVersion;\r\n    var updateAvailable;\r\n    var changelog;\r\n    var versionHistory;\r\n    \r\n    return {\r\n        update: update,\r\n        showChanges: showChanges,\r\n        getVersions: getVersions,\r\n        getChangelog: getChangelog,\r\n        getVersionHistory: getVersionHistory\r\n    };\r\n    \r\n    \r\n    \r\n    function getVersions() {\r\n        return $http.get(\"internalapi/get_versions\").then(function (data) {\r\n            currentVersion = data.data.currentVersion;\r\n            repVersion = data.data.repVersion;\r\n            updateAvailable = data.data.updateAvailable;\r\n            return data;\r\n        });\r\n    }\r\n\r\n    function getChangelog() {\r\n        return $http.get(\"internalapi/get_changelog\").then(function (data) {\r\n            changelog = data.data.changelog;\r\n            return data;\r\n        });\r\n    }\r\n    \r\n    function getVersionHistory() {\r\n        return $http.get(\"internalapi/get_version_history\").then(function (data) {\r\n            versionHistory = data.data.versionHistory;\r\n            return data;\r\n        });\r\n    }\r\n\r\n    function showChanges() {\r\n\r\n        var myInjector = angular.injector([\"ng\", \"ui.bootstrap\"]);\r\n        var $uibModal = myInjector.get(\"$uibModal\");\r\n        var params = {\r\n            size: \"lg\",\r\n            templateUrl: \"static/html/changelog.html\",\r\n            resolve: {\r\n                changelog: function () {\r\n                    return changelog;\r\n                }\r\n            },\r\n            controller: function ($scope, $sce, $uibModalInstance, changelog) {\r\n                //I fucking hate that untrusted HTML shit\r\n                changelog = $sce.trustAsHtml(changelog);\r\n                $scope.changelog = changelog;\r\n                console.log(changelog);\r\n                $scope.ok = function () {\r\n                    $uibModalInstance.dismiss();\r\n                };\r\n            }\r\n        };\r\n\r\n        var modalInstance = $uibModal.open(params);\r\n\r\n        modalInstance.result.then();\r\n    }\r\n    \r\n\r\n    function update() {\r\n        blockUI.start(\"Updating. Please stand by...\");\r\n        $http.get(\"internalapi/update\").then(function (data) {\r\n                if (data.data.success) {\r\n                    RestartService.countdownAndReload(\"Update complete.\");\r\n                } else {\r\n                    blockUI.reset();\r\n                    growl.info(\"An error occurred while updating. Please check the logs.\");\r\n                }\r\n            },\r\n            function () {\r\n                blockUI.reset();\r\n                growl.info(\"An error occurred while updating. Please check the logs.\");\r\n            });\r\n    }\r\n}\r\nUpdateService.$inject = [\"$http\", \"growl\", \"blockUI\", \"RestartService\"];\r\n\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .controller('UpdateFooterController', UpdateFooterController);\r\n\r\nfunction UpdateFooterController($scope, UpdateService) {\r\n\r\n    $scope.updateAvailable = false;\r\n    \r\n    UpdateService.getVersions().then(function(data) {\r\n        $scope.currentVersion = data.data.currentVersion;\r\n        $scope.repVersion = data.data.repVersion;\r\n        $scope.updateAvailable = data.data.updateAvailable;\r\n        if ($scope.repVersion > $scope.currentVersion) {\r\n            UpdateService.getChangelog().then(function (data) {\r\n                $scope.changelog = data.data.changelog;\r\n            })\r\n        } \r\n    });\r\n    \r\n\r\n    $scope.update = function () {\r\n        UpdateService.update();\r\n    };\r\n\r\n    $scope.showChangelog = function () {\r\n        UpdateService.showChanges($scope.changelog);\r\n    }\r\n\r\n}\r\nUpdateFooterController.$inject = [\"$scope\", \"UpdateService\"];\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .controller('SystemController', SystemController);\r\n\r\nfunction SystemController($scope, $state, growl, RestartService, NzbHydraControlService) {\r\n\r\n\r\n    $scope.shutdown = function () {\r\n        NzbHydraControlService.shutdown().then(function () {\r\n                growl.info(\"Shutdown initiated. Cya!\");\r\n            },\r\n            function () {\r\n                growl.info(\"Unable to send shutdown command.\");\r\n            })\r\n    };\r\n\r\n    $scope.restart = function () {\r\n        RestartService.restart();\r\n    };\r\n    \r\n\r\n    $scope.tabs = [\r\n        {\r\n            active: false,\r\n            state: 'system'\r\n        },\r\n        {\r\n            active: false,\r\n            state: 'system.updates'\r\n        },\r\n        {\r\n            active: false,\r\n            state: 'system.log'\r\n        },\r\n        {\r\n            active: false,\r\n            state: 'system.about'\r\n        }\r\n    ];\r\n\r\n\r\n    for (var i = 0; i < $scope.tabs.length; i++) {\r\n        if ($state.is($scope.tabs[i].state)) {\r\n            $scope.tabs[i].active = true;\r\n        }\r\n    }\r\n\r\n\r\n    $scope.goToState = function (index) {\r\n        $state.go($scope.tabs[index].state);\r\n    }\r\n    \r\n    \r\n}\r\nSystemController.$inject = [\"$scope\", \"$state\", \"growl\", \"RestartService\", \"NzbHydraControlService\"];\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .factory('StatsService', StatsService);\r\n\r\nfunction StatsService($http) {\r\n    \r\n    return {\r\n        get: getStats\r\n    };\r\n\r\n    function getStats() {\r\n            return $http.get(\"internalapi/getstats\").success(function (response) {\r\n               return response.data;\r\n            });\r\n\r\n    }\r\n\r\n}\r\nStatsService.$inject = [\"$http\"];","angular\r\n    .module('nzbhydraApp')\r\n    .controller('StatsController', StatsController);\r\n\r\nfunction StatsController($scope, stats, $state) {\r\n\r\n    stats = stats.data;\r\n    $scope.nzbDownloads = null;\r\n    $scope.avgResponseTimes = stats.avgResponseTimes;\r\n    $scope.avgIndexerSearchResultsShares = stats.avgIndexerSearchResultsShares;\r\n    $scope.avgIndexerAccessSuccesses = stats.avgIndexerAccessSuccesses;\r\n\r\n\r\n    $scope.tabs = [\r\n        {\r\n            active: false,\r\n            state: 'stats'\r\n        },\r\n        {\r\n            active: false,\r\n            state: 'stats.indexers'\r\n        },\r\n        {\r\n            active: false,\r\n            state: 'stats.searches'\r\n        },\r\n        {\r\n            active: false,\r\n            state: 'stats.downloads'\r\n        }\r\n    ];\r\n\r\n\r\n    for (var i = 0; i < $scope.tabs.length; i++) {\r\n        if ($state.is($scope.tabs[i].state)) {\r\n            $scope.tabs[i].active = true;\r\n        }\r\n    }\r\n    \r\n\r\n    $scope.goToState = function (index) {\r\n        $state.go($scope.tabs[index].state);\r\n    }\r\n\r\n\r\n}\r\nStatsController.$inject = [\"$scope\", \"stats\", \"$state\"];\r\n","//\r\nangular\r\n    .module('nzbhydraApp')\r\n    .factory('SearchService', SearchService);\r\n\r\nfunction SearchService($http) {\r\n\r\n\r\n    var lastExecutedQuery;\r\n\r\n    var service = {search: search, loadMore: loadMore};\r\n    return service;\r\n\r\n    function search(category, query, tmdbid, title, tvdbid, season, episode, minsize, maxsize, minage, maxage, indexers) {\r\n        console.log(\"Category: \" + category);\r\n        var uri;\r\n        if (category.indexOf(\"Movies\") > -1 || (category.indexOf(\"20\") == 0)) {\r\n            console.log(\"Search for movies\");\r\n            uri = new URI(\"internalapi/moviesearch\");\r\n            if (!_.isUndefined(tmdbid)) {\r\n                console.log(\"moviesearch per tmdbid\");\r\n                uri.addQuery(\"tmdbid\", tmdbid);\r\n                uri.addQuery(\"title\", title);\r\n            } else {\r\n                console.log(\"moviesearch per query\");\r\n                uri.addQuery(\"query\", query);\r\n            }\r\n\r\n        } else if (category.indexOf(\"TV\") > -1 || (category.indexOf(\"50\") == 0)) {\r\n            console.log(\"Search for shows\");\r\n            uri = new URI(\"internalapi/tvsearch\");\r\n            if (!_.isUndefined(tvdbid)) {\r\n                uri.addQuery(\"tvdbid\", tvdbid);\r\n                uri.addQuery(\"title\", title);\r\n            } else {\r\n                console.log(\"tvsearch per query\");\r\n                uri.addQuery(\"query\", query);\r\n            }\r\n\r\n            if (!_.isUndefined(season)) {\r\n                uri.addQuery(\"season\", season);\r\n            }\r\n            if (!_.isUndefined(episode)) {\r\n                uri.addQuery(\"episode\", episode);\r\n            }\r\n        } else {\r\n            console.log(\"Search for all\");\r\n            uri = new URI(\"internalapi/search\");\r\n            uri.addQuery(\"query\", query);\r\n        }\r\n\r\n        if (_.isNumber(minsize)) {\r\n            uri.addQuery(\"minsize\", minsize);\r\n        }\r\n        if (_.isNumber(maxsize)) {\r\n            uri.addQuery(\"maxsize\", maxsize);\r\n        }\r\n        if (_.isNumber(minage)) {\r\n            uri.addQuery(\"minage\", minage);\r\n        }\r\n        if (_.isNumber(maxage)) {\r\n            uri.addQuery(\"maxage\", maxage);\r\n        }\r\n        if (!angular.isUndefined(indexers)) {\r\n            uri.addQuery(\"indexers\", decodeURIComponent(indexers));\r\n        }\r\n        \r\n\r\n        uri.addQuery(\"category\", category);\r\n        uri = uri.toString();\r\n        console.log(\"Calling \" + uri);\r\n        lastExecutedQuery = uri;\r\n        return $http.get(uri).then(processData);\r\n\r\n    }\r\n\r\n    function loadMore(offset) {\r\n        lastExecutedQuery.removeQuery(\"offset\");\r\n        lastExecutedQuery.addQuery(\"offset\", offset);\r\n\r\n        console.log(\"Calling \" + lastExecutedQuery);\r\n        return $http.get(lastExecutedQuery).then(processData);\r\n    }\r\n\r\n    function processData(response) {\r\n        var results = response.data.results;\r\n        var indexersearches = response.data.indexersearches;\r\n        var total = response.data.total;\r\n        var resultsCount = results.length;\r\n\r\n\r\n        //Sum up response times of indexers from individual api accesses\r\n        //TODO: Move this to search result controller because we need to update it every time we loaded more results\r\n        _.each(indexersearches, function (ps) {\r\n            if (ps.did_search) {\r\n                ps.averageResponseTime = _.reduce(ps.api_accesses, function (memo, rp) {\r\n                    return memo + rp.response_time;\r\n                }, 0);\r\n                ps.averageResponseTime = ps.averageResponseTime / ps.api_accesses.length;\r\n            }\r\n        });\r\n        \r\n\r\n        return {\"results\": results, \"indexersearches\": indexersearches, \"total\": total, \"resultsCount\": resultsCount}\r\n    }\r\n}\r\nSearchService.$inject = [\"$http\"];","angular\r\n    .module('nzbhydraApp')\r\n    .controller('SearchResultsController', SearchResultsController);\r\n\r\n//SearchResultsController.$inject = ['blockUi'];\r\nfunction SearchResultsController($stateParams, $scope, $q, $timeout, blockUI, SearchService,growl, NzbDownloadService) {\r\n\r\n    $scope.sortPredicate = \"epoch\";\r\n    $scope.sortReversed = true;\r\n    $scope.limitTo = 100;\r\n    $scope.offset = 0;\r\n    //Handle incoming data\r\n    $scope.indexersearches = $stateParams.indexersearches;\r\n    $scope.indexerDisplayState = []; //Stores if a indexer's results should be displayed or not\r\n    $scope.indexerResultsInfo = {}; //Stores information about the indexer's results like how many we already retrieved\r\n    $scope.groupExpanded = {};\r\n    $scope.doShowDuplicates = false;\r\n    $scope.selected = [];\r\n    \r\n    $scope.countFilteredOut = 0;\r\n\r\n    //Initially set visibility of all found indexers to true, they're needed for initial filtering / sorting\r\n    _.forEach($scope.indexersearches, function (ps) {\r\n        $scope.indexerDisplayState[ps.indexer.toLowerCase()] = true;\r\n    });\r\n\r\n    _.forEach($scope.indexersearches, function (ps) {\r\n        $scope.indexerResultsInfo[ps.indexer.toLowerCase()] = {loadedResults: ps.loaded_results};\r\n    });\r\n    \r\n\r\n    //Process results\r\n    $scope.results = $stateParams.results;\r\n    $scope.total = $stateParams.total;\r\n    $scope.resultsCount = $stateParams.resultsCount;\r\n    $scope.filteredResults = sortAndFilter($scope.results);\r\n    stopBlocking();\r\n\r\n\r\n    //Returns the content of the property (defined by the current sortPredicate) of the first group element \r\n    $scope.firstResultPredicate = firstResultPredicate;\r\n    function firstResultPredicate(item) {\r\n        return item[0][$scope.sortPredicate];\r\n    }\r\n\r\n    //Returns the unique group identifier which allows angular to keep track of the grouped search results even after filtering, making filtering by indexers a lot faster (albeit still somewhat slow...)  \r\n    $scope.groupId = groupId;\r\n    function groupId(item) {\r\n        return item[0][0].guid;\r\n    }\r\n\r\n    //Block the UI and return after timeout. This way we make sure that the blocking is done before angular starts updating the model/view. There's probably a better way to achieve that?\r\n    function startBlocking(message) {\r\n        var deferred = $q.defer();\r\n        blockUI.start(message);\r\n        $timeout(function () {\r\n            deferred.resolve();\r\n        }, 100);\r\n        return deferred.promise;\r\n    }\r\n\r\n    //Set sorting according to the predicate. If it's the same as the old one, reverse, if not sort by the given default (so that age is descending, name ascending, etc.)\r\n    //Sorting (and filtering) are really slow (about 2 seconds for 1000 results from 5 indexers) but I haven't found any way of making it faster, apart from the tracking \r\n    $scope.setSorting = setSorting;\r\n    function setSorting(predicate, reversedDefault) {\r\n        startBlocking(\"Sorting / filtering...\").then(function () {\r\n\r\n            if (predicate == $scope.sortPredicate) {\r\n                $scope.sortReversed = !$scope.sortReversed;\r\n            } else {\r\n                $scope.sortReversed = reversedDefault;\r\n            }\r\n            $scope.sortPredicate = predicate;\r\n            $scope.filteredResults = sortAndFilter($scope.results);\r\n            blockUI.reset();\r\n        });\r\n    }\r\n\r\n\r\n    \r\n    function sortAndFilter(results) {\r\n        $scope.countFilteredOut = 0;\r\n        function filterByAgeAndSize(item) {\r\n            var filterOut = !(_.isNumber($stateParams.minsize) && item.size / 1024 / 1024 < $stateParams.minsize)\r\n                && !(_.isNumber($stateParams.maxsize) && item.size / 1024 / 1024 > $stateParams.maxsize)\r\n                && !(_.isNumber($stateParams.minage) && item.age_days < $stateParams.minage)\r\n                && !(_.isNumber($stateParams.maxage) && item.age_days > $stateParams.maxage);\r\n            if (!filterOut) {\r\n                $scope.countFilteredOut++;\r\n            }\r\n            return filterOut;\r\n        }\r\n        \r\n        \r\n        function getItemIndexerDisplayState(item) {\r\n            return $scope.indexerDisplayState[item.indexer.toLowerCase()];\r\n        }\r\n\r\n        function getCleanedTitle(element) {\r\n            return element.title.toLowerCase().replace(/[\\s\\-\\._]/ig, \"\");\r\n        }\r\n\r\n        function createSortedHashgroups(titleGroup) {\r\n\r\n            function createHashGroup(hashGroup) {\r\n                //Sorting hash group's contents should not matter for size and age and title but might for category (we might remove this, it's probably mostly unnecessary)\r\n                var sortedHashGroup = _.sortBy(hashGroup, function (item) {\r\n                    var sortPredicateValue = item[$scope.sortPredicate];\r\n                    return $scope.sortReversed ? -sortPredicateValue : sortPredicateValue;\r\n                });\r\n                //Now sort the hash group by indexer score (inverted) so that the result with the highest indexer score is shown on top (or as the only one of a hash group if it's collapsed)\r\n                sortedHashGroup = _.sortBy(sortedHashGroup, function (item) {\r\n                    return item.indexerscore * -1;\r\n                });\r\n                return sortedHashGroup;\r\n            }\r\n\r\n            function getHashGroupFirstElementSortPredicate(hashGroup) {\r\n                var sortPredicateValue = hashGroup[0][$scope.sortPredicate];\r\n                return $scope.sortReversed ? -sortPredicateValue : sortPredicateValue;\r\n            }\r\n\r\n            return _.chain(titleGroup).groupBy(\"hash\").map(createHashGroup).sortBy(getHashGroupFirstElementSortPredicate).value();\r\n        }\r\n\r\n        function getTitleGroupFirstElementsSortPredicate(titleGroup) {\r\n            var sortPredicateValue = titleGroup[0][0][$scope.sortPredicate];\r\n            return $scope.sortReversed ? -sortPredicateValue : sortPredicateValue;\r\n        }\r\n\r\n        var filtered = _.chain(results)\r\n            //Remove elements of which the indexer is currently hidden    \r\n            .filter(getItemIndexerDisplayState)\r\n            //and which were not filtered by the indexers (because they don't support queries with min/max size/age)\r\n            .filter(filterByAgeAndSize)\r\n            //Make groups of results with the same title    \r\n            .groupBy(getCleanedTitle)\r\n            //For every title group make subgroups of duplicates and sort the group    \r\n            .map(createSortedHashgroups)\r\n            //And then sort the title group using its first hashgroup's first item (the group itself is already sorted and so are the hash groups)    \r\n            .sortBy(getTitleGroupFirstElementsSortPredicate)\r\n            .value();\r\n        if ($scope.countFilteredOut > 0) {\r\n            growl.info(\"Filtered \" + $scope.countFilteredOut + \" of the retrieved results\");\r\n        }\r\n        return filtered;\r\n\r\n    }\r\n\r\n    $scope.toggleTitlegroupExpand = function toggleTitlegroupExpand(titleGroup) {\r\n        $scope.groupExpanded[titleGroup[0][0].title] = !$scope.groupExpanded[titleGroup[0][0].title];\r\n        $scope.groupExpanded[titleGroup[0][0].hash] = !$scope.groupExpanded[titleGroup[0][0].hash];\r\n    };\r\n\r\n\r\n//Clear the blocking\r\n    $scope.stopBlocking = stopBlocking;\r\n    function stopBlocking() {\r\n        blockUI.reset();\r\n    }\r\n\r\n    $scope.loadMore = loadMore;\r\n    function loadMore() {\r\n        console.log(\"Loading more result withs offset \" + $scope.resultsCount);\r\n\r\n        startBlocking(\"Loading more results...\").then(function () {\r\n            SearchService.loadMore($scope.resultsCount).then(function (data) {\r\n                console.log(\"Returned more results:\");\r\n                console.log(data.results);\r\n                console.log($scope.results);\r\n                console.log(\"Total: \" + data.total);\r\n                $scope.results = $scope.results.concat(data.results);\r\n                $scope.filteredResults = sortAndFilter($scope.results);\r\n                $scope.total = data.total;\r\n                $scope.resultsCount += data.resultsCount;\r\n                console.log(\"Results count: \" + $scope.resultsCount);\r\n                console.log(\"Total results in $scope.results: \" + $scope.results.length);\r\n\r\n                stopBlocking();\r\n            });\r\n        });\r\n    }\r\n\r\n\r\n//Filters the results according to new visibility settings.\r\n    $scope.toggleIndexerDisplay = toggleIndexerDisplay;\r\n    function toggleIndexerDisplay(indexer) {\r\n        $scope.indexerDisplayState[indexer.toLowerCase()] = $scope.indexerDisplayState[indexer.toLowerCase()]; \r\n        startBlocking(\"Filtering. Sorry...\").then(function () {\r\n            $scope.filteredResults = sortAndFilter($scope.results);\r\n        }).then(function () {\r\n            stopBlocking();\r\n        });\r\n    }\r\n\r\n    $scope.countResults = countResults;\r\n    function countResults() {\r\n        return $scope.results.length;\r\n    }\r\n\r\n    $scope.downloadSelected = downloadSelected;\r\n    function downloadSelected() {\r\n\r\n        if (angular.isUndefined($scope.selected) || $scope.selected.length == 0) {\r\n            growl.info(\"You should select at least one result...\");\r\n        } else {\r\n\r\n            var values = _.map($scope.selected, function (value) {\r\n                return {\"indexerguid\": value.indexerguid, \"title\": value.title, \"indexer\": value.indexer, \"dbsearchid\": value.dbsearchid}\r\n            });\r\n\r\n            console.log(values);\r\n            NzbDownloadService.download(values).then(function (response) {\r\n                if (response.data.success) {\r\n                    growl.info(\"Successfully added \" + response.data.added + \" of \" + response.data.of + \" NZBs\");\r\n                } else {\r\n                    growl.error(\"Error while adding NZBs\");\r\n                }\r\n            }, function () {\r\n                growl.error(\"Error while adding NZBs\");\r\n            });\r\n        }\r\n    }\r\n    \r\n    $scope.invertSelection = function invertSelection() {\r\n        $scope.selected = _.difference($scope.results, $scope.selected);\r\n    }\r\n\r\n}\r\nSearchResultsController.$inject = [\"$stateParams\", \"$scope\", \"$q\", \"$timeout\", \"blockUI\", \"SearchService\", \"growl\", \"NzbDownloadService\"];","angular\r\n    .module('nzbhydraApp')\r\n    .controller('SearchController', SearchController);\r\n\r\nfunction SearchController($scope, $http, $stateParams, $state, SearchService, focus, ConfigService, blockUI) {\r\n    \r\n    function getNumberOrUndefined(number) {\r\n        if (_.isUndefined(number) || _.isNaN(number) || number == \"\") {\r\n            return undefined;\r\n        }\r\n        number = parseInt(number);\r\n        if (_.isNumber(number)) {\r\n            return number;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    //Fill the form with the search values we got from the state params (so that their values are the same as in the current url)\r\n    $scope.mode = $stateParams.mode;\r\n    \r\n    $scope.category = (_.isUndefined($stateParams.category) || $stateParams.category == \"\") ? \"All\" : $stateParams.category;\r\n    $scope.tmdbid = $stateParams.tmdbid;\r\n    $scope.tvdbid = $stateParams.tvdbid;\r\n    $scope.rid = $stateParams.rid;\r\n    $scope.title = $stateParams.title;\r\n    $scope.season = $stateParams.season;\r\n    $scope.episode = $stateParams.episode;\r\n    $scope.query = $stateParams.query;\r\n    $scope.minsize = getNumberOrUndefined($stateParams.minsize);\r\n    $scope.maxsize = getNumberOrUndefined($stateParams.maxsize);\r\n    $scope.minage = getNumberOrUndefined($stateParams.minage);\r\n    $scope.maxage = getNumberOrUndefined($stateParams.maxage);\r\n    if (!_.isUndefined($scope.title) && _.isUndefined($scope.query)) {\r\n        $scope.query = $scope.title;\r\n    }\r\n    if (!angular.isUndefined($stateParams.indexers)) {\r\n        $scope.indexers = decodeURIComponent($stateParams.indexers).split(\"|\");\r\n    }\r\n\r\n    $scope.showIndexers = {};\r\n\r\n    var safeConfig;\r\n\r\n\r\n    $scope.typeAheadWait = 300;\r\n    $scope.selectedItem = \"\";\r\n    $scope.autocompleteLoading = false;\r\n    $scope.isAskById = ($scope.category.indexOf(\"TV\") > -1 || $scope.category.indexOf(\"Movies\") > -1 ); //If true a check box will be shown asking the user if he wants to search by ID \r\n    $scope.isById = {value: true}; //If true the user wants to search by id so we enable autosearch. Was unable to achieve this using a simple boolean\r\n    $scope.availableIndexers = [];\r\n    $scope.autocompleteClass = \"autocompletePosterMovies\";\r\n\r\n    $scope.toggle = function (searchCategory) {\r\n        $scope.category = searchCategory;\r\n\r\n        //Show checkbox to ask if the user wants to search by ID (using autocomplete)\r\n        $scope.isAskById = ($scope.category.indexOf(\"TV\") > -1 || $scope.category.indexOf(\"Movies\") > -1 );\r\n\r\n        focus('focus-query-box');\r\n        $scope.query = \"\";\r\n\r\n        if (safeConfig.searching.categorysizes.enable_category_sizes) {\r\n            var min = safeConfig.searching.categorysizes[(searchCategory + \" min\").toLowerCase().replace(\" \", \"\")];\r\n            var max = safeConfig.searching.categorysizes[(searchCategory + \" max\").toLowerCase().replace(\" \", \"\")];\r\n            if (_.isNumber(min)) {\r\n                $scope.minsize = min;\r\n            } else {\r\n                $scope.minsize = \"\";\r\n            }\r\n            if (_.isNumber(max)) {\r\n                $scope.maxsize = max;\r\n            } else {\r\n                $scope.maxsize = \"\";\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    // Any function returning a promise object can be used to load values asynchronously\r\n    $scope.getAutocomplete = function (val) {\r\n        $scope.autocompleteLoading = true;\r\n        //Expected model returned from API:\r\n        //label: What to show in the results\r\n        //title: Will be used for file search\r\n        //value: Will be used as extraInfo (ttid oder tvdb id)\r\n        //poster: url of poster to show\r\n\r\n        //Don't use autocomplete if checkbox is disabled\r\n        if (!$scope.isById.value) {\r\n            return {};\r\n        }\r\n\r\n        if ($scope.category.indexOf(\"Movies\") > -1) {\r\n            return $http.get('internalapi/autocomplete?type=movie', {\r\n                params: {\r\n                    input: val\r\n                }\r\n            }).then(function (response) {\r\n                $scope.autocompleteLoading = false;\r\n                return response.data.results;\r\n            });\r\n        } else if ($scope.category.indexOf(\"TV\") > -1) {\r\n\r\n            return $http.get('internalapi/autocomplete?type=tv', {\r\n                params: {\r\n                    input: val\r\n                }\r\n            }).then(function (response) {\r\n                $scope.autocompleteLoading = false;\r\n                return response.data.results;\r\n            });\r\n        } else {\r\n            return {};\r\n        }\r\n    };\r\n    \r\n\r\n    $scope.startSearch = function () {\r\n        blockUI.start(\"Searching...\");\r\n        var indexers = angular.isUndefined($scope.indexers) ? undefined : $scope.indexers.join(\"|\");\r\n        SearchService.search($scope.category, $scope.query, $stateParams.tmdbid, $scope.title, $scope.tvdbid, $scope.season, $scope.episode, $scope.minsize, $scope.maxsize, $scope.minage, $scope.maxage, indexers).then(function (searchResult) {\r\n            $state.go(\"search.results\", {\r\n                results: searchResult.results,\r\n                indexersearches: searchResult.indexersearches,\r\n                total: searchResult.total,\r\n                resultsCount: searchResult.resultsCount,\r\n                minsize: $scope.minsize,\r\n                maxsize: $scope.maxsize,\r\n                minage: $scope.minage,\r\n                maxage: $scope.maxage\r\n            }, {\r\n                inherit: true\r\n            });\r\n            $scope.tmdbid = undefined;\r\n            $scope.tvdbid = undefined;\r\n        });\r\n    };\r\n    \r\n    function getSelectedIndexers() {\r\n        var activatedIndexers = _.filter($scope.availableIndexers).filter(function (indexer) {\r\n            return indexer.activated ;\r\n        });\r\n            return _.pluck(activatedIndexers, \"name\").join(\"|\");\r\n    }\r\n\r\n\r\n    $scope.goToSearchUrl = function () {\r\n        var stateParams = {};\r\n        if ($scope.category.indexOf(\"Movies\") > -1) {\r\n            stateParams.mode = \"moviesearch\";\r\n            stateParams.title = $scope.title;\r\n            stateParams.mode = \"moviesearch\";\r\n        } else if ($scope.category.indexOf(\"TV\") > -1) {\r\n            stateParams.mode = \"tvsearch\";\r\n            stateParams.title = $scope.title;\r\n        } else if ($scope.category == \"Ebook\") {\r\n            stateParams.mode = \"ebook\";\r\n        } else {\r\n            stateParams.mode = \"search\";\r\n        }\r\n        \r\n        stateParams.tmdbid = $scope.tmdbid;\r\n        stateParams.tvdbid = $scope.tvdbid;\r\n        stateParams.title = $scope.title;\r\n        stateParams.season = $scope.season;\r\n        stateParams.episode = $scope.episode;\r\n        stateParams.query = $scope.query;\r\n        stateParams.minsize = $scope.minsize;\r\n        stateParams.maxsize = $scope.maxsize;\r\n        stateParams.minage = $scope.minage;\r\n        stateParams.maxage = $scope.maxage;\r\n        stateParams.category = $scope.category;\r\n        stateParams.indexers = encodeURIComponent(getSelectedIndexers());\r\n        \r\n        $state.go(\"search\", stateParams, {inherit: false, notify: true, reload: true});\r\n    };\r\n\r\n\r\n    $scope.selectAutocompleteItem = function ($item) {\r\n        $scope.selectedItem = $item;\r\n        $scope.title = $item.title;\r\n        if ($scope.category.indexOf(\"Movies\") > -1) {\r\n            $scope.tmdbid = $item.value;\r\n        } else if ($scope.category.indexOf(\"TV\") > -1) {\r\n            $scope.tvdbid = $item.value;\r\n        }\r\n        $scope.query = \"\";\r\n        $scope.goToSearchUrl();\r\n    };\r\n    \r\n    $scope.startQuerySearch = function() {\r\n        //Reset values because they might've been set from the last search\r\n        $scope.title = undefined;\r\n        $scope.tmdbid = undefined;\r\n        $scope.tvdbid = undefined;\r\n        $scope.goToSearchUrl();\r\n    };\r\n\r\n\r\n    $scope.autocompleteActive = function () {\r\n        return ($scope.category.indexOf(\"TV\") > -1) || ($scope.category.indexOf(\"Movies\") > -1)\r\n    };\r\n\r\n    $scope.seriesSelected = function () {\r\n        return ($scope.category.indexOf(\"TV\") > -1);\r\n    };\r\n    \r\n    $scope.toggleIndexer = function(indexer) {\r\n        $scope.indexers[indexer] = !$scope.indexers[indexer]\r\n    };\r\n    \r\n\r\n    function isIndexerPreselected(indexer) {\r\n        if (angular.isUndefined($scope.indexers)) {\r\n            return indexer.preselect;\r\n        } else {\r\n            return _.contains($scope.indexers, indexer.name);\r\n        }\r\n        \r\n    }\r\n\r\n    ConfigService.getSafe().then(function (cfg) {\r\n        safeConfig = cfg;\r\n        $scope.availableIndexers = _.chain(cfg.indexers).filter(function (indexer) {\r\n            return indexer.enabled && indexer.showOnSearch;\r\n        }).sortBy(\"name\")\r\n            .map(function (indexer) {\r\n            return {name: indexer.name, activated: isIndexerPreselected(indexer)};\r\n        }).value();\r\n        \r\n    });\r\n\r\n    if ($scope.mode) {\r\n        console.log(\"Starting search in newly loaded search controller\");\r\n        $scope.startSearch();\r\n    }\r\n\r\n\r\n    \r\n\r\n\r\n}\r\nSearchController.$inject = [\"$scope\", \"$http\", \"$stateParams\", \"$state\", \"SearchService\", \"focus\", \"ConfigService\", \"blockUI\"];\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .factory('RestartService', RestartService);\r\n\r\nfunction RestartService(blockUI, $timeout, $window, NzbHydraControlService) {\r\n\r\n    return {\r\n        restart: restart,\r\n        countdownAndReload: countdownAndReload\r\n    };\r\n\r\n    function countdownAndReload(message) {\r\n        message = angular.isUndefined ? \"\" : \" \";\r\n\r\n        blockUI.start(message + \"Restarting. Will reload page in 5 seconds...\");\r\n        $timeout(function () {\r\n            blockUI.start(message + \"Restarting. Will reload page in 4 seconds...\");\r\n            $timeout(function () {\r\n                blockUI.start(message + \"Restarting. Will reload page in 3 seconds...\");\r\n                $timeout(function () {\r\n                    blockUI.start(message + \"Restarting. Will reload page in 2 seconds...\");\r\n                    $timeout(function () {\r\n                        blockUI.start(message + \"Restarting. Will reload page in 1 second...\");\r\n                        $timeout(function () {\r\n                            blockUI.start(\"Reloading page...\");\r\n                            $window.location.reload();\r\n                        }, 1000);\r\n                    }, 1000);\r\n                }, 1000);\r\n            }, 1000);\r\n        }, 1000);\r\n    }\r\n\r\n    function restart(message) {\r\n        NzbHydraControlService.restart().then(countdownAndReload(message),\r\n            function () {\r\n                growl.info(\"Unable to send restart command.\");\r\n            }\r\n        )\r\n    }\r\n}\r\nRestartService.$inject = [\"blockUI\", \"$timeout\", \"$window\", \"NzbHydraControlService\"];\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .factory('NzbHydraControlService', NzbHydraControlService);\r\n\r\nfunction NzbHydraControlService($http) {\r\n\r\n    return {\r\n        restart: restart,\r\n        shutdown: shutdown\r\n    };\r\n\r\n    function restart() {\r\n        return $http.get(\"internalapi/restart\");\r\n    }\r\n\r\n    function shutdown() {\r\n        return $http.get(\"internalapi/shutdown\");\r\n    }\r\n}\r\nNzbHydraControlService.$inject = [\"$http\"];\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .factory('NzbDownloadService', NzbDownloadService);\r\n\r\nfunction NzbDownloadService($http, ConfigService, CategoriesService) {\r\n    \r\n    var service = {\r\n        download: download \r\n    };\r\n    \r\n    return service;\r\n    \r\n\r\n\r\n    function sendNzbAddCommand(items, category) {\r\n        console.log(\"Now add nzb with category \" + category);        \r\n        return $http.put(\"internalapi/addnzbs\", {items: angular.toJson(items), category: category});\r\n    }\r\n\r\n    function download (items) {\r\n        return ConfigService.getSafe().then(function (settings) {\r\n\r\n            var category;\r\n            if (settings.downloader.downloader == \"nzbget\") {\r\n                category = settings.downloader.nzbget.defaultCategory\r\n            } else {\r\n                category = settings.downloader.sabnzbd.defaultCategory\r\n            }\r\n\r\n            if (_.isUndefined(category) || category == \"\" || category == null) {\r\n                return CategoriesService.openCategorySelection().then(function (category) {\r\n                    return sendNzbAddCommand(items, category)\r\n                }, function(error) {\r\n                    throw error;\r\n                });\r\n            } else {\r\n                return sendNzbAddCommand(items, category)\r\n            }\r\n\r\n        });\r\n\r\n\r\n    }\r\n\r\n    \r\n}\r\nNzbDownloadService.$inject = [\"$http\", \"ConfigService\", \"CategoriesService\"];\r\n\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .factory('ModalService', ModalService);\r\n\r\nfunction ModalService($uibModal) {\r\n    \r\n    return {\r\n        open: openModal\r\n    };\r\n    \r\n    function openModal(headline, message, ok, cancel) {\r\n        var modalInstance = $uibModal.open({\r\n            templateUrl: 'static/html/modal.html',\r\n            controller: 'ModalInstanceCtrl',\r\n            size: 'md',\r\n            resolve: {\r\n                headline: function () {\r\n                    return headline\r\n                },\r\n                message: function(){ return message},\r\n                ok: function() {\r\n                    return ok;\r\n                },\r\n                cancel: function() {\r\n                    return cancel;\r\n                }\r\n            }\r\n        });\r\n\r\n        modalInstance.result.then(function() {\r\n            \r\n        }, function() {\r\n            cancel();\r\n        });\r\n    }\r\n    \r\n}\r\nModalService.$inject = [\"$uibModal\"];\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .controller('ModalInstanceCtrl', ModalInstanceCtrl);\r\n\r\nfunction ModalInstanceCtrl($scope, $uibModalInstance, headline, message, ok, cancel) {\r\n\r\n    $scope.message = message;\r\n    $scope.headline = headline;\r\n\r\n    $scope.ok = function () {\r\n        $uibModalInstance.close();\r\n        if(!angular.isUndefined(ok)) {\r\n            ok();\r\n        }\r\n    };\r\n\r\n    $scope.cancel = function () {\r\n        $uibModalInstance.dismiss();\r\n        if (!angular.isUndefined(cancel)) {\r\n            cancel();\r\n        }\r\n    };\r\n}\r\nModalInstanceCtrl.$inject = [\"$scope\", \"$uibModalInstance\", \"headline\", \"message\", \"ok\", \"cancel\"];\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .service('GeneralModalService', GeneralModalService);\r\n\r\nfunction GeneralModalService() {\r\n    \r\n    \r\n    this.open = function (msg, template, templateUrl, size, data) {\r\n        \r\n        //Prevent circular dependency\r\n        var myInjector = angular.injector([\"ng\", \"ui.bootstrap\"]);\r\n        var $uibModal = myInjector.get(\"$uibModal\");\r\n        var params = {};\r\n        \r\n        if(angular.isUndefined(size)) {\r\n            params[\"size\"] = size;\r\n        }\r\n        if (angular.isUndefined(template)) {\r\n            if (angular.isUndefined(templateUrl)) {\r\n                params[\"template\"] = '<pre>' + msg + '</pre>';\r\n            } else {\r\n                params[\"templateUrl\"] = templateUrl;\r\n            }\r\n        } else {\r\n            params[\"template\"] = template;\r\n        }\r\n        params[\"resolve\"] = \r\n        {\r\n            data: function () {\r\n                console.log(data);\r\n                return data;\r\n            }\r\n        };\r\n        console.log(params);\r\n        \r\n        var modalInstance = $uibModal.open(params);\r\n\r\n        modalInstance.result.then();\r\n\r\n    };\r\n    \r\n   \r\n}","angular\r\n    .module('nzbhydraApp')\r\n    .factory('ConfigService', ConfigService);\r\n\r\nfunction ConfigService($http, $q, $cacheFactory) {\r\n\r\n    var cache = $cacheFactory(\"nzbhydra\");\r\n    \r\n    return {\r\n        set: set,\r\n        get: get,\r\n        getSafe: getSafe,\r\n        invalidateSafe: invalidateSafe,\r\n        maySeeAdminArea: maySeeAdminArea\r\n    };\r\n    \r\n    \r\n    function set(newConfig) {\r\n        $http.put('internalapi/setsettings', newConfig)\r\n            .then(function (successresponse) {\r\n                console.log(\"Settings saved. Updating cache\");\r\n                cache.put(\"config\", newConfig);\r\n            }, function (errorresponse) {\r\n                console.log(\"Error saving settings: \" + errorresponse);\r\n            });\r\n    }\r\n\r\n    function get() {\r\n        var config = cache.get(\"config\");\r\n        if (angular.isUndefined(config)) {\r\n            config = $http.get('internalapi/getconfig').then(function (data) {\r\n                return data.data;\r\n            });\r\n            cache.put(\"config\", config);\r\n        }\r\n        \r\n        return config;\r\n    }\r\n\r\n    function getSafe() {\r\n            var safeconfig = cache.get(\"safeconfig\");\r\n            if (angular.isUndefined(safeconfig)) {\r\n                safeconfig = $http.get('internalapi/getsafeconfig').then(function(data) {\r\n                    return data.data;\r\n                });\r\n                cache.put(\"safeconfig\", safeconfig);\r\n            }\r\n        \r\n            return safeconfig;\r\n    }\r\n    \r\n    function invalidateSafe() {\r\n        cache.remove(\"safeconfig\");\r\n    }\r\n\r\n    function maySeeAdminArea() {\r\n        function loadAll() {\r\n            var maySeeAdminArea = cache.get(\"maySeeAdminArea\");\r\n            if (!angular.isUndefined(maySeeAdminArea)) {\r\n                var deferred = $q.defer();\r\n                deferred.resolve(maySeeAdminArea);\r\n                return deferred.promise;\r\n            }\r\n\r\n            return $http.get('internalapi/mayseeadminarea')\r\n                .then(function (configResponse) {\r\n                    var config = configResponse.data;\r\n                    cache.put(\"maySeeAdminArea\", config);\r\n                    return configResponse.data;\r\n                });\r\n        }\r\n\r\n        return loadAll().then(function (maySeeAdminArea) {\r\n            return maySeeAdminArea;\r\n        });\r\n    }\r\n}\r\nConfigService.$inject = [\"$http\", \"$q\", \"$cacheFactory\"];","angular\r\n    .module('nzbhydraApp')\r\n    .factory('ConfigFields', ConfigFields);\r\n\r\nfunction ConfigFields() {\r\n\r\n    var restartWatcher;\r\n\r\n    return {\r\n        getFields: getFields,\r\n        setRestartWatcher: setRestartWatcher\r\n    };\r\n\r\n    function setRestartWatcher(restartWatcherFunction) {\r\n        restartWatcher = restartWatcherFunction;\r\n    }\r\n\r\n\r\n    function restartListener(field, newValue, oldValue) {\r\n        if (newValue != oldValue) {\r\n            restartWatcher();\r\n        }\r\n    }\r\n\r\n    function getBasicIndexerFieldset(showName, host, apikey, username, searchIds, testConnection, testtype, showpreselect, showCheckCaps) {\r\n        var fieldset = [];\r\n\r\n        fieldset.push({\r\n            key: 'enabled',\r\n            type: 'horizontalSwitch',\r\n            templateOptions: {\r\n                type: 'switch',\r\n                label: 'Enabled'\r\n            }\r\n        });\r\n\r\n        if (testtype == 'newznab') {\r\n            fieldset.push(\r\n                {\r\n                    key: 'name',\r\n                    type: 'horizontalNewznabPreset',\r\n                    hideExpression: '!model.enabled',\r\n                    templateOptions: {\r\n                        label: 'Presets'\r\n                    }\r\n\r\n                });\r\n        }\r\n\r\n        if (showName) {\r\n            fieldset.push(\r\n                {\r\n                    key: 'name',\r\n                    type: 'horizontalInput',\r\n                    hideExpression: '!model.enabled',\r\n                    templateOptions: {\r\n                        type: 'text',\r\n                        label: 'Name',\r\n                        required: true,\r\n                        help: 'Used for identification. Changing the name will lose all history and stats!'\r\n                    }\r\n                })\r\n        }\r\n        if (host) {\r\n            fieldset.push(\r\n                {\r\n                    key: 'host',\r\n                    type: 'horizontalInput',\r\n                    hideExpression: '!model.enabled',\r\n                    templateOptions: {\r\n                        type: 'text',\r\n                        label: 'Host',\r\n                        required: true,\r\n                        placeholder: 'http://www.someindexer.com'\r\n                    }\r\n                }\r\n            )\r\n        }\r\n\r\n        if (apikey) {\r\n            fieldset.push(\r\n                {\r\n                    key: 'apikey',\r\n                    type: 'horizontalInput',\r\n                    hideExpression: '!model.enabled',\r\n                    templateOptions: {\r\n                        type: 'text',\r\n                        required: true,\r\n                        label: 'API Key'\r\n                    }\r\n                }\r\n            )\r\n        }\r\n\r\n        if (username) {\r\n            fieldset.push(\r\n                {\r\n                    key: 'username',\r\n                    type: 'horizontalInput',\r\n                    hideExpression: '!model.enabled',\r\n                    templateOptions: {\r\n                        type: 'text',\r\n                        required: true,\r\n                        label: 'Username'\r\n                    }\r\n                }\r\n            )\r\n        }\r\n\r\n        fieldset = fieldset.concat([\r\n            {\r\n                key: 'score',\r\n                type: 'horizontalInput',\r\n                hideExpression: '!model.enabled',\r\n                templateOptions: {\r\n                    type: 'number',\r\n                    label: 'Score',\r\n                    required: true,\r\n                    help: 'When duplicate search results are found the result from the indexer with the highest score will be shown'\r\n                }\r\n            },\r\n            {\r\n                key: 'timeout',\r\n                type: 'horizontalInput',\r\n                hideExpression: '!model.enabled',\r\n                templateOptions: {\r\n                    type: 'number',\r\n                    label: 'Timeout',\r\n                    help: 'Supercedes the general timeout in \"Searching\"'\r\n                }\r\n            }\r\n        ]);\r\n\r\n\r\n        if (showpreselect) {\r\n            fieldset.push(\r\n                {\r\n                    key: 'preselect',\r\n                    type: 'horizontalSwitch',\r\n                    hideExpression: '!model.enabled || model.accessType == \"external\"',\r\n                    templateOptions: {\r\n                        type: 'switch',\r\n                        label: 'Preselect',\r\n                        help: 'Preselect this indexer on the search page'\r\n                    }\r\n                }\r\n            );\r\n            fieldset.push(\r\n                {\r\n                    key: 'accessType',\r\n                    type: 'horizontalSelect',\r\n                    hideExpression: '!model.enabled',\r\n                    templateOptions: {\r\n                        label: 'Enable for...',\r\n                        options: [\r\n                            {name: 'Internal searches only', value: 'internal'},\r\n                            {name: 'API searches only', value: 'external'},\r\n                            {name: 'Internal and API searches', value: 'both'}\r\n                        ]\r\n                    }\r\n                }\r\n            )\r\n        }\r\n\r\n        if (searchIds) {\r\n            fieldset.push(\r\n                {\r\n                    key: 'search_ids',\r\n                    type: 'horizontalMultiselect',\r\n                    hideExpression: '!model.enabled',\r\n                    templateOptions: {\r\n                        label: 'Search types',\r\n                        options: [\r\n                            {label: 'TVDB', id: 'tvdbid'},\r\n                            {label: 'TVRage', id: 'rid'},\r\n                            {label: 'IMDB', id: 'imdbid'},\r\n                            {label: 'Trakt', id: 'traktid'},\r\n                            {label: 'TVMaze', id: 'tvmazeid'},\r\n                            {label: 'TMDB', id: 'tmdbid'}\r\n                        ]\r\n                    }\r\n                }\r\n            )\r\n        }\r\n\r\n        if (testConnection) {\r\n            fieldset.push(\r\n                {\r\n                    type: 'horizontalTestConnection',\r\n                    hideExpression: '!model.enabled || !model.host || !model.apikey || !model.name',\r\n                    templateOptions: {\r\n                        label: 'Test connection',\r\n                        testType: testtype\r\n                    }\r\n                }\r\n            )\r\n        }\r\n\r\n        if (showCheckCaps) {\r\n            fieldset.push(\r\n                {\r\n                    type: 'horizontalCheckCaps',\r\n                    hideExpression: '!model.enabled || !model.host || !model.apikey || !model.name',\r\n                    templateOptions: {\r\n                        label: 'Check search types',\r\n                        help: 'Find out what search types the indexer supports. It\\'s recommended to do this for every new indexer.'\r\n                    }\r\n                }\r\n            )\r\n        }\r\n\r\n        return fieldset;\r\n    }\r\n\r\n    function ipValidator() {\r\n        return {\r\n            expression: function ($viewValue, $modelValue) {\r\n                var value = $modelValue || $viewValue;\r\n                if (value) {\r\n                    return /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/.test(value)\r\n                        || /^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$/.test(value);\r\n                }\r\n                return true;\r\n            },\r\n            message: '$viewValue + \" is not a valid IP Address\"'\r\n        };\r\n    }\r\n\r\n    function authValidatorDontLockYourselfOut(rootModel) {\r\n        return {\r\n            expression: function ($viewValue, $modelValue, scope) {\r\n                var value = $viewValue || $modelValue;\r\n                if (value) {\r\n                    return true;\r\n                }\r\n                if (rootModel.auth.users.length > 0) {\r\n                    return _.any(rootModel.auth.users, function (user) {\r\n                        return scope.model.name != user.name && user.maySeeAdmin;\r\n                    })\r\n                }\r\n                return true;\r\n            },\r\n            message: '\"If you have users at least one should have admin rights or you lock yourself out\"'\r\n        };\r\n    }\r\n\r\n    function regexValidator(regex, message, prefixViewValue) {\r\n        return {\r\n            expression: function ($viewValue, $modelValue) {\r\n                var value = $modelValue || $viewValue;\r\n                if (value) {\r\n                    return regex.test(value);\r\n                }\r\n                return true;\r\n            },\r\n\r\n            message: (prefixViewValue ? '$viewValue + \" ' : '\" ') + message + '\"'\r\n        };\r\n    }\r\n\r\n    function getFields(rootModel) {\r\n        return {\r\n            main: [\r\n                {\r\n                    wrapper: 'fieldset',\r\n                    templateOptions: {label: 'Hosting'},\r\n                    fieldGroup: [\r\n                        {\r\n                            key: 'host',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'Host',\r\n                                required: true,\r\n                                placeholder: 'IPv4 address to bind to',\r\n                                help: 'Requires restart'\r\n                            },\r\n                            validators: {\r\n                                ipAddress: ipValidator()\r\n                            },\r\n                            watcher: {\r\n                                listener: restartListener\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'port',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'number',\r\n                                label: 'Port',\r\n                                required: true,\r\n                                placeholder: '5050',\r\n                                help: 'Requires restart'\r\n                            },\r\n                            validators: {\r\n                                port: regexValidator(/^\\d{1,5}$/, \"is no valid port\", true)\r\n                            },\r\n                            watcher: {\r\n                                listener: restartListener\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'urlBase',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'URL base',\r\n                                placeholder: '/nzbhydra',\r\n                                help: 'Set when using an external proxy'\r\n                            },\r\n                            validators: {\r\n                                urlBase: regexValidator(/^\\/[\\w\\/]*$/, \"Base URL needs to start with a slash and must not end with one\")\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'externalUrl',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'External URL',\r\n                                placeholder: 'https://www.somedomain.com/nzbhydra/',\r\n                                help: 'Set to the full external URL so machines outside can use the generated NZB links.'\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'useLocalUrlForApiAccess',\r\n                            type: 'horizontalSwitch',\r\n                            hideExpression: '!model.externalUrl',\r\n                            templateOptions: {\r\n                                type: 'switch',\r\n                                label: 'Use local address in API results',\r\n                                help: 'Disable to make API results use the external URL in NZB links.'\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'ssl',\r\n                            type: 'horizontalSwitch',\r\n                            templateOptions: {\r\n                                type: 'switch',\r\n                                label: 'Use SSL',\r\n                                help: 'Requires restart'\r\n                            },\r\n                            watcher: {\r\n                                listener: restartListener\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'sslcert',\r\n                            hideExpression: '!model.ssl',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'SSL certificate file',\r\n                                required: true,\r\n                                help: 'Requires restart'\r\n                            },\r\n                            watcher: {\r\n                                listener: restartListener\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'sslkey',\r\n                            hideExpression: '!model.ssl',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'SSL key file',\r\n                                required: true,\r\n                                help: 'Requires restart'\r\n                            },\r\n                            watcher: {\r\n                                listener: restartListener\r\n                            }\r\n                        }\r\n\r\n                    ]\r\n                },\r\n                {\r\n                    wrapper: 'fieldset',\r\n                    templateOptions: {label: 'Security'},\r\n                    fieldGroup: [\r\n\r\n                        {\r\n                            key: 'apikey',\r\n                            type: 'horizontalApiKeyInput',\r\n                            templateOptions: {\r\n                                label: 'API key',\r\n                                help: 'Remove to disable. Alphanumeric only'\r\n                            },\r\n                            validators: {\r\n                                apikey: regexValidator(/^[a-zA-Z0-9]*$/, \"API key must only contain numbers and digits\", false)\r\n                            }\r\n                        }\r\n                    ]\r\n                },\r\n\r\n                {\r\n                    wrapper: 'fieldset',\r\n                    key: 'logging',\r\n                    templateOptions: {label: 'Logging'},\r\n                    fieldGroup: [\r\n                        {\r\n                            key: 'logfilelevel',\r\n                            type: 'horizontalSelect',\r\n                            templateOptions: {\r\n                                type: 'select',\r\n                                label: 'Logfile level',\r\n                                options: [\r\n                                    {name: 'Critical', value: 'CRITICAL'},\r\n                                    {name: 'Error', value: 'ERROR'},\r\n                                    {name: 'Warning', value: 'WARNING'},\r\n                                    {name: 'Debug', value: 'DEBUG'},\r\n                                    {name: 'Info', value: 'INFO'}\r\n                                ]\r\n                            },\r\n                            watcher: {\r\n                                listener: restartListener\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'logfilename',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'Log file',\r\n                                required: true\r\n                            },\r\n                            watcher: {\r\n                                listener: restartListener\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'consolelevel',\r\n                            type: 'horizontalSelect',\r\n                            templateOptions: {\r\n                                type: 'select',\r\n                                label: 'Console log level',\r\n                                options: [\r\n                                    {name: 'Critical', value: 'CRITICAL'},\r\n                                    {name: 'Error', value: 'ERROR'},\r\n                                    {name: 'Warning', value: 'WARNING'},\r\n                                    {name: 'Info', value: 'INFO'},\r\n                                    {name: 'Debug', value: 'DEBUG'}\r\n                                ]\r\n                            },\r\n                            watcher: {\r\n                                listener: restartListener\r\n                            }\r\n                        }\r\n\r\n\r\n                    ]\r\n                },\r\n                {\r\n                    wrapper: 'fieldset',\r\n                    templateOptions: {label: 'Other'},\r\n                    fieldGroup: [\r\n                        {\r\n                            key: 'debug',\r\n                            type: 'horizontalSwitch',\r\n                            templateOptions: {\r\n                                type: 'switch',\r\n                                label: 'Enable debugging',\r\n                                help: \"Only do this if you know what and why you're doing it\"\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'runThreaded',\r\n                            type: 'horizontalSwitch',\r\n                            templateOptions: {\r\n                                type: 'switch',\r\n                                label: 'Run threaded server',\r\n                                help: 'Requires restart. Experimental. Please report your experiences.'\r\n                            },\r\n                            watcher: {\r\n                                listener: restartListener\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'startupBrowser',\r\n                            type: 'horizontalSwitch',\r\n                            templateOptions: {\r\n                                type: 'switch',\r\n                                label: 'Open browser on startup'\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'branch',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'Repository branch',\r\n                                required: true,\r\n                                help: 'Stay on master. Seriously...'\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            ],\r\n\r\n            searching: [\r\n                {\r\n                    wrapper: 'fieldset',\r\n                    templateOptions: {\r\n                        label: 'Indexer access'\r\n                    },\r\n                    fieldGroup: [\r\n                        {\r\n                            key: 'timeout',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'number',\r\n                                label: 'Timeout when accessing indexers',\r\n                                addonRight: {\r\n                                    text: 'seconds'\r\n                                }\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'ignoreTemporarilyDisabled',\r\n                            type: 'horizontalSwitch',\r\n                            templateOptions: {\r\n                                type: 'switch',\r\n                                label: 'Ignore temporarily disabled',\r\n                                help: \"If enabled access to indexers will never be paused after an error occurred\"\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'ignorePassworded',\r\n                            type: 'horizontalSwitch',\r\n                            templateOptions: {\r\n                                type: 'switch',\r\n                                label: 'Ignore passworded releases',\r\n                                help: \"Not all indexers provide this information\"\r\n                            }\r\n                        },\r\n\r\n                        {\r\n                            key: 'ignoreWords',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'Ignore results with ...',\r\n                                placeholder: 'separate, with, commas, like, this',\r\n                                help: \"Results with any of these words in the title will be ignored\"\r\n                            }\r\n                        },\r\n\r\n\r\n                        {\r\n                            key: 'generate_queries',\r\n                            type: 'horizontalMultiselect',\r\n                            templateOptions: {\r\n                                label: 'Generate queries',\r\n                                options: [\r\n                                    {label: 'Internal searches', id: 'internal'},\r\n                                    {label: 'API searches', id: 'external'}\r\n                                ],\r\n                                help: \"Generate queries for indexers which do not support ID based searches\"\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'userAgent',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'User agent',\r\n                                required: true\r\n                            }\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    wrapper: 'fieldset',\r\n                    templateOptions: {\r\n                        label: 'Result processing'\r\n                    },\r\n                    fieldGroup: [\r\n                        {\r\n                            key: 'htmlParser',\r\n                            type: 'horizontalSelect',\r\n                            templateOptions: {\r\n                                type: 'select',\r\n                                label: 'Type',\r\n                                options: [\r\n                                    {name: 'Default BS (slow)', value: 'html.parser'},\r\n                                    {name: 'LXML (faster, needs to be installed separately)', value: 'lxml'}\r\n                                ]\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'duplicateSizeThresholdInPercent',\r\n                            type: 'horizontalPercentInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'Duplicate size threshold',\r\n                                required: true,\r\n                                addonRight: {\r\n                                    text: '%'\r\n                                }\r\n\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'duplicateAgeThreshold',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'number',\r\n                                label: 'Duplicate age threshold',\r\n                                required: true,\r\n                                addonRight: {\r\n                                    text: 'seconds'\r\n                                }\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'removeDuplicatesExternal',\r\n                            type: 'horizontalSwitch',\r\n                            templateOptions: {\r\n                                type: 'switch',\r\n                                label: 'Remove API duplicates',\r\n                                help: 'Remove duplicates when searching via API'\r\n                            }\r\n                        }\r\n                    ]\r\n                },\r\n\r\n                {\r\n                    wrapper: 'fieldset',\r\n                    key: 'categorysizes',\r\n                    templateOptions: {label: 'Category sizes'},\r\n                    fieldGroup: [\r\n\r\n                        {\r\n                            key: 'enable_category_sizes',\r\n                            type: 'horizontalSwitch',\r\n                            templateOptions: {\r\n                                type: 'switch',\r\n                                label: 'Category sizes',\r\n                                help: \"Preset min and max sizes depending on the selected category\"\r\n                            }\r\n                        },\r\n                        {\r\n                            wrapper: 'logicalGroup',\r\n                            hideExpression: '!model.enable_category_sizes',\r\n                            fieldGroup: [\r\n                                {\r\n                                    wrapper: 'settingWrapper',\r\n                                    templateOptions: {\r\n                                        label: 'Movies'\r\n                                    },\r\n                                    fieldGroup: [\r\n                                        {\r\n                                            key: 'moviesmin',\r\n                                            type: 'duoSetting',\r\n                                            templateOptions: {\r\n                                                addonRight: {\r\n                                                    text: 'MB'\r\n                                                }\r\n                                            }\r\n                                        },\r\n                                        {\r\n                                            type: 'duolabel'\r\n                                        },\r\n                                        {\r\n                                            key: 'moviesmax',\r\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\r\n                                        }\r\n                                    ]\r\n                                },\r\n                                {\r\n                                    wrapper: 'settingWrapper',\r\n                                    templateOptions: {\r\n                                        label: 'Movies HD'\r\n                                    },\r\n                                    fieldGroup: [\r\n                                        {\r\n                                            key: 'movieshdmin',\r\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\r\n                                        },\r\n                                        {\r\n                                            type: 'duolabel'\r\n                                        },\r\n                                        {\r\n                                            key: 'movieshdmax',\r\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\r\n                                        }\r\n                                    ]\r\n                                },\r\n                                {\r\n                                    wrapper: 'settingWrapper',\r\n                                    templateOptions: {\r\n                                        label: 'Movies SD'\r\n                                    },\r\n                                    fieldGroup: [\r\n                                        {\r\n                                            key: 'moviessdmin',\r\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\r\n                                        },\r\n                                        {\r\n                                            type: 'duolabel'\r\n                                        },\r\n                                        {\r\n                                            key: 'movieshdmin',\r\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\r\n                                        }\r\n                                    ]\r\n                                },\r\n\r\n                                {\r\n                                    wrapper: 'settingWrapper',\r\n                                    templateOptions: {\r\n                                        label: 'TV'\r\n                                    },\r\n                                    fieldGroup: [\r\n                                        {\r\n                                            key: 'tvmin',\r\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\r\n                                        },\r\n                                        {\r\n                                            type: 'duolabel'\r\n                                        },\r\n                                        {\r\n                                            key: 'tvmax',\r\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\r\n                                        }\r\n                                    ]\r\n                                },\r\n\r\n                                {\r\n                                    wrapper: 'settingWrapper',\r\n                                    templateOptions: {\r\n                                        label: 'TV HD'\r\n                                    },\r\n                                    fieldGroup: [\r\n                                        {\r\n                                            key: 'tvhdmin',\r\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\r\n                                        },\r\n                                        {\r\n                                            type: 'duolabel'\r\n                                        },\r\n                                        {\r\n                                            key: 'tvhdmax',\r\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\r\n                                        }\r\n                                    ]\r\n                                },\r\n\r\n                                {\r\n                                    wrapper: 'settingWrapper',\r\n                                    templateOptions: {\r\n                                        label: 'TV SD'\r\n                                    },\r\n                                    fieldGroup: [\r\n                                        {\r\n                                            key: 'tvsdmin',\r\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\r\n                                        },\r\n                                        {\r\n                                            type: 'duolabel'\r\n                                        },\r\n                                        {\r\n                                            key: 'tvsdmax',\r\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\r\n                                        }\r\n                                    ]\r\n                                },\r\n\r\n                                {\r\n                                    wrapper: 'settingWrapper',\r\n                                    templateOptions: {\r\n                                        label: 'Audio'\r\n                                    },\r\n                                    fieldGroup: [\r\n                                        {\r\n                                            key: 'audiomin',\r\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\r\n                                        },\r\n                                        {\r\n                                            type: 'duolabel'\r\n                                        },\r\n                                        {\r\n                                            key: 'audiomax',\r\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\r\n                                        }\r\n                                    ]\r\n                                },\r\n\r\n                                {\r\n                                    wrapper: 'settingWrapper',\r\n                                    templateOptions: {\r\n                                        label: 'Audio FLAC'\r\n                                    },\r\n                                    fieldGroup: [\r\n                                        {\r\n                                            key: 'flacmin',\r\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\r\n                                        },\r\n                                        {\r\n                                            type: 'duolabel'\r\n                                        },\r\n                                        {\r\n                                            key: 'flacmax',\r\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\r\n                                        }\r\n                                    ]\r\n                                },\r\n\r\n                                {\r\n                                    wrapper: 'settingWrapper',\r\n                                    templateOptions: {\r\n                                        label: 'Audio MP3'\r\n                                    },\r\n                                    fieldGroup: [\r\n                                        {\r\n                                            key: 'mp3min',\r\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\r\n                                        },\r\n                                        {\r\n                                            type: 'duolabel'\r\n                                        },\r\n                                        {\r\n                                            key: 'mp3max',\r\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\r\n                                        }\r\n                                    ]\r\n                                },\r\n\r\n                                {\r\n                                    wrapper: 'settingWrapper',\r\n                                    templateOptions: {\r\n                                        label: 'Audiobook'\r\n                                    },\r\n                                    fieldGroup: [\r\n                                        {\r\n                                            key: 'audiobookmin',\r\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\r\n                                        },\r\n                                        {\r\n                                            type: 'duolabel'\r\n                                        },\r\n                                        {\r\n                                            key: 'audiobookmax',\r\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\r\n                                        }\r\n                                    ]\r\n                                },\r\n\r\n                                {\r\n                                    wrapper: 'settingWrapper',\r\n                                    templateOptions: {\r\n                                        label: 'Console'\r\n                                    },\r\n                                    fieldGroup: [\r\n                                        {\r\n                                            key: 'consolemin',\r\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\r\n                                        },\r\n                                        {\r\n                                            type: 'duolabel'\r\n                                        },\r\n                                        {\r\n                                            key: 'consolemax',\r\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\r\n                                        }\r\n                                    ]\r\n                                },\r\n\r\n                                {\r\n                                    wrapper: 'settingWrapper',\r\n                                    templateOptions: {\r\n                                        label: 'PC'\r\n                                    },\r\n                                    fieldGroup: [\r\n                                        {\r\n                                            key: 'pcmin',\r\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\r\n                                        },\r\n                                        {\r\n                                            type: 'duolabel'\r\n                                        },\r\n                                        {\r\n                                            key: 'pcmax',\r\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\r\n                                        }\r\n                                    ]\r\n                                },\r\n\r\n                                {\r\n                                    wrapper: 'settingWrapper',\r\n                                    templateOptions: {\r\n                                        label: 'XXX'\r\n                                    },\r\n                                    fieldGroup: [\r\n                                        {\r\n                                            key: 'xxxmin',\r\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\r\n                                        },\r\n                                        {\r\n                                            type: 'duolabel'\r\n                                        },\r\n                                        {\r\n                                            key: 'xxxmax',\r\n                                            type: 'duoSetting', templateOptions: {addonRight: {text: 'MB'}}\r\n                                        }\r\n                                    ]\r\n                                }\r\n                            ]\r\n                        }\r\n\r\n                    ]\r\n                }\r\n\r\n            ],\r\n\r\n            downloader: [\r\n                {\r\n                    key: 'downloader',\r\n                    type: 'horizontalSelect',\r\n                    templateOptions: {\r\n                        type: 'select',\r\n                        label: 'Downloader',\r\n                        options: [\r\n                            {name: 'None', value: 'none'},\r\n                            {name: 'NZBGet', value: 'nzbget'},\r\n                            {name: 'SABnzbd', value: 'sabnzbd'}\r\n                        ]\r\n                    }\r\n                },\r\n                {\r\n                    key: 'nzbaccesstype',\r\n                    type: 'horizontalSelect',\r\n                    templateOptions: {\r\n                        type: 'select',\r\n                        label: 'NZB access type',\r\n                        options: [\r\n                            {name: 'Proxy NZBs from indexer', value: 'serve'},\r\n                            {name: 'Redirect to the indexer', value: 'redirect'}\r\n                        ],\r\n                        help: \"How external access to NZBs is provided. Redirecting is recommended.\"\r\n                    }\r\n                },\r\n                {\r\n                    key: 'nzbAddingType',\r\n                    type: 'horizontalSelect',\r\n                    templateOptions: {\r\n                        type: 'select',\r\n                        label: 'NZB adding type',\r\n                        options: [\r\n                            {name: 'Send link', value: 'link'},\r\n                            {name: 'Upload NZB', value: 'nzb'}\r\n                        ],\r\n                        help: \"How NZBs are added to the downloader, either by sending a link to the NZB or by uploading the NZB data\"\r\n                    }\r\n                },\r\n                {\r\n                    wrapper: 'fieldset',\r\n                    key: 'nzbget',\r\n                    hideExpression: 'model.downloader!=\"nzbget\"',\r\n                    templateOptions: {label: 'NZBGet'},\r\n                    fieldGroup: [\r\n                        {\r\n                            key: 'host',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'Host',\r\n                                required: true\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'port',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'number',\r\n                                label: 'Port',\r\n                                placeholder: '5050',\r\n                                required: true\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'ssl',\r\n                            type: 'horizontalSwitch',\r\n                            templateOptions: {\r\n                                type: 'switch',\r\n                                label: 'Use SSL'\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'username',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'Username'\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'password',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'password',\r\n                                label: 'Password'\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'defaultCategory',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'Default category',\r\n                                help: 'When adding NZBs this category will be used instead of asking for the category'\r\n                            }\r\n                        },\r\n                        {\r\n                            type: 'horizontalTestConnection',\r\n                            templateOptions: {\r\n                                label: 'Test connection',\r\n                                testType: 'downloader',\r\n                                downloader: 'nzbget'\r\n                            }\r\n                        }\r\n\r\n\r\n                    ]\r\n                },\r\n                {\r\n                    wrapper: 'fieldset',\r\n                    key: 'sabnzbd',\r\n                    hideExpression: 'model.downloader!=\"sabnzbd\"',\r\n                    templateOptions: {label: 'SABnzbd'},\r\n                    fieldGroup: [\r\n                        {\r\n                            key: 'url',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'URL',\r\n                                required: true\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'username',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'Username',\r\n                                help: 'Usually not needed when an API key is used'\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'password',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'password',\r\n                                label: 'Password',\r\n                                help: 'Usually not needed when an API key is used'\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'apikey',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'API Key'\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'defaultCategory',\r\n                            type: 'horizontalInput',\r\n                            templateOptions: {\r\n                                type: 'text',\r\n                                label: 'Default category',\r\n                                help: 'When adding NZBs this category will be used instead of asking for the category'\r\n                            }\r\n                        },\r\n                        {\r\n                            type: 'horizontalTestConnection',\r\n                            templateOptions: {\r\n                                label: 'Test connection',\r\n                                testType: 'downloader',\r\n                                downloader: 'sabnzbd'\r\n                            }\r\n                        }\r\n\r\n\r\n                    ]\r\n                }\r\n            ],\r\n\r\n            indexers: [\r\n                {\r\n                    wrapper: 'fieldset',\r\n                    key: 'binsearch',\r\n                    templateOptions: {label: 'Binsearch'},\r\n                    fieldGroup: getBasicIndexerFieldset(false, false, false, false, false, false, \"binsearch\", true)\r\n                },\r\n                {\r\n                    wrapper: 'fieldset',\r\n                    key: 'nzbclub',\r\n                    templateOptions: {label: 'NZBClub'},\r\n                    fieldGroup: getBasicIndexerFieldset(false, false, false, false, false, false, \"nzbclub\", true)\r\n                },\r\n                {\r\n                    wrapper: 'fieldset',\r\n                    key: 'nzbindex',\r\n                    templateOptions: {label: 'NZBIndex'},\r\n                    fieldGroup: getBasicIndexerFieldset(false, false, false, false, false, false, \"nzbindex\", true).concat([{\r\n                        key: 'generalMinSize',\r\n                        type: 'horizontalInput',\r\n                        hideExpression: '!model.enabled',\r\n                        templateOptions: {\r\n                            type: 'number',\r\n                            label: 'Min size',\r\n                            help: 'NZBIndex returns a lot of crap with small file sizes. Set this value and all smaller results will be filtered out no matter the category'\r\n                        }\r\n                    }])\r\n                },\r\n                {\r\n                    wrapper: 'fieldset',\r\n                    key: 'omgwtfnzbs',\r\n                    templateOptions: {label: 'omgwtfnzbs.org'},\r\n                    fieldGroup: getBasicIndexerFieldset(false, false, true, true, false, true, 'omgwtf', true)\r\n                },\r\n                {\r\n                    wrapper: 'fieldset',\r\n                    key: 'womble',\r\n                    templateOptions: {label: 'Womble'},\r\n                    fieldGroup: getBasicIndexerFieldset(false, false, false, false, false, false, \"womble\", false)\r\n                },\r\n                {\r\n                    type: 'repeatSection',\r\n                    key: 'newznab',\r\n                    templateOptions: {\r\n                        btnText: 'Add new newznab indexer',\r\n                        altLegendText: 'New indexer',\r\n                        fields: getBasicIndexerFieldset(true, true, true, false, true, true, 'newznab', true, true),\r\n                        defaultModel: {\r\n                            enabled: true,\r\n                            host: null,\r\n                            apikey: null,\r\n                            timeout: null,\r\n                            name: null,\r\n                            showOnSearch: true,\r\n                            score: 0,\r\n                            preselect: true,\r\n                            accessType: \"both\",\r\n                            search_ids: [\"imdbid\", \"rid\", \"tvdbid\"]\r\n                        }\r\n\r\n                    }\r\n\r\n                }\r\n\r\n\r\n            ],\r\n\r\n            auth: [\r\n                {\r\n                    type: 'help',\r\n                    templateOptions: {\r\n                        lines: [\r\n                            'To require login only for admin access create a user with empty username and password and add a user with username and password and admin rights.',\r\n                            'To have a simple and an admin user remove the authless user and create two users, one without and one with admin rights.',\r\n                            'Leave empty to disable authorization.'\r\n                        ]\r\n                    }\r\n                },\r\n                {\r\n                    type: 'repeatSection',\r\n                    key: 'users',\r\n                    model: rootModel.auth,\r\n                    templateOptions: {\r\n                        btnText: 'Add new user',\r\n                        altLegendText: 'Authless',\r\n                        fields: [\r\n                            {\r\n                                key: 'name',\r\n                                type: 'horizontalInput',\r\n                                templateOptions: {\r\n                                    type: 'text',\r\n                                    label: 'Username'\r\n                                }\r\n                            },\r\n                            {\r\n                                key: 'password',\r\n                                type: 'horizontalInput',\r\n                                templateOptions: {\r\n                                    type: 'text',\r\n                                    label: 'Password'\r\n                                }\r\n                            },\r\n                            {\r\n                                key: 'maySeeStats',\r\n                                type: 'horizontalSwitch',\r\n                                templateOptions: {\r\n                                    type: 'switch',\r\n                                    label: 'May see stats'\r\n                                }\r\n                            },\r\n                            {\r\n                                key: 'maySeeAdmin',\r\n                                type: 'horizontalSwitch',\r\n                                templateOptions: {\r\n                                    type: 'switch',\r\n                                    label: 'May see admin area'\r\n                                },\r\n                                validators: {\r\n                                    dontLockYourselfOut: authValidatorDontLockYourselfOut(rootModel)\r\n                                },\r\n                                data: {\r\n                                    rootModel: rootModel\r\n                                }\r\n                            }\r\n\r\n                        ],\r\n                        defaultModel: {\r\n                            name: null,\r\n                            password: null,\r\n                            maySeeStats: true,\r\n                            maySeeAdmin: true\r\n                        }\r\n                    }\r\n                }\r\n            ]\r\n\r\n\r\n        };\r\n\r\n\r\n    }\r\n\r\n}","angular\r\n    .module('nzbhydraApp')\r\n    .factory('ConfigModel', function () {\r\n        return {};\r\n    });\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .factory('ConfigWatcher', function () {\r\n        var $scope;\r\n        \r\n        return {\r\n            watch: watch\r\n        };\r\n        \r\n        function watch(scope) {\r\n            $scope = scope;\r\n            $scope.$watchGroup([\"config.main.host\"], function () {\r\n                console.log(\"Restart needed\");\r\n            }, true);\r\n        }\r\n    });\r\n\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .controller('ConfigController', ConfigController);\r\n\r\nfunction ConfigController($scope, ConfigService, config, CategoriesService, ConfigFields, ConfigModel, ModalService, RestartService, $state) {\r\n    $scope.config = config;\r\n    $scope.submit = submit;\r\n    \r\n    $scope.restartRequired = false;\r\n\r\n    ConfigFields.setRestartWatcher(function() {\r\n        $scope.restartRequired = true;\r\n    });\r\n\r\n    function submit(form) {\r\n        if (form.$valid) {\r\n            ConfigService.set($scope.config);\r\n            ConfigService.invalidateSafe();\r\n            form.$setPristine();\r\n            CategoriesService.invalidate();\r\n            if ($scope.restartRequired) {\r\n                ModalService.open(\"Restart required\", \"The changes you have made may require a restart to be effective.<br>Do you want to restart now?\", function () {\r\n                    RestartService.restart();\r\n                }, function () {\r\n                    $scope.restartRequired = false;\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    ConfigModel = config;\r\n\r\n    $scope.fields = ConfigFields.getFields($scope.config);\r\n\r\n    $scope.formTabs = [\r\n        {\r\n            name: 'Main',\r\n            model: ConfigModel.main,\r\n            fields: $scope.fields.main\r\n        },\r\n        {\r\n            name: 'Authorization',\r\n            model: ConfigModel.auth,\r\n            fields: $scope.fields.auth\r\n        },\r\n        {\r\n            name: 'Searching',\r\n            model: ConfigModel.searching,\r\n            fields: $scope.fields.searching\r\n        },\r\n        {\r\n            name: 'Downloader',\r\n            model: ConfigModel.downloader,\r\n            fields: $scope.fields.downloader\r\n        },\r\n        {\r\n            name: 'Indexers',\r\n            model: ConfigModel.indexers,\r\n            fields: $scope.fields.indexers\r\n        }\r\n    ];\r\n\r\n    $scope.allTabs = [\r\n        {\r\n            active: false,\r\n            state: 'config'\r\n        },\r\n        {\r\n            active: false,\r\n            state: 'config.auth'\r\n        },\r\n        {\r\n            active: false,\r\n            state: 'config.searching'\r\n        },\r\n        {\r\n            active: false,\r\n            state: 'config.downloader'\r\n        },\r\n        {\r\n            active: false,\r\n            state: 'config.indexers'\r\n        }\r\n    ];\r\n\r\n    for (var i = 0; i < $scope.allTabs.length; i++) {\r\n        if ($state.is($scope.allTabs[i].state)) {\r\n            $scope.allTabs[i].active = true;\r\n        }\r\n    }\r\n\r\n    $scope.isSavingNeeded = function (form) {\r\n        return form.$dirty && !form.$submitted && form.$valid;\r\n    };\r\n\r\n    $scope.goToConfigState = function (index) {\r\n        $state.go($scope.allTabs[index].state);\r\n        if (index == 5) {\r\n            $scope.downloadLog();\r\n        }\r\n    };\r\n\r\n    \r\n    \r\n}\r\nConfigController.$inject = [\"$scope\", \"ConfigService\", \"config\", \"CategoriesService\", \"ConfigFields\", \"ConfigModel\", \"ModalService\", \"RestartService\", \"$state\"];\r\n\r\n\r\n","angular\r\n    .module('nzbhydraApp')\r\n    .factory('CategoriesService', CategoriesService);\r\n\r\nfunction CategoriesService($http, $q, $uibModal) {\r\n\r\n    var categories;\r\n    var selectedCategory;\r\n    \r\n    var service = {\r\n        get: getCategories,\r\n        invalidate: invalidate,\r\n        select : select,\r\n        openCategorySelection: openCategorySelection \r\n    };\r\n    \r\n    return service;\r\n    \r\n\r\n    function getCategories() {\r\n\r\n        function loadAll() {\r\n            if (!angular.isUndefined(categories)) {\r\n                var deferred = $q.defer();\r\n                deferred.resolve(categories);\r\n                return deferred.promise;\r\n            }\r\n\r\n            return $http.get('internalapi/getcategories')\r\n                .then(function (categoriesResponse) {\r\n                    \r\n                        console.log(\"Updating downloader categories cache\");\r\n                        categories = categoriesResponse.data;\r\n                        return categoriesResponse.data;\r\n                    \r\n                }, function(error) {\r\n                    throw error;\r\n                });\r\n        }\r\n\r\n        return loadAll().then(function (categories) {\r\n            return categories.categories;\r\n        });\r\n    }\r\n\r\n    \r\n    var deferred;\r\n    \r\n    function openCategorySelection() {\r\n        $uibModal.open({\r\n            templateUrl: 'static/html/directives/addable-nzb-modal.html',\r\n            controller: 'CategorySelectionController',\r\n            size: \"sm\",\r\n            resolve: {\r\n                categories: getCategories\r\n            }\r\n        });\r\n        deferred = $q.defer();\r\n        return deferred.promise;\r\n    }\r\n    \r\n    function select(category) {\r\n        selectedCategory = category;\r\n        console.log(\"Selected category \" + category);\r\n        deferred.resolve(category);\r\n    }\r\n    \r\n    function invalidate() {\r\n        console.log(\"Invalidating categories\");\r\n        categories = undefined;\r\n    }\r\n}\r\nCategoriesService.$inject = [\"$http\", \"$q\", \"$uibModal\"];\r\n\r\nangular\r\n    .module('nzbhydraApp').controller('CategorySelectionController', [\"$scope\", \"$uibModalInstance\", \"CategoriesService\", \"categories\", function ($scope, $uibModalInstance, CategoriesService, categories) {\r\n    console.log(categories);\r\n    $scope.categories = categories;\r\n    $scope.select = function (category) {\r\n        CategoriesService.select(category);\r\n        $uibModalInstance.close($scope);\r\n    }\r\n}]);","var nzbhydraapp = angular.module('nzbhydraApp', ['angular-loading-bar', 'cgBusy', 'ngAnimate', 'ui.bootstrap', 'ipCookie', 'angular-growl', 'angular.filter', 'filters', 'ui.router', 'blockUI', 'mgcrea.ngStrap', 'angularUtils.directives.dirPagination', 'nvd3', 'formly', 'formlyBootstrap', 'frapontillo.bootstrap-switch', 'ui.select', 'ngSanitize', 'checklist-model', 'ngAria', 'ngMessages']);\r\n\r\nangular.module('nzbhydraApp').config([\"$stateProvider\", \"$urlRouterProvider\", \"$locationProvider\", \"blockUIConfig\", \"$urlMatcherFactoryProvider\", function ($stateProvider, $urlRouterProvider, $locationProvider, blockUIConfig, $urlMatcherFactoryProvider) {\r\n\r\n    blockUIConfig.autoBlock = false;\r\n    $urlMatcherFactoryProvider.strictMode(false);\r\n    \r\n    $stateProvider\r\n        .state(\"search.results\", {\r\n            templateUrl: \"static/html/states/search-results.html\",\r\n            controller: \"SearchResultsController\",\r\n            controllerAs: \"srController\",\r\n            options: {\r\n                inherit: false\r\n            },\r\n            params: {\r\n                results: [],\r\n                indexersearches: [],\r\n                total: 0,\r\n                resultsCount: 0,\r\n                minsize: undefined,\r\n                maxsize: undefined,\r\n                minage: undefined,\r\n                maxage: undefined\r\n            }\r\n        })\r\n        .state(\"config\", {\r\n            url: \"/config\",\r\n            templateUrl: \"static/html/states/config.html\",\r\n            controller: \"ConfigController\",\r\n            resolve: {\r\n                config: ['ConfigService', function (ConfigService) {\r\n                    return ConfigService.get();\r\n                }],\r\n                safeConfig: ['ConfigService', function (ConfigService) {\r\n                    return ConfigService.getSafe();\r\n                }] \r\n            }\r\n        })\r\n        .state(\"config.auth\", {\r\n            url: \"/auth\",\r\n            templateUrl: \"static/html/states/config.html\",\r\n            controller: \"ConfigController\",\r\n            resolve: {\r\n                config: ['ConfigService', function (ConfigService) {\r\n                    return ConfigService.get();\r\n                }]\r\n            }\r\n        })\r\n        .state(\"config.searching\", {\r\n            url: \"/searching\",\r\n            templateUrl: \"static/html/states/config.html\",\r\n            controller: \"ConfigController\",\r\n            resolve: {\r\n                config: ['ConfigService', function (ConfigService) {\r\n                    return ConfigService.get();\r\n                }]\r\n            }\r\n        })\r\n        .state(\"config.downloader\", {\r\n            url: \"/downloader\",\r\n            templateUrl: \"static/html/states/config.html\",\r\n            controller: \"ConfigController\",\r\n            resolve: {\r\n                config: ['ConfigService', function (ConfigService) {\r\n                    return ConfigService.get();\r\n                }]\r\n            }\r\n        })\r\n        .state(\"config.indexers\", {\r\n            url: \"/indexers\",\r\n            templateUrl: \"static/html/states/config.html\",\r\n            controller: \"ConfigController\",\r\n            resolve: {\r\n                config: ['ConfigService', function (ConfigService) {\r\n                    return ConfigService.get();\r\n                }]\r\n            }\r\n        })\r\n        .state(\"config.system\", {\r\n            url: \"/system\",\r\n            templateUrl: \"static/html/states/config.html\",\r\n            controller: \"ConfigController\",\r\n            resolve: {\r\n                config: ['ConfigService', function (ConfigService) {\r\n                    return ConfigService.get();\r\n                }]\r\n            }\r\n        })\r\n        .state(\"config.log\", {\r\n            url: \"/log\",\r\n            templateUrl: \"static/html/states/config.html\",\r\n            controller: \"ConfigController\",\r\n            resolve: {\r\n                config: ['ConfigService', function (ConfigService) {\r\n                    return ConfigService.get();\r\n                }]\r\n            }\r\n        })\r\n        .state(\"stats\", {\r\n            url: \"/stats\",\r\n            templateUrl: \"static/html/states/stats.html\",\r\n            controller: \"StatsController\",\r\n            resolve: {\r\n                stats: ['StatsService', function(StatsService) {\r\n                    return StatsService.get();\r\n                }]\r\n            }\r\n        })\r\n        .state(\"stats.indexers\", {\r\n            url: \"/indexers\",\r\n            templateUrl: \"static/html/states/stats.html\",\r\n            controller: \"StatsController\",\r\n            resolve: {\r\n                stats: ['StatsService', function (StatsService) {\r\n                    return StatsService.get();\r\n                }]\r\n            }\r\n        })\r\n        .state(\"stats.searches\", {\r\n            url: \"/searches\",\r\n            templateUrl: \"static/html/states/stats.html\",\r\n            controller: \"StatsController\",\r\n            resolve: {\r\n                stats: ['StatsService', function (StatsService) {\r\n                    return StatsService.get();\r\n                }]\r\n            }\r\n        })\r\n        .state(\"stats.downloads\", {\r\n            url: \"/downloads\",\r\n            templateUrl: \"static/html/states/stats.html\",\r\n            controller: \"StatsController\",\r\n            resolve: {\r\n                stats: ['StatsService', function (StatsService) {\r\n                    return StatsService.get();\r\n                }]\r\n            }\r\n        })\r\n        .state(\"system\", {\r\n            url: \"/system\",\r\n            templateUrl: \"static/html/states/system.html\",\r\n            controller: \"SystemController\",\r\n            resolve: {\r\n                foobar: ['$http', function ($http) {\r\n                    return $http.get(\"internalapi/askforadmin\")\r\n                }]\r\n            }\r\n        })\r\n        .state(\"system.updates\", {\r\n            url: \"/updates\",\r\n            templateUrl: \"static/html/states/system.html\",\r\n            controller: \"SystemController\",\r\n            resolve: {\r\n                foobar: ['$http', function ($http) {\r\n                    return $http.get(\"internalapi/askforadmin\")\r\n                }]\r\n            }\r\n        })\r\n        .state(\"system.log\", {\r\n            url: \"/log\",\r\n            templateUrl: \"static/html/states/system.html\",\r\n            controller: \"SystemController\",\r\n            resolve: {\r\n                foobar: ['$http', function ($http) {\r\n                    return $http.get(\"internalapi/askforadmin\")\r\n                }]\r\n            }\r\n        })\r\n        .state(\"system.about\", {\r\n            url: \"/about\",\r\n            templateUrl: \"static/html/states/system.html\",\r\n            controller: \"SystemController\",\r\n            resolve: {\r\n                foobar: ['$http', function ($http) {\r\n                    return $http.get(\"internalapi/askforadmin\")\r\n                }]\r\n            }\r\n        })\r\n        .state(\"search\", {\r\n            url: \"/:search?category&query&imdbid&tvdbid&title&season&episode&minsize&maxsize&minage&maxage&offsets&rid&mode&tmdbid&indexers\",\r\n            templateUrl: \"static/html/states/search.html\",\r\n            controller: \"SearchController\",\r\n            resolve: {\r\n                safeConfig: ['ConfigService', function (ConfigService) {\r\n                    return ConfigService.getSafe();\r\n                }]\r\n            }\r\n        })\r\n    ;\r\n\r\n    $locationProvider.html5Mode(true);\r\n}]);\r\n\r\nnzbhydraapp.config([\"paginationTemplateProvider\", function (paginationTemplateProvider) {\r\n    paginationTemplateProvider.setPath('static/html/dirPagination.tpl.html');\r\n}]);\r\n\r\nnzbhydraapp.config(['cfpLoadingBarProvider', function (cfpLoadingBarProvider) {\r\n    cfpLoadingBarProvider.latencyThreshold = 100;\r\n}]);\r\n\r\nnzbhydraapp.config(['growlProvider', function (growlProvider) {\r\n    growlProvider.globalTimeToLive(5000);\r\n    growlProvider.globalPosition('bottom-right');\r\n}]);\r\n\r\nnzbhydraapp.directive('ngEnter', function () {\r\n    return function (scope, element, attr) {\r\n        element.bind(\"keydown keypress\", function (event) {\r\n            if (event.which === 13) {\r\n                scope.$apply(function () {\r\n                    scope.$evalAsync(attr.ngEnter);\r\n                });\r\n\r\n                event.preventDefault();\r\n            }\r\n        });\r\n    };\r\n});\r\n\r\nnzbhydraapp.filter('nzblink', function () {\r\n    return function (resultItem) {\r\n        var uri = new URI(\"internalapi/getnzb\");\r\n        uri.addQuery(\"guid\", resultItem.guid);\r\n        uri.addQuery(\"title\", resultItem.title);\r\n        uri.addQuery(\"provider\", resultItem.provider);\r\n\r\n        return uri.toString();\r\n    }\r\n});\r\n\r\nnzbhydraapp.factory('focus', [\"$rootScope\", \"$timeout\", function ($rootScope, $timeout) {\r\n    return function (name) {\r\n        $timeout(function () {\r\n            $rootScope.$broadcast('focusOn', name);\r\n        });\r\n    }\r\n}]);\r\n\r\nnzbhydraapp.filter('unsafe', [\"$sce\", function ($sce) {\r\n    return $sce.trustAsHtml;\r\n}]);\r\n\r\n_.mixin({\r\n    isNullOrEmpty: function (string) {\r\n        return (_.isUndefined(string) || _.isNull(string) || (_.isString(string) && string.length === 0))\r\n    }\r\n});\r\n","var HEADER_NAME = 'MyApp-Handle-Errors-Generically';\r\nvar specificallyHandleInProgress = false;\r\n\r\nnzbhydraapp.factory('RequestsErrorHandler',  [\"$q\", \"growl\", \"blockUI\", \"GeneralModalService\", function ($q, growl, blockUI, GeneralModalService) {\r\n    return {\r\n        // --- The user's API for claiming responsiblity for requests ---\r\n        specificallyHandled: function (specificallyHandledBlock) {\r\n            specificallyHandleInProgress = true;\r\n            try {\r\n                return specificallyHandledBlock();\r\n            } finally {\r\n                specificallyHandleInProgress = false;\r\n            }\r\n        },\r\n\r\n        // --- Response interceptor for handling errors generically ---\r\n        responseError: function (rejection) {\r\n            blockUI.reset();\r\n            var shouldHandle = (rejection && rejection.config && rejection.config.headers && rejection.config.headers[HEADER_NAME]);\r\n            \r\n            if (shouldHandle) {\r\n                var message = \"An error occured :<br>\" + rejection.status + \": \" + rejection.statusText;\r\n\r\n                if (rejection.data) {\r\n                    message += \"<br><br>\" + rejection.data;\r\n                }\r\n                GeneralModalService.open(message);\r\n\r\n            }\r\n\r\n            return $q.reject(rejection);\r\n        }\r\n    };\r\n}]);\r\n\r\n\r\nnzbhydraapp.config(['$provide', '$httpProvider', function ($provide, $httpProvider) {\r\n    $httpProvider.interceptors.push('RequestsErrorHandler');\r\n\r\n    // --- Decorate $http to add a special header by default ---\r\n\r\n    function addHeaderToConfig(config) {\r\n        config = config || {};\r\n        config.headers = config.headers || {};\r\n\r\n        // Add the header unless user asked to handle errors himself\r\n        if (!specificallyHandleInProgress) {\r\n            config.headers[HEADER_NAME] = true;\r\n        }\r\n\r\n        return config;\r\n    }\r\n\r\n    // The rest here is mostly boilerplate needed to decorate $http safely\r\n    $provide.decorator('$http', ['$delegate', function ($delegate) {\r\n        function decorateRegularCall(method) {\r\n            return function (url, config) {\r\n                return $delegate[method](url, addHeaderToConfig(config));\r\n            };\r\n        }\r\n\r\n        function decorateDataCall(method) {\r\n            return function (url, data, config) {\r\n                return $delegate[method](url, data, addHeaderToConfig(config));\r\n            };\r\n        }\r\n\r\n        function copyNotOverriddenAttributes(newHttp) {\r\n            for (var attr in $delegate) {\r\n                if (!newHttp.hasOwnProperty(attr)) {\r\n                    if (typeof($delegate[attr]) === 'function') {\r\n                        newHttp[attr] = function () {\r\n                            return $delegate.apply($delegate, arguments);\r\n                        };\r\n                    } else {\r\n                        newHttp[attr] = $delegate[attr];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        var newHttp = function (config) {\r\n            return $delegate(addHeaderToConfig(config));\r\n        };\r\n\r\n        newHttp.get = decorateRegularCall('get');\r\n        newHttp.delete = decorateRegularCall('delete');\r\n        newHttp.head = decorateRegularCall('head');\r\n        newHttp.jsonp = decorateRegularCall('jsonp');\r\n        newHttp.post = decorateDataCall('post');\r\n        newHttp.put = decorateDataCall('put');\r\n\r\n        copyNotOverriddenAttributes(newHttp);\r\n\r\n        return newHttp;\r\n    }]);\r\n}]);","hashCode = function (s) {\r\n    return s.split(\"\").reduce(function (a, b) {\r\n        a = ((a << 5) - a) + b.charCodeAt(0);\r\n        return a & a\r\n    }, 0);\r\n};\r\n\r\nangular\r\n    .module('nzbhydraApp')\r\n    .config([\"formlyConfigProvider\", function config(formlyConfigProvider) {\r\n        formlyConfigProvider.extras.removeChromeAutoComplete = true;\r\n        formlyConfigProvider.extras.explicitAsync = true;\r\n        formlyConfigProvider.disableWarnings = window.onProd;\r\n        \r\n        \r\n        formlyConfigProvider.setWrapper({\r\n            name: 'settingWrapper',\r\n            templateUrl: 'setting-wrapper.html',\r\n            controller: ['$scope', function ($scope) {\r\n                $scope.options.data.getValidationMessage = getValidationMessage;\r\n\r\n                function getValidationMessage(key) {\r\n                    var message = $scope.options.validation.messages[key];\r\n                    if (message) {\r\n                        return message($scope.fc.$viewValue, $scope.fc.$modelValue, $scope);\r\n                    }\r\n                }\r\n            }]\r\n        });\r\n\r\n\r\n        formlyConfigProvider.setWrapper({\r\n            name: 'fieldset',\r\n            template: [\r\n                '<fieldset>',\r\n                '<legend>{{options.templateOptions.label}}</legend>',\r\n                '<formly-transclude></formly-transclude>',\r\n                '</fieldset>'\r\n            ].join(' ')\r\n        });\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'help',\r\n            template: [\r\n                '<div class=\"panel panel-default\">',\r\n                '<div class=\"panel-body\">',\r\n                '<div ng-repeat=\"line in options.templateOptions.lines\">{{ line }}</div>',\r\n                '</div>',\r\n                '</div>'\r\n            ].join(' ')\r\n        });\r\n        \r\n        \r\n\r\n        formlyConfigProvider.setWrapper({\r\n            name: 'logicalGroup',\r\n            template: [\r\n                '<formly-transclude></formly-transclude>'\r\n            ].join(' ')\r\n        });\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'horizontalInput',\r\n            extends: 'input',\r\n            wrapper: ['settingWrapper', 'bootstrapHasError'],\r\n            controller: ['$scope', function ($scope) {\r\n                $scope.options.data.getValidationMessage = getValidationMessage;\r\n\r\n                function getValidationMessage(key) {\r\n                    var message = $scope.options.validation.messages[key];\r\n                    if (message) {\r\n                        return message($scope.fc.$viewValue, $scope.fc.$modelValue, $scope);\r\n                    }\r\n                }\r\n            }]\r\n        });\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'percentInput',\r\n            template: [\r\n                '<input type=\"number\" class=\"form-control\" placeholder=\"Percent\" ng-model=\"model[options.key]\" ng-pattern=\"/^[0-9]+(\\.[0-9]{1,2})?$/\" step=\"0.01\" required />'\r\n            ].join(' ')\r\n        });\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'apiKeyInput',\r\n            template: [\r\n                '<div class=\"input-group\">',\r\n                '<input type=\"text\" class=\"form-control\" ng-model=\"model[options.key]\"/>',\r\n                '<span class=\"input-group-btn input-group-btn2\">',\r\n                '<button class=\"btn btn-default\" type=\"button\" ng-click=\"generate()\"><span class=\"glyphicon glyphicon-refresh\"></span></button>',\r\n                '</div>'\r\n            ].join(' '),\r\n            controller: function ($scope) {\r\n                $scope.generate = function () {\r\n                    $scope.model[$scope.options.key] = (Math.random() * 1e32).toString(36);\r\n                }\r\n            }\r\n        });\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'testConnection',\r\n            templateUrl: 'button-test-connection.html',\r\n            controller: function ($scope) {\r\n                $scope.message = \"\";\r\n                $scope.uniqueId = hashCode($scope.model.name) + hashCode($scope.model.host);\r\n\r\n                var testButton = \"#button-test-connection-\" + $scope.uniqueId;\r\n                var testMessage = \"#message-test-connection-\" + $scope.uniqueId;\r\n                console.log($scope);\r\n\r\n                function showSuccess() {\r\n                    angular.element(testButton).removeClass(\"btn-default\");\r\n                    angular.element(testButton).removeClass(\"btn-danger\");\r\n                    angular.element(testButton).addClass(\"btn-success\");\r\n                }\r\n\r\n                function showError() {\r\n                    angular.element(testButton).removeClass(\"btn-default\");\r\n                    angular.element(testButton).removeClass(\"btn-success\");\r\n                    angular.element(testButton).addClass(\"btn-danger\");\r\n                }\r\n\r\n                $scope.testConnection = function () {\r\n                    angular.element(testButton).addClass(\"glyphicon-refresh-animate\");\r\n                    var myInjector = angular.injector([\"ng\"]);\r\n                    var $http = myInjector.get(\"$http\");\r\n                    var url;\r\n                    var params;\r\n                    if ($scope.to.testType == \"downloader\") {\r\n                        url = \"internalapi/test_downloader\";\r\n                        params = {name: $scope.to.downloader, username: $scope.model.username, password: $scope.model.password};\r\n                        if ($scope.to.downloader == \"sabnzbd\") {\r\n                            params.apikey = $scope.model.apikey;\r\n                            params.url = $scope.model.url;\r\n                        } else {\r\n                            params.host = $scope.model.host;\r\n                            params.port = $scope.model.port;\r\n                            params.ssl = $scope.model.ssl;\r\n                        }\r\n                    } else if ($scope.to.testType == \"newznab\") {\r\n                        url = \"internalapi/test_newznab\";\r\n                        params = {host: $scope.model.host, apikey: $scope.model.apikey};\r\n                    } else if ($scope.to.testType == \"omgwtf\") {\r\n                        url = \"internalapi/test_omgwtf\";\r\n                        params = {username: $scope.model.username, apikey: $scope.model.apikey};\r\n                    }\r\n                    $http.get(url, {params: params}).success(function (result) {\r\n                        //Using ng-class and a scope variable doesn't work for some reason, is only updated at second click \r\n                        if (result.result) {\r\n                            angular.element(testMessage).text(\"\");\r\n                            showSuccess();\r\n                        } else {\r\n                            angular.element(testMessage).text(result.message);\r\n                            showError();\r\n                        }\r\n\r\n                    }).error(function () {\r\n                        angular.element(testMessage).text(result.message);\r\n                        showError();\r\n                    }).finally(function () {\r\n                        angular.element(testButton).removeClass(\"glyphicon-refresh-animate\");\r\n                    })\r\n                }\r\n            }\r\n        });\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'checkCaps',\r\n            templateUrl: 'button-check-caps.html',\r\n            controller: function ($scope) {\r\n                $scope.message = \"\";\r\n                $scope.uniqueId = hashCode($scope.model.name) + hashCode($scope.model.host);\r\n\r\n                var testButton = \"#button-check-caps-\" + $scope.uniqueId;\r\n                var testMessage = \"#message-check-caps-\" + $scope.uniqueId;\r\n\r\n                function showSuccess() {\r\n                    angular.element(testButton).removeClass(\"btn-default\");\r\n                    angular.element(testButton).removeClass(\"btn-danger\");\r\n                    angular.element(testButton).addClass(\"btn-success\");\r\n                }\r\n\r\n                function showError() {\r\n                    angular.element(testButton).removeClass(\"btn-default\");\r\n                    angular.element(testButton).removeClass(\"btn-success\");\r\n                    angular.element(testButton).addClass(\"btn-danger\");\r\n                }\r\n\r\n                $scope.checkCaps = function () {\r\n                    angular.element(testButton).addClass(\"glyphicon-refresh-animate\");\r\n                    var myInjector = angular.injector([\"ng\"]);\r\n                    var $http = myInjector.get(\"$http\");\r\n                    var url;\r\n                    var params;\r\n\r\n                    url = \"internalapi/test_caps\";\r\n                    params = {indexer: $scope.model.name, apikey: $scope.model.apikey, host: $scope.model.host};\r\n                    $http.get(url, {params: params}).success(function (result) {\r\n                        //Using ng-class and a scope variable doesn't work for some reason, is only updated at second click \r\n                        if (result.success) {\r\n                            angular.element(testMessage).text(\"Supports: \" + result.result);\r\n                            $scope.$apply(function () {\r\n                                $scope.model.search_ids = result.result;\r\n                            });\r\n                            showSuccess();\r\n                        } else {\r\n                            angular.element(testMessage).text(result.message);\r\n                            showError();\r\n                        }\r\n\r\n                    }).error(function () {\r\n                        angular.element(testMessage).text(result.message);\r\n                        showError();\r\n                    }).finally(function () {\r\n                        angular.element(testButton).removeClass(\"glyphicon-refresh-animate\");\r\n                    })\r\n                }\r\n            }\r\n        });\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'horizontalNewznabPreset',\r\n            wrapper: ['settingWrapper'],\r\n            templateUrl: 'newznab-preset.html',\r\n            controller: function ($scope) {\r\n                $scope.display = \"\";\r\n                $scope.selectedpreset = undefined;\r\n\r\n                $scope.presets = [\r\n                    {\r\n                        name: \"None\"\r\n                    },\r\n                    {\r\n                        name: \"DogNZB\",\r\n                        host: \"https://api.dognzb.cr\",\r\n                        searchIds: [\"tvdbid\", \"rid\", \"imdbid\"]\r\n                    },\r\n                    {\r\n                        name: \"NZBs.org\",\r\n                        host: \"https://nzbs.org\",\r\n                        searchIds: [\"tvdbid\", \"rid\", \"imdbid\", \"tvmazeid\"]\r\n                    },\r\n                    {\r\n                        name: \"nzb.su\",\r\n                        host: \"https://api.nzb.su\",\r\n                        searchIds: [\"rid\", \"imdbid\"]\r\n                    },\r\n                    {\r\n                        name: \"nzbgeek\",\r\n                        host: \"https://api.nzbgeek.info\",\r\n                        searchIds: [\"tvdbid\", \"rid\", \"imdbid\"]\r\n                    },\r\n                    {\r\n                        name: \"6box nzedb\",\r\n                        host: \"https://nzedb.6box.me\",\r\n                        searchIds: [\"rid\", \"imdbid\"]\r\n                    },\r\n                    {\r\n                        name: \"6box nntmux\",\r\n                        host: \"https://nn-tmux.6box.me\",\r\n                        searchIds: [\"tvdbid\", \"rid\", \"imdbid\"]\r\n                    },\r\n                    {\r\n                        name: \"6box\",\r\n                        host: \"https://6box.me\",\r\n                        searchIds: [\"imdbid\"]\r\n                    },\r\n                    {\r\n                        name: \"Drunken Slug\",\r\n                        host: \"https://drunkenslug.com\",\r\n                        searchIds: [\"tvdbid\", \"imdbid\", \"tvmazeid\", \"traktid\", \"tmdbid\"]\r\n                    }\r\n\r\n                ];\r\n\r\n                $scope.selectPreset = function (item, model) {\r\n                    if (item.name == \"None\") {\r\n                        $scope.model.name = \"\";\r\n                        $scope.model.host = \"\";\r\n                        $scope.model.apikey = \"\";\r\n                        $scope.model.score = 0;\r\n                        $scope.model.timeout = null;\r\n                        $scope.model.search_ids = [\"tvdbid\", \"rid\", \"imdbid\"]; //Default\r\n                        $scope.display = \"\";\r\n                    } else {\r\n                        $scope.model.name = item.name;\r\n                        $scope.model.host = item.host;\r\n                        $scope.model.search_ids = item.searchIds;\r\n                        _.defer(function () {\r\n                            $scope.display = item.name;\r\n                        });\r\n\r\n                    }\r\n                };\r\n\r\n                $scope.$watch('[model.host]', function () {\r\n                    $scope.display = \"\";\r\n                }, true);\r\n            }\r\n        });\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'horizontalTestConnection',\r\n            extends: 'testConnection',\r\n            wrapper: ['settingWrapper', 'bootstrapHasError']\r\n        });\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'horizontalCheckCaps',\r\n            extends: 'checkCaps',\r\n            wrapper: ['settingWrapper', 'bootstrapHasError']\r\n        });\r\n\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'horizontalApiKeyInput',\r\n            extends: 'apiKeyInput',\r\n            wrapper: ['settingWrapper', 'bootstrapHasError']\r\n        });\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'horizontalPercentInput',\r\n            extends: 'percentInput',\r\n            wrapper: ['settingWrapper', 'bootstrapHasError']\r\n        });\r\n\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'switch',\r\n            template: [\r\n                '<div style=\"text-align:left\"><input bs-switch type=\"checkbox\" ng-model=\"model[options.key]\"/></div>'\r\n            ].join(' ')\r\n\r\n        });\r\n\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'duoSetting',\r\n            extends: 'input',\r\n            defaultOptions: {\r\n                className: 'col-md-9',\r\n                templateOptions: {\r\n                    type: 'number',\r\n                    noRow: true,\r\n                    label: ''\r\n                }\r\n            }\r\n        });\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'horizontalSwitch',\r\n            extends: 'switch',\r\n            wrapper: ['settingWrapper', 'bootstrapHasError']\r\n        });\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'horizontalSelect',\r\n            extends: 'select',\r\n            wrapper: ['settingWrapper', 'bootstrapHasError']\r\n        });\r\n        \r\n        \r\n        formlyConfigProvider.setType({\r\n            name: 'horizontalMultiselect',\r\n            defaultOptions: {\r\n                templateOptions: {\r\n                    optionsAttr: 'bs-options',\r\n                    ngOptions: 'option[to.valueProp] as option in to.options | filter: $select.search',\r\n                    valueProp: 'id',\r\n                    labelProp: 'label'\r\n                }\r\n            },\r\n            templateUrl: 'ui-select-multiple.html',\r\n            wrapper: ['settingWrapper', 'bootstrapHasError']\r\n        });\r\n\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'label',\r\n            template: '<label class=\"control-label\">{{to.label}}</label>'\r\n        });\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'duolabel',\r\n            extends: 'label',\r\n            defaultOptions: {\r\n                className: 'col-md-2',\r\n                templateOptions: {\r\n                    label: '-'\r\n                }\r\n            }\r\n        });\r\n\r\n        formlyConfigProvider.setType({\r\n            name: 'repeatSection',\r\n            templateUrl: 'repeatSection.html',\r\n            controller: function ($scope) {\r\n                $scope.formOptions = {formState: $scope.formState};\r\n                $scope.addNew = addNew;\r\n                $scope.remove = remove;\r\n                $scope.copyFields = copyFields;\r\n\r\n                function copyFields(fields) {\r\n                    fields = angular.copy(fields);\r\n                    return fields;\r\n                }\r\n\r\n                $scope.clear = function (field) {\r\n                    return _.mapObject(field, function (key, val) {\r\n                        if (typeof val === 'object') {\r\n                            console.log(\"object \" + key);\r\n                            console.log(key);\r\n                            return $scope.clear(val);\r\n                        }\r\n                        console.log(\"other \" + key);\r\n                        return undefined;\r\n\r\n                    });\r\n                };\r\n\r\n\r\n                function addNew() {\r\n                    $scope.model[$scope.options.key] = $scope.model[$scope.options.key] || [];\r\n                    var repeatsection = $scope.model[$scope.options.key];\r\n                    var newsection = angular.copy($scope.options.templateOptions.defaultModel);\r\n                    repeatsection.push(newsection);\r\n                }\r\n                \r\n                function remove($index) {\r\n                    $scope.model[$scope.options.key].splice($index, 1);\r\n                }\r\n            }\r\n        \r\n    });\r\n\r\n    }]);\r\n\r\nangular\r\n    .module('nzbhydraApp').run([\"formlyConfig\", \"formlyValidationMessages\", function (formlyConfig, formlyValidationMessages) {\r\n\r\n    formlyValidationMessages.messages.required = 'to.label + \" is required\"';\r\n    formlyConfig.extras.errorExistsAndShouldBeVisibleExpression = 'fc.$touched || form.$submitted';\r\n\r\n}]);","var filters = angular.module('filters', []);\r\n\r\nfilters.filter('bytes', function() {\r\n\treturn function(bytes, precision) {\r\n\t\tif (isNaN(parseFloat(bytes)) || !isFinite(bytes) || bytes == 0) return '-';\r\n\t\tif (typeof precision === 'undefined') precision = 1;\r\n\t\t\r\n\t\tvar units = ['b', 'kB', 'MB', 'GB', 'TB', 'PB'],\r\n\t\t\tnumber = Math.floor(Math.log(bytes) / Math.log(1024));\r\n\t\treturn (bytes / Math.pow(1024, Math.floor(number))).toFixed(precision) +   units[number];\r\n\t}\r\n});\r\n\r\nfilters.filter('unsafe', \r\n\t[\"$sce\", function ($sce) {\r\n\t\treturn function (value, type) {\r\n\t\t\treturn $sce.trustAs(type || 'html', text);\r\n\t\t};\r\n\t}]\r\n);"],"sourceRoot":"/source/"}